const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":20,\"nextId\":20,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-a39c5664\",\"2\":\"v-a39c5664#栈迁移\",\"3\":\"v-a39c5664#栈迁移的大致操作\",\"4\":\"v-a39c5664#栈迁移核心\",\"5\":\"v-4b77e47b\",\"6\":\"v-4b77e47b#c2018-hitcon-gundam-tcahe机制-泄露libc地址\",\"7\":\"v-4b77e47b#重要知识点\",\"8\":\"v-4b77e47b#tcahe机制\",\"9\":\"v-4b77e47b#机制\",\"10\":\"v-4b77e47b#利用tcache泄露地址\",\"11\":\"v-40b47381\",\"12\":\"v-40b47381#分析一下题\",\"13\":\"v-40b47381#chunk分析\",\"14\":\"v-40b47381#漏洞学习\",\"15\":\"v-40b47381#先学习unlink漏洞\",\"16\":\"v-40b47381#流程\",\"17\":\"v-40b47381#调试技巧\",\"18\":\"v-40b47381#学习路线\",\"19\":\"v-e1e3da16\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,30],\"1\":[3],\"2\":[1,3],\"3\":[1,15],\"4\":[1,78],\"5\":[1],\"6\":[5],\"7\":[1,29],\"8\":[1,16],\"9\":[1,62],\"10\":[1,39],\"11\":[3],\"12\":[1,53],\"13\":[1,20],\"14\":[1,6],\"15\":[1,20],\"16\":[1,52],\"17\":[1,1],\"18\":[2,2],\"19\":[1]},\"averageFieldLength\":[1.5,29.027751196172247],\"storedFields\":{\"0\":{\"h\":\"Blog Home\",\"t\":[\"This is a blog home page demo.\",\"To use this layout, you should set both layout: BlogHome and home: true in the page front matter.\",\"For related configuration docs, please see blog homepage.\"]},\"1\":{\"h\":\"8byte（简单栈迁移）\"},\"2\":{\"h\":\"栈迁移\",\"t\":[\"这里好好学一下栈迁移这个知识点 确实重要 因为已经遇到了很多次了\"]},\"3\":{\"h\":\"栈迁移的大致操作\",\"t\":[\"通过将ebp覆盖成构造的fake_ebp ，再利用leave_ret这个gadget将esp劫持到fake_ebp的地址上。\",\"这里写个小插曲 因为大多数时候我都是去ida直接找的这个gadget 但是好像可以用命令行来解决这个问题比如我们这里用指令\",\"$ ROPgadget --binary pwn --only \\\"leave|ret\\\" \"]},\"4\":{\"h\":\"栈迁移核心\",\"t\":[\"因为我们常使用leave_ret gadget链来实现\",\" leave指令\",\"首先是依靠这个指令来实现把rbp寄存器值变为我们希望的一个地址 这样就可以实现栈的移动\",\"这里说一下我自己的浅薄理解 因为我们使用的栈其实本质就是基于rbp/rsp定位的 所以我们只需要把寄存器的值改变就实现了栈迁移 新的fake 地址后面的内容会被当成栈\",\"那么这个指令的本质:\",\"mov esp,ebp; pop ebp; \",\"ret 指令\",\"pop eip \",\"那么下面是实现原理图\",\"原理\",\"这里是执行mov esp ,ebp;这个操作之前的栈结构 我们在ebp这个位置放入我们我们希望这个栈最终落脚点 然后就会执行\",\"​ \",\"这里就是pop ebp;这个操作 因为 pop操作我们的rsp向下移动一格 ebp寄存器 存入fake_ebp1_addr\",\"然后执行指令ret--> pop eip; 这个指令 那么同理 rsp向下移动一格 eip存入我们的read_plt\",\"这里需要注意eip这个寄存器很特殊 这个寄存器是存入的我们下一条执行的指令地址 所以当执行完ret后整个程序流程就跑到了read_plt这里\",\"那么 到现在我们就可以理清楚了核心需要实现的部分:\",\"将rbp寄存器改值 ---- >栈迁移\",\"将rip寄存器改值 ------ >劫持程序流程\",\"换句话说 我们只要能够实现这两个部分就可以了\",\"接下来我们需要理解 栈的指针寄存器:rsp 还任然留在了原地 以及最容易理解错的是 当我们执行read函数的时候 程序会自动保存下一个指令的地址 这是函数的调用约定所以当我们执行完后read函数后 我们来到了leave_ret指令的地方\",\"此时我们rsp = rbp 那么我们的rsp也成功完成了迁移工作 来到了 fake_ebp的地方\",\"然后 把fake_ebp2的地址给了rbp rsp向下跑一下\",\"原理3\",\"所以这里我们是需要构造第二个fake_ebp的\",\"然后我们就成功完成了一次栈迁移\"]},\"5\":{\"h\":\"\"},\"6\":{\"h\":\"c2018-HitCon-gundam(tcahe机制+泄露libc地址)\"},\"7\":{\"h\":\"重要知识点\",\"t\":[\"由于linux中使用free()进行内存释放时，不大于 max_fast （默认值为 64B）的 chunk 被释放后，首先会被放到 fast bins中，大于max_fast的chunk或者fast bins 中的空闲 chunk 合并后会被放入unsorted bin中。而在fastbin为空时，unsortbin的fd和bk指向自身main_arena中，该地址的相对偏移值存放在libc.so中，可以通过use after free后打印出main_arena的实际地址，结合偏移值从而得到libc的加载地址。\"]},\"8\":{\"h\":\"tcahe机制\",\"t\":[\"学习文章:glibc Tcache机制-CSDN博客\",\"一共有64个bins\",\"Tcache缓存的是非Large Chunk的chunk。\",\"首先是tcahe是单链表结构,每条链上最多可以有7个chunk\",\"free后 当对应的tcahe bin放满了 才会放入fastbin,unsorted bin\",\"malloc的时候优先去tcahe中找\"]},\"9\":{\"h\":\"机制\",\"t\":[\"代码:\",\"这里tcache_perthread_struct 首先\",\"counts代表着每个bin当前所有的chunk数量\",\"tcache_entry代表着当前bin的首个chunk\",\"由于是单链形式 所以结构体属性就是下一个chunk的指针\",\"typedef struct tcache_entry { struct tcache_entry *next; } tcache_entry; /* There is one of these for each thread, which contains the per-thread cache (hence \\\"tcache_perthread_struct\\\"). Keeping overall size low is mildly important. Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons. */ typedef struct tcache_perthread_struct { char counts[TCACHE_MAX_BINS]; tcache_entry *entries[TCACHE_MAX_BINS]; } tcache_perthread_struct; static __thread tcache_perthread_struct *tcache = NULL; \",\"结构图\",\"机制\"]},\"10\":{\"h\":\"利用tcache泄露地址\",\"t\":[\"tcache位于heap最前端 也属于一个堆块\",\"用vmmap指令查找heap最开始的位置\",\"用x/26gx 指令来查看对应地址 堆结构 （x/26gx 0x55e22cd98000+0x10）\",\"heap\",\"也就是最后一个加入tcache的chunk\",\"我们通过连续申请8个gundam,让第八个gundam出现在unsorted bin里面 那么我们如何找到它呢?\",\"我们这里知道了第七个地址 那么第八个的地址:x/26gx 0x000055e22cd98a10+0x30+0x110-0x10\",\"一个gundam包含两个chunk,大小为0x30,另一个为0x110\",\"那么输入指令后我们找到了这个chunk\",\"unsorted_bins\",\"我们可以发现这个地方fd和bk都指向了 同一个地址 也就是main_arena+88(unsortedbin头结点)\",\"然后我们就得到了main_arena的地址\",\"再去查找libc的基地址 vmmap得到的:\",\"计算:\",\"0x7f566befac78-libc基地址0x7f566bb4f000=偏移0x3ac78\",\"这里我们就得到了偏移 这样在远程服务器的时候就可以利用这个偏移获取libc基地址\"]},\"11\":{\"h\":\"ezChunk(unlink+offbynull)\"},\"12\":{\"h\":\"分析一下题\",\"t\":[\"进入 addemo函数内部 查找关键结构体\",\"st数据看起来是关键\",\"(_DWORD *)&st_next12 + 10 * i 这个是存size的\",\"(_QWORD *)&st + 5 * i这个是emo content的内容\",\"(char *)&st + 40 * i + 20是存name的\",\"*((_DWORD *)&st_next8 + 10 * i)存使用情况\",\"我们这里开始简单运算一下 这个数组到底是怎么存放数据的 指针为char类型\",\"存size: point + 40 *i +12 存 int类型\",\"存content :point + 40 *i 存一个结构体指针\",\"存name: point + 40*i +20\",\"存使用情况:point +40*i +8 存一个int\",\"所以每个元素:\",\"type emo struct { Content *string // 0-8 IsUsed int // 8-12 Size int // 12-16 index int // 16-20 Name string[16] //20-36 } \"]},\"13\":{\"h\":\"chunk分析\",\"t\":[\"在addemo的时候name malloc(0x10) 马上free了 但是没有清空\",\"emo content的时候malloc(size)\",\"在delemo的时候是根据emo.isused来判断是否存在的\",\"emo.content被清空 并且被清空\",\"emo.isused被设置为0\",\"editemo的时候是根据判断emo.content是否为空去编辑的\",\"直接向emo.content中写入内容\",\"printemo是根据emo.content是否为空去判断的\",\"然后直接打印出来\"]},\"14\":{\"h\":\"漏洞学习\",\"t\":[\"这题存在off_by_null漏洞\",\"构造heap overlap 触发unlink漏洞\"]},\"15\":{\"h\":\"先学习unlink漏洞\",\"t\":[\"学习文章:一道题彻底理解 Pwn Heap Unlink-腾讯云开发者社区-腾讯云 (tencent.com)\",\"明确一下对象双向链表\",\"宏定义\",\"#define unlink(AV, P, BK, FD) \",\"P： 待脱链的空闲chunk的指针\",\"BK：后一个chunk的指针\",\"FD：前一个chunk的指针\"]},\"16\":{\"h\":\"流程\",\"t\":[\"大小检查\",\"if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) malloc_printerr (\\\"corrupted size vs. prev_size\\\"); \",\"检查下一个chunk的prev_size是否与p的大小相同\",\"获取fd与bk\",\"通过p的fd/bk去获取前面一个chunk的fd和后面一个chunk的bk\",\"检查\",\"if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) malloc_printerr (\\\"corrupted double-linked list\\\"); \",\"这里很关键因为会检查前后chunk中 fd或者bk 指向的是否是p chunk\",\"这里等效为:\",\"P->fd->bk == P <=> *(P->fd + 0x18) == P p->bk->fd == P <=> *(p->bk + 0x10) == P \",\"那么就很明确了\",\"将p->fd置为 (&p-0x18)\",\"将p->bk设置为 (&p-0x10)\",\"脱链\",\"FD->bk = BK 与BK->fd = FD\",\"FD->bk = BK <=> P->fd->bk = p->bk <=> *(P->fd + 0x18) = P->bk //Ⅰ BK->fd = FD <=> P->bk->fd = p->fd <=> *(P->bk + 0x10) = P->fd //Ⅱ \",\"等效为: P->fd->bk = p->bk与 P->bk->fd = p->fd\",\"这里相当于让前后的chunk连接起来了 把中间的chunk忽略掉\"]},\"17\":{\"h\":\"调试技巧\",\"t\":[\"heap可以查看当前的chunk\"]},\"18\":{\"h\":\"学习路线:\",\"t\":[\"学习路线\",\"​\"]},\"19\":{\"h\":\"Posts\"}},\"dirtCount\":0,\"index\":[[\"学习路线\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"学习文章\",{\"1\":{\"8\":1,\"15\":1}}],[\"调试技巧\",{\"0\":{\"17\":1}}],[\"把中间的chunk忽略掉\",{\"1\":{\"16\":1}}],[\"把fake\",{\"1\":{\"4\":1}}],[\"等效为\",{\"1\":{\"16\":1}}],[\"ⅱ\",{\"1\":{\"16\":1}}],[\"ⅰ\",{\"1\":{\"16\":1}}],[\"与bk\",{\"1\":{\"16\":1}}],[\"脱链\",{\"1\":{\"16\":1}}],[\"将p\",{\"1\":{\"16\":2}}],[\"将rip寄存器改值\",{\"1\":{\"4\":1}}],[\"将rbp寄存器改值\",{\"1\":{\"4\":1}}],[\"<=>\",{\"1\":{\"16\":6}}],[\"||\",{\"1\":{\"16\":1}}],[\"检查\",{\"1\":{\"16\":1}}],[\"检查下一个chunk的prev\",{\"1\":{\"16\":1}}],[\"通过p的fd\",{\"1\":{\"16\":1}}],[\"通过将ebp覆盖成构造的fake\",{\"1\":{\"3\":1}}],[\"获取fd与bk\",{\"1\":{\"16\":1}}],[\"vs\",{\"1\":{\"16\":1}}],[\"vmmap得到的\",{\"1\":{\"10\":1}}],[\"流程\",{\"0\":{\"16\":1}}],[\"前一个chunk的指针\",{\"1\":{\"15\":1}}],[\"后一个chunk的指针\",{\"1\":{\"15\":1}}],[\"待脱链的空闲chunk的指针\",{\"1\":{\"15\":1}}],[\"宏定义\",{\"1\":{\"15\":1}}],[\"明确一下对象双向链表\",{\"1\":{\"15\":1}}],[\"腾讯云\",{\"1\":{\"15\":1}}],[\"腾讯云开发者社区\",{\"1\":{\"15\":1}}],[\"先学习unlink漏洞\",{\"0\":{\"15\":1}}],[\"触发unlink漏洞\",{\"1\":{\"14\":1}}],[\"构造heap\",{\"1\":{\"14\":1}}],[\"漏洞学习\",{\"0\":{\"14\":1}}],[\"直接向emo\",{\"1\":{\"13\":1}}],[\"并且被清空\",{\"1\":{\"13\":1}}],[\"在delemo的时候是根据emo\",{\"1\":{\"13\":1}}],[\"在addemo的时候name\",{\"1\":{\"13\":1}}],[\"但是没有清空\",{\"1\":{\"13\":1}}],[\"但是好像可以用命令行来解决这个问题比如我们这里用指令\",{\"1\":{\"3\":1}}],[\"马上free了\",{\"1\":{\"13\":1}}],[\"36\",{\"1\":{\"12\":1}}],[\"16\",{\"1\":{\"12\":3}}],[\"12\",{\"1\":{\"12\":2}}],[\"10\",{\"1\":{\"12\":2}}],[\"8\",{\"1\":{\"12\":2}}],[\"8byte\",{\"0\":{\"1\":1}}],[\"0\",{\"1\":{\"12\":1,\"16\":2}}],[\"0x18\",{\"1\":{\"16\":3}}],[\"0x10\",{\"1\":{\"10\":1,\"13\":1,\"16\":3}}],[\"0x7f566befac78\",{\"1\":{\"10\":1}}],[\"0x000055e22cd98a10+0x30+0x110\",{\"1\":{\"10\":1}}],[\"0x55e22cd98000+0x10\",{\"1\":{\"10\":1}}],[\"指向的是否是p\",{\"1\":{\"16\":1}}],[\"指针为char类型\",{\"1\":{\"12\":1}}],[\"指令来查看对应地址\",{\"1\":{\"10\":1}}],[\"指令\",{\"1\":{\"4\":1}}],[\"存一个int\",{\"1\":{\"12\":1}}],[\"存一个结构体指针\",{\"1\":{\"12\":1}}],[\"存name\",{\"1\":{\"12\":1}}],[\"存content\",{\"1\":{\"12\":1}}],[\"存\",{\"1\":{\"12\":1}}],[\"存size\",{\"1\":{\"12\":1}}],[\"存使用情况\",{\"1\":{\"12\":2}}],[\"存入fake\",{\"1\":{\"4\":1}}],[\"20\",{\"1\":{\"12\":2}}],[\"20是存name的\",{\"1\":{\"12\":1}}],[\"26gx\",{\"1\":{\"10\":3}}],[\"40\",{\"1\":{\"12\":4}}],[\"5\",{\"1\":{\"12\":1}}],[\"qword\",{\"1\":{\"12\":1}}],[\"+8\",{\"1\":{\"12\":1}}],[\"+40\",{\"1\":{\"12\":1}}],[\"+20\",{\"1\":{\"12\":1}}],[\"+12\",{\"1\":{\"12\":1}}],[\"+\",{\"1\":{\"12\":8,\"16\":4}}],[\"查找关键结构体\",{\"1\":{\"12\":1}}],[\"进入\",{\"1\":{\"12\":1}}],[\"进行内存释放时\",{\"1\":{\"7\":1}}],[\"分析一下题\",{\"0\":{\"12\":1}}],[\"计算\",{\"1\":{\"10\":1}}],[\"再去查找libc的基地址\",{\"1\":{\"10\":1}}],[\"再利用leave\",{\"1\":{\"3\":1}}],[\"同一个地址\",{\"1\":{\"10\":1}}],[\"另一个为0x110\",{\"1\":{\"10\":1}}],[\"大小检查\",{\"1\":{\"16\":1}}],[\"大小为0x30\",{\"1\":{\"10\":1}}],[\"大于max\",{\"1\":{\"7\":1}}],[\"一道题彻底理解\",{\"1\":{\"15\":1}}],[\"一个gundam包含两个chunk\",{\"1\":{\"10\":1}}],[\"一共有64个bins\",{\"1\":{\"8\":1}}],[\"让第八个gundam出现在unsorted\",{\"1\":{\"10\":1}}],[\"也就是main\",{\"1\":{\"10\":1}}],[\"也就是最后一个加入tcache的chunk\",{\"1\":{\"10\":1}}],[\"也属于一个堆块\",{\"1\":{\"10\":1}}],[\"x\",{\"1\":{\"10\":2}}],[\"堆结构\",{\"1\":{\"10\":1}}],[\"用x\",{\"1\":{\"10\":1}}],[\"用vmmap指令查找heap最开始的位置\",{\"1\":{\"10\":1}}],[\"利用tcache泄露地址\",{\"0\":{\"10\":1}}],[\"结构图\",{\"1\":{\"9\":1}}],[\"结合偏移值从而得到libc的加载地址\",{\"1\":{\"7\":1}}],[\"just\",{\"1\":{\"9\":1}}],[\"we\",{\"1\":{\"9\":1}}],[\"which\",{\"1\":{\"9\":1}}],[\"name\",{\"1\":{\"12\":1}}],[\"null漏洞\",{\"1\":{\"14\":1}}],[\"null\",{\"1\":{\"9\":1}}],[\"note\",{\"1\":{\"9\":1}}],[\"next8\",{\"1\":{\"12\":1}}],[\"next12\",{\"1\":{\"12\":1}}],[\"next\",{\"1\":{\"9\":1,\"16\":1}}],[\"keeping\",{\"1\":{\"9\":1}}],[\"overlap\",{\"1\":{\"14\":1}}],[\"overall\",{\"1\":{\"9\":1}}],[\"of\",{\"1\":{\"9\":1}}],[\"one\",{\"1\":{\"9\":1}}],[\"only\",{\"1\":{\"3\":1}}],[\"由于是单链形式\",{\"1\":{\"9\":1}}],[\"由于linux中使用free\",{\"1\":{\"7\":1}}],[\"代码\",{\"1\":{\"9\":1}}],[\"机制\",{\"0\":{\"9\":1},\"1\":{\"9\":1}}],[\"才会放入fastbin\",{\"1\":{\"8\":1}}],[\"当对应的tcahe\",{\"1\":{\"8\":1}}],[\"当我们执行read函数的时候\",{\"1\":{\"4\":1}}],[\"每条链上最多可以有7个chunk\",{\"1\":{\"8\":1}}],[\"可以通过use\",{\"1\":{\"7\":1}}],[\"该地址的相对偏移值存放在libc\",{\"1\":{\"7\":1}}],[\"unlink\",{\"1\":{\"15\":2}}],[\"unlink+offbynull\",{\"0\":{\"11\":1}}],[\"unsortedbin头结点\",{\"1\":{\"10\":1}}],[\"unsorted\",{\"1\":{\"8\":1,\"10\":1}}],[\"unsortbin的fd和bk指向自身main\",{\"1\":{\"7\":1}}],[\"use\",{\"1\":{\"0\":1}}],[\"而在fastbin为空时\",{\"1\":{\"7\":1}}],[\"合并后会被放入unsorted\",{\"1\":{\"7\":1}}],[\"中的空闲\",{\"1\":{\"7\":1}}],[\"首先\",{\"1\":{\"9\":1}}],[\"首先是tcahe是单链表结构\",{\"1\":{\"8\":1}}],[\"首先是依靠这个指令来实现把rbp寄存器值变为我们希望的一个地址\",{\"1\":{\"4\":1}}],[\"首先会被放到\",{\"1\":{\"7\":1}}],[\"被释放后\",{\"1\":{\"7\":1}}],[\"的\",{\"1\":{\"7\":1}}],[\"64b\",{\"1\":{\"7\":1}}],[\"默认值为\",{\"1\":{\"7\":1}}],[\"不大于\",{\"1\":{\"7\":1}}],[\"重要知识点\",{\"0\":{\"7\":1}}],[\"glibc\",{\"1\":{\"8\":1}}],[\"gundam\",{\"0\":{\"6\":1}}],[\"gadget链来实现\",{\"1\":{\"4\":1}}],[\"heap可以查看当前的chunk\",{\"1\":{\"17\":1}}],[\"heap\",{\"1\":{\"10\":1,\"15\":1}}],[\"hence\",{\"1\":{\"9\":1}}],[\"have\",{\"1\":{\"9\":1}}],[\"hitcon\",{\"0\":{\"6\":1}}],[\"homepage\",{\"1\":{\"0\":1}}],[\"home\",{\"0\":{\"0\":1},\"1\":{\"0\":2}}],[\"char\",{\"1\":{\"9\":1,\"12\":1}}],[\"chunksize\",{\"1\":{\"16\":1}}],[\"chunk分析\",{\"0\":{\"13\":1}}],[\"chunk的chunk\",{\"1\":{\"8\":1}}],[\"chunk\",{\"1\":{\"7\":2,\"16\":2}}],[\"cache\",{\"1\":{\"9\":1}}],[\"corrupted\",{\"1\":{\"16\":2}}],[\"com\",{\"1\":{\"15\":1}}],[\"counted\",{\"1\":{\"9\":1}}],[\"counts\",{\"1\":{\"9\":2}}],[\"counts代表着每个bin当前所有的chunk数量\",{\"1\":{\"9\":1}}],[\"could\",{\"1\":{\"9\":1}}],[\"content是否为空去判断的\",{\"1\":{\"13\":1}}],[\"content是否为空去编辑的\",{\"1\":{\"13\":1}}],[\"content中写入内容\",{\"1\":{\"13\":1}}],[\"content被清空\",{\"1\":{\"13\":1}}],[\"content的时候malloc\",{\"1\":{\"13\":1}}],[\"content的内容\",{\"1\":{\"12\":1}}],[\"content\",{\"1\":{\"12\":1}}],[\"contains\",{\"1\":{\"9\":1}}],[\"configuration\",{\"1\":{\"0\":1}}],[\"csdn博客\",{\"1\":{\"8\":1}}],[\"c2018\",{\"0\":{\"6\":1}}],[\"来到了\",{\"1\":{\"4\":1}}],[\"==\",{\"1\":{\"16\":4}}],[\"=\",{\"1\":{\"4\":1,\"9\":1,\"16\":13}}],[\"此时我们rsp\",{\"1\":{\"4\":1}}],[\"程序会自动保存下一个指令的地址\",{\"1\":{\"4\":1}}],[\"以及最容易理解错的是\",{\"1\":{\"4\":1}}],[\"还任然留在了原地\",{\"1\":{\"4\":1}}],[\"栈的指针寄存器\",{\"1\":{\"4\":1}}],[\"栈迁移核心\",{\"0\":{\"4\":1}}],[\"栈迁移的大致操作\",{\"0\":{\"3\":1}}],[\"栈迁移\",{\"0\":{\"2\":1}}],[\"接下来我们需要理解\",{\"1\":{\"4\":1}}],[\"我们这里开始简单运算一下\",{\"1\":{\"12\":1}}],[\"我们这里知道了第七个地址\",{\"1\":{\"10\":1}}],[\"我们可以发现这个地方fd和bk都指向了\",{\"1\":{\"10\":1}}],[\"我们通过连续申请8个gundam\",{\"1\":{\"10\":1}}],[\"我们来到了leave\",{\"1\":{\"4\":1}}],[\"我们只要能够实现这两个部分就可以了\",{\"1\":{\"4\":1}}],[\"我们在ebp这个位置放入我们我们希望这个栈最终落脚点\",{\"1\":{\"4\":1}}],[\"换句话说\",{\"1\":{\"4\":1}}],[\"到现在我们就可以理清楚了核心需要实现的部分\",{\"1\":{\"4\":1}}],[\"所以每个元素\",{\"1\":{\"12\":1}}],[\"所以结构体属性就是下一个chunk的指针\",{\"1\":{\"9\":1}}],[\"所以这里我们是需要构造第二个fake\",{\"1\":{\"4\":1}}],[\"所以当执行完ret后整个程序流程就跑到了read\",{\"1\":{\"4\":1}}],[\"所以我们只需要把寄存器的值改变就实现了栈迁移\",{\"1\":{\"4\":1}}],[\">fd置为\",{\"1\":{\"16\":1}}],[\">fd\",{\"1\":{\"16\":14}}],[\">bk与\",{\"1\":{\"16\":1}}],[\">bk设置为\",{\"1\":{\"16\":1}}],[\">bk\",{\"1\":{\"16\":13}}],[\">劫持程序流程\",{\"1\":{\"4\":1}}],[\">栈迁移\",{\"1\":{\"4\":1}}],[\">\",{\"1\":{\"4\":1}}],[\"然后直接打印出来\",{\"1\":{\"13\":1}}],[\"然后我们就得到了main\",{\"1\":{\"10\":1}}],[\"然后我们就成功完成了一次栈迁移\",{\"1\":{\"4\":1}}],[\"然后\",{\"1\":{\"4\":1}}],[\"然后执行指令ret\",{\"1\":{\"4\":1}}],[\"然后就会执行\",{\"1\":{\"4\":1}}],[\"​\",{\"1\":{\"4\":1,\"18\":1}}],[\"原理3\",{\"1\":{\"4\":1}}],[\"原理\",{\"1\":{\"4\":1}}],[\"那么就很明确了\",{\"1\":{\"16\":1}}],[\"那么输入指令后我们找到了这个chunk\",{\"1\":{\"10\":1}}],[\"那么第八个的地址\",{\"1\":{\"10\":1}}],[\"那么我们如何找到它呢\",{\"1\":{\"10\":1}}],[\"那么我们的rsp也成功完成了迁移工作\",{\"1\":{\"4\":1}}],[\"那么\",{\"1\":{\"4\":1}}],[\"那么同理\",{\"1\":{\"4\":1}}],[\"那么下面是实现原理图\",{\"1\":{\"4\":1}}],[\"那么这个指令的本质\",{\"1\":{\"4\":1}}],[\"expect\",{\"1\":{\"16\":2}}],[\"editemo的时候是根据判断emo\",{\"1\":{\"13\":1}}],[\"emo\",{\"1\":{\"12\":1,\"13\":3}}],[\"ezchunk\",{\"0\":{\"11\":1}}],[\"entries\",{\"1\":{\"9\":2}}],[\"entry\",{\"1\":{\"9\":4}}],[\"entry代表着当前bin的首个chunk\",{\"1\":{\"9\":1}}],[\"each\",{\"1\":{\"9\":2}}],[\"eip存入我们的read\",{\"1\":{\"4\":1}}],[\"eip\",{\"1\":{\"4\":2}}],[\"esp\",{\"1\":{\"4\":2}}],[\"ebp的\",{\"1\":{\"4\":1}}],[\"ebp的地方\",{\"1\":{\"4\":1}}],[\"ebp的地址上\",{\"1\":{\"3\":1}}],[\"ebp2的地址给了rbp\",{\"1\":{\"4\":1}}],[\"ebp1\",{\"1\":{\"4\":1}}],[\"ebp寄存器\",{\"1\":{\"4\":1}}],[\"ebp\",{\"1\":{\"3\":1,\"4\":4}}],[\"mildly\",{\"1\":{\"9\":1}}],[\"malloc\",{\"1\":{\"13\":1,\"16\":2}}],[\"malloc的时候优先去tcahe中找\",{\"1\":{\"8\":1}}],[\"max\",{\"1\":{\"7\":1,\"9\":2}}],[\"matter\",{\"1\":{\"0\":1}}],[\"mov\",{\"1\":{\"4\":1}}],[\"地址后面的内容会被当成栈\",{\"1\":{\"4\":1}}],[\"新的fake\",{\"1\":{\"4\":1}}],[\"这题存在off\",{\"1\":{\"14\":1}}],[\"这样在远程服务器的时候就可以利用这个偏移获取libc基地址\",{\"1\":{\"10\":1}}],[\"这样就可以实现栈的移动\",{\"1\":{\"4\":1}}],[\"这是函数的调用约定所以当我们执行完后read函数后\",{\"1\":{\"4\":1}}],[\"这个数组到底是怎么存放数据的\",{\"1\":{\"12\":1}}],[\"这个是存size的\",{\"1\":{\"12\":1}}],[\"这个寄存器是存入的我们下一条执行的指令地址\",{\"1\":{\"4\":1}}],[\"这个指令\",{\"1\":{\"4\":1}}],[\"这个操作\",{\"1\":{\"4\":1}}],[\"这个操作之前的栈结构\",{\"1\":{\"4\":1}}],[\"这里相当于让前后的chunk连接起来了\",{\"1\":{\"16\":1}}],[\"这里等效为\",{\"1\":{\"16\":1}}],[\"这里很关键因为会检查前后chunk中\",{\"1\":{\"16\":1}}],[\"这里我们就得到了偏移\",{\"1\":{\"10\":1}}],[\"这里tcache\",{\"1\":{\"9\":1}}],[\"这里需要注意eip这个寄存器很特殊\",{\"1\":{\"4\":1}}],[\"这里就是pop\",{\"1\":{\"4\":1}}],[\"这里是执行mov\",{\"1\":{\"4\":1}}],[\"这里说一下我自己的浅薄理解\",{\"1\":{\"4\":1}}],[\"这里写个小插曲\",{\"1\":{\"3\":1}}],[\"这里好好学一下栈迁移这个知识点\",{\"1\":{\"2\":1}}],[\"libc基地址0x7f566bb4f000=偏移0x3ac78\",{\"1\":{\"10\":1}}],[\"list\",{\"1\":{\"9\":1,\"16\":1}}],[\"linked\",{\"1\":{\"9\":1,\"16\":1}}],[\"low\",{\"1\":{\"9\":1}}],[\"leave指令\",{\"1\":{\"4\":1}}],[\"leave|ret\",{\"1\":{\"3\":1}}],[\"layout\",{\"1\":{\"0\":2}}],[\"rbp\",{\"1\":{\"4\":1}}],[\"rsp向下跑一下\",{\"1\":{\"4\":1}}],[\"rsp向下移动一格\",{\"1\":{\"4\":1}}],[\"rsp\",{\"1\":{\"4\":1}}],[\"rsp定位的\",{\"1\":{\"4\":1}}],[\"ropgadget\",{\"1\":{\"3\":1}}],[\"reasons\",{\"1\":{\"9\":1}}],[\"redundant\",{\"1\":{\"9\":1}}],[\"ret指令的地方\",{\"1\":{\"4\":1}}],[\"ret\",{\"1\":{\"4\":2}}],[\"ret这个gadget将esp劫持到fake\",{\"1\":{\"3\":1}}],[\"related\",{\"1\":{\"0\":1}}],[\"$\",{\"1\":{\"3\":1}}],[\"因为\",{\"1\":{\"4\":1}}],[\"因为我们使用的栈其实本质就是基于rbp\",{\"1\":{\"4\":1}}],[\"因为我们常使用leave\",{\"1\":{\"4\":1}}],[\"因为大多数时候我都是去ida直接找的这个gadget\",{\"1\":{\"3\":1}}],[\"因为已经遇到了很多次了\",{\"1\":{\"2\":1}}],[\"确实重要\",{\"1\":{\"2\":1}}],[\"简单栈迁移\",{\"0\":{\"1\":1}}],[\"printerr\",{\"1\":{\"16\":2}}],[\"printemo是根据emo\",{\"1\":{\"13\":1}}],[\"prev\",{\"1\":{\"16\":2}}],[\"p\",{\"1\":{\"15\":2,\"16\":26}}],[\"posts\",{\"0\":{\"19\":1}}],[\"point\",{\"1\":{\"12\":4}}],[\"pop操作我们的rsp向下移动一格\",{\"1\":{\"4\":1}}],[\"pop\",{\"1\":{\"4\":3}}],[\"performance\",{\"1\":{\"9\":1}}],[\"per\",{\"1\":{\"9\":1}}],[\"perthread\",{\"1\":{\"9\":5}}],[\"plt这里\",{\"1\":{\"4\":1}}],[\"plt\",{\"1\":{\"4\":1}}],[\"please\",{\"1\":{\"0\":1}}],[\"pwn\",{\"1\":{\"3\":1,\"15\":1}}],[\"page\",{\"1\":{\"0\":2}}],[\"double\",{\"1\":{\"16\":1}}],[\"docs\",{\"1\":{\"0\":1}}],[\"define\",{\"1\":{\"15\":1}}],[\"demo\",{\"1\":{\"0\":1}}],[\"dword\",{\"1\":{\"12\":2}}],[\"fd或者bk\",{\"1\":{\"16\":1}}],[\"fd\",{\"1\":{\"15\":2,\"16\":5}}],[\"free后\",{\"1\":{\"8\":1}}],[\"free后打印出main\",{\"1\":{\"7\":1}}],[\"front\",{\"1\":{\"0\":1}}],[\"fast的chunk或者fast\",{\"1\":{\"7\":1}}],[\"fast\",{\"1\":{\"7\":2}}],[\"fake\",{\"1\":{\"4\":1}}],[\"for\",{\"1\":{\"0\":1,\"9\":2}}],[\"if\",{\"1\":{\"16\":2}}],[\"i这个是emo\",{\"1\":{\"12\":1}}],[\"i\",{\"1\":{\"12\":7}}],[\"important\",{\"1\":{\"9\":1}}],[\"index\",{\"1\":{\"12\":1}}],[\"int\",{\"1\":{\"12\":3}}],[\"int类型\",{\"1\":{\"12\":1}}],[\"in\",{\"1\":{\"0\":1}}],[\"isused被设置为0\",{\"1\":{\"13\":1}}],[\"isused来判断是否存在的\",{\"1\":{\"13\":1}}],[\"isused\",{\"1\":{\"12\":1}}],[\"is\",{\"1\":{\"0\":1,\"9\":3}}],[\"builtin\",{\"1\":{\"16\":2}}],[\"bk去获取前面一个chunk的fd和后面一个chunk的bk\",{\"1\":{\"16\":1}}],[\"bk\",{\"1\":{\"15\":2,\"16\":4}}],[\"by\",{\"1\":{\"14\":1}}],[\"bin里面\",{\"1\":{\"10\":1}}],[\"bin\",{\"1\":{\"8\":1}}],[\"bin放满了\",{\"1\":{\"8\":1}}],[\"bin中\",{\"1\":{\"7\":1}}],[\"bins\",{\"1\":{\"7\":1,\"9\":2,\"10\":1}}],[\"bins中\",{\"1\":{\"7\":1}}],[\"binary\",{\"1\":{\"3\":1}}],[\"both\",{\"1\":{\"0\":1}}],[\"bloghome\",{\"1\":{\"0\":1}}],[\"blog\",{\"0\":{\"0\":1},\"1\":{\"0\":2}}],[\"string\",{\"1\":{\"12\":2}}],[\"struct\",{\"1\":{\"9\":8,\"12\":1}}],[\"st\",{\"1\":{\"12\":4}}],[\"st数据看起来是关键\",{\"1\":{\"12\":1}}],[\"static\",{\"1\":{\"9\":1}}],[\"size是否与p的大小相同\",{\"1\":{\"16\":1}}],[\"size\",{\"1\":{\"9\":1,\"12\":1,\"13\":1,\"16\":3}}],[\"so中\",{\"1\":{\"7\":1}}],[\"see\",{\"1\":{\"0\":1}}],[\"set\",{\"1\":{\"0\":1}}],[\"should\",{\"1\":{\"0\":1}}],[\"you\",{\"1\":{\"0\":1}}],[\"tencent\",{\"1\":{\"15\":1}}],[\"type\",{\"1\":{\"12\":1}}],[\"typedef\",{\"1\":{\"9\":2}}],[\"time\",{\"1\":{\"9\":1}}],[\"tcache位于heap最前端\",{\"1\":{\"10\":1}}],[\"tcache\",{\"1\":{\"9\":12}}],[\"tcache缓存的是非large\",{\"1\":{\"8\":1}}],[\"tcache机制\",{\"1\":{\"8\":1}}],[\"tcahe机制\",{\"0\":{\"8\":1}}],[\"tcahe机制+泄露libc地址\",{\"0\":{\"6\":1}}],[\"that\",{\"1\":{\"9\":1}}],[\"thread\",{\"1\":{\"9\":3}}],[\"these\",{\"1\":{\"9\":1}}],[\"there\",{\"1\":{\"9\":1}}],[\"the\",{\"1\":{\"0\":1,\"9\":2}}],[\"this\",{\"1\":{\"0\":2,\"9\":1}}],[\"true\",{\"1\":{\"0\":1}}],[\"to\",{\"1\":{\"0\":1}}],[\"av\",{\"1\":{\"15\":1}}],[\"addemo函数内部\",{\"1\":{\"12\":1}}],[\"addr\",{\"1\":{\"4\":1}}],[\"are\",{\"1\":{\"9\":1}}],[\"arena的地址\",{\"1\":{\"10\":1}}],[\"arena的实际地址\",{\"1\":{\"7\":1}}],[\"arena+88\",{\"1\":{\"10\":1}}],[\"arena中\",{\"1\":{\"7\":1}}],[\"after\",{\"1\":{\"7\":1}}],[\"and\",{\"1\":{\"0\":1,\"9\":1}}],[\"a\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
