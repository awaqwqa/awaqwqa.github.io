import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as p,a,b as n,d as e,e as i}from"./app-tpf4QSHl.js";const l={},d=a("h1",{id:"house-of-apple-原理细学习",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#house-of-apple-原理细学习","aria-hidden":"true"},"#"),n(" house of apple 原理细学习")],-1),r=a("blockquote",null,[a("p",null,"其实还有很多house还没学 看见house of apple文章中提及了很多其他的house 顺便一起学了")],-1),u=a("h2",{id:"参考文章",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),n(" 参考文章:")],-1),_={href:"https://bbs.kanxue.com/thread-273418.htm",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/qq_54218833/article/details/128624427",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h2><ul><li>触发exit函数 / main函数返回</li><li>泄露heap地址 libc地址</li><li>可进行largebin attack</li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><blockquote><p>这里阅读了大致逻辑后进行总结</p></blockquote><ul><li>首先是通过一次largebin劫持<code>_IO_list_all</code> 伪造</li><li>构造时将<code>vatble</code>填写<code>_IO_wstrn_jumps</code></li><li>触发exit函数 exit调用<code>_IO_flush_all_lockp</code>（原本会遍历所有的<code>File</code>结构体依次执行overflow函数）<br>由于我们劫持了vtable 所以最终调用了<code>_IO_wstrn_overflow</code>函数 会将<code>File</code>结构体中的<code>_wide_data</code>字段保存的地址附近写入值</li></ul><h3 id="覆盖vatble" tabindex="-1"><a class="header-anchor" href="#覆盖vatble" aria-hidden="true">#</a> 覆盖vatble</h3><blockquote><p>也就是覆盖<code>FILE</code>结构体0xd8偏移位置的数据 为<code>_IO_wstrn_jumps</code>地址</p></blockquote><figure><img src="https://awaqwqa.github.io/img/house_of_apple/image-20240423173604690.png" alt="image-20240423173604690" tabindex="0" loading="lazy"><figcaption>image-20240423173604690</figcaption></figure><h3 id="调用-io-wstrn-overflow" tabindex="-1"><a class="header-anchor" href="#调用-io-wstrn-overflow" aria-hidden="true">#</a> 调用_IO_wstrn_overflow</h3><ul><li><p><code>_IO_wstrn_jumps</code>:</p><figure><img src="https://awaqwqa.github.io/img/house_of_apple/image-20240423173959024.png" alt="image-20240423173959024" tabindex="0" loading="lazy"><figcaption>image-20240423173959024</figcaption></figure></li><li><p>提取<code>vatble</code>(_IO_wstrn_jumps)调用overflow</p><ul><li><img src="https://awaqwqa.github.io/img/house_of_apple/image-20240423174606432.png" alt="image-20240423174606432" tabindex="0" loading="lazy"><figcaption>image-20240423174606432</figcaption></li></ul></li><li><p>调用<code>_IO_wstrn_jumps</code>的<code>_IO_wstrn_overflow</code>函数</p><ul><li><img src="https://awaqwqa.github.io/img/house_of_apple/image-20240423174817889.png" alt="image-20240423174817889" tabindex="0" loading="lazy"><figcaption>image-20240423174817889</figcaption></li></ul></li></ul><h3 id="覆写数据" tabindex="-1"><a class="header-anchor" href="#覆写数据" aria-hidden="true">#</a> 覆写数据</h3><blockquote><p>根据<code>_IO_wstrn_overflow</code>可以知道<code>fp-&gt;_wide_data</code>地址所指区域会被覆写上<code>overflow_buff</code> 我们结合结构体来理解一下</p><p>可以发现<code>_wide_data</code>位于偏移<code>0xa0</code> 其中<code>_wide_data</code>偏移从0x0到0x30地址处都会被覆写上<code>fp-&gt;overflow_buf</code>(偏移<code>0xf0</code>)</p><p>那么就是我们构造的<code>FILE</code>结构体 <code>vtable</code>(0xd8)写上<code>_IO_wstrn_jumps</code>地址 <code>overflow_buf</code>(0xf0)写上我们想要覆盖的数据 比如</p><p>backdoor地址之类的 <code>_wide_data</code>(0xa0)覆盖上我们想要修改的地址 那么最终就会在目标地址0x0到0x30处覆盖上我们的0xf0偏移处的数据</p></blockquote><h4 id="结构体-io-file-complete" tabindex="-1"><a class="header-anchor" href="#结构体-io-file-complete" aria-hidden="true">#</a> 结构体<code>_IO_FILE_complete</code></h4><blockquote><p>这个结构体包含了<code>_IO_FILE</code>结构体全部内容</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_complete</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> _file<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  __off64_t _offset<span class="token punctuation">;</span>
  <span class="token comment">/* Wide character stream stuff.  */</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_codecvt</span> <span class="token operator">*</span>_codecvt<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> <span class="token operator">*</span>_wide_data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_freeres_list<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>_freeres_buf<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> __pad5<span class="token punctuation">;</span>
  <span class="token keyword">int</span> _mode<span class="token punctuation">;</span>
  <span class="token comment">/* Make sure we don&#39;t get into trouble again.  */</span>
  <span class="token keyword">char</span> _unused2<span class="token punctuation">[</span><span class="token number">15</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><img src="https://awaqwqa.github.io/img/house_of_apple/image-20240423181313898.png" alt="image-20240423181313898" tabindex="0" loading="lazy"><figcaption>image-20240423181313898</figcaption></li></ul><h4 id="结构体-io-wide-data" tabindex="-1"><a class="header-anchor" href="#结构体-io-wide-data" aria-hidden="true">#</a> 结构体<code>_IO_wide_data</code></h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span>
<span class="token punctuation">{</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_read_ptr<span class="token punctuation">;</span>	<span class="token comment">/* Current read pointer */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_read_end<span class="token punctuation">;</span>	<span class="token comment">/* End of get area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_read_base<span class="token punctuation">;</span>	<span class="token comment">/* Start of putback+get area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_write_base<span class="token punctuation">;</span>	<span class="token comment">/* Start of put area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_write_ptr<span class="token punctuation">;</span>	<span class="token comment">/* Current put pointer. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_write_end<span class="token punctuation">;</span>	<span class="token comment">/* End of put area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_buf_base<span class="token punctuation">;</span>	<span class="token comment">/* Start of reserve area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_buf_end<span class="token punctuation">;</span>		<span class="token comment">/* End of reserve area. */</span>
  <span class="token comment">/* The following fields are used to support backing up and undo. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_save_base<span class="token punctuation">;</span>	<span class="token comment">/* Pointer to start of non-current get area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_backup_base<span class="token punctuation">;</span>	<span class="token comment">/* Pointer to first valid character of
				   backup area */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_save_end<span class="token punctuation">;</span>	<span class="token comment">/* Pointer to end of non-current get area. */</span>

  __mbstate_t _IO_state<span class="token punctuation">;</span>
  __mbstate_t _IO_last_state<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_codecvt</span> _codecvt<span class="token punctuation">;</span>

  <span class="token class-name">wchar_t</span> _shortbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>_wide_vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>查看一下偏移 gdb使用指令:<code>p *&amp;_IO_wide_data_0</code>和<code>tel &amp;_IO_wide_data_0</code></p><figure><img src="https://awaqwqa.github.io/img/house_of_apple/image-20240423181623582.png" alt="image-20240423181623582" tabindex="0" loading="lazy"><figcaption>image-20240423181623582</figcaption></figure></li></ul><h4 id="结构体-io-wstrnfile" tabindex="-1"><a class="header-anchor" href="#结构体-io-wstrnfile" aria-hidden="true">#</a> 结构体<code> _IO_wstrnfile</code></h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
  _IO_strfile f<span class="token punctuation">;</span>
  <span class="token comment">/* This is used for the characters which do not fit in the buffer
     provided by the user.  */</span>
  <span class="token class-name">wchar_t</span> overflow_buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> _IO_wstrnfile<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function v(h,b){const s=o("ExternalLinkIcon");return c(),p("div",null,[d,r,u,a("ul",null,[a("li",null,[n("["),a("a",_,[n("原创] House of apple 一种新的glibc中IO攻击方法 (1)-Pwn-看雪-安全社区|安全招聘|kanxue.com"),e(s)])]),a("li",null,[a("a",k,[n("glibc 2.35 pwn——house of apple v1 示例程序_pwn house of apple-CSDN博客"),e(s)])])]),m])}const w=t(l,[["render",v],["__file","house_of_apple.html.vue"]]);export{w as default};
