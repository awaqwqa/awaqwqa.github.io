import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-oB8vjZuB.js";const t={},e=p(`<h1 id="hgameweek2babyre" tabindex="-1"><a class="header-anchor" href="#hgameweek2babyre" aria-hidden="true">#</a> HgameWeek2Babyre</h1><blockquote><p>看上去应该是简单的hh</p></blockquote><h2 id="解释部分函数" tabindex="-1"><a class="header-anchor" href="#解释部分函数" aria-hidden="true">#</a> 解释部分函数</h2><ul><li><p><code>pthread_create</code> 函数 看名字就应该差不多能推断出来是一个线程创建函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span>
                   <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>thread</strong>: 指向 <code>pthread_t</code> 变量的指针，函数成功完成时，这个变量将被填充为新创建线程的线程ID。</p></li><li><p><strong>attr</strong>: 指向 <code>pthread_attr_t</code> 结构体的指针，该结构体指定了新线程的属性。如果此值为 <code>NULL</code>，则使用默认属性创建线程。</p></li><li><p><strong>start_routine</strong>: 指向将由新线程执行的函数的函数指针。这个函数必须返回一个 <code>void *</code> 并且接受一个 <code>void *</code> 参数。</p></li><li><p><strong>arg</strong>: 指向将被传递给 <code>start_routine</code> 函数的参数的指针。</p></li><li><p>函数在成功时返回 <code>0</code>，在失败时返回非零错误编号。</p></li></ul></li><li><p><code>pthread_join</code> 函数是 POSIX 线程库（pthreads）中的一个函数，用于等待指定的线程结束。</p><blockquote><p>当一个线程结束时，它的资源不会立即被操作系统回收，直到其他线程对其进行了回收操作。<code>pthread_join</code> 函数允许一个线程等待另一个线程结束，并回收其资源，类似于进程中的 <code>wait</code> 系统调用。</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>thread</strong>: 要等待的线程标识符，是调用 <code>pthread_create</code> 时创建线程的返回值。</li><li><strong>retval</strong>: 指向一个指针的指针，用于接收被等待线程的退出状态。如果不关心退出状态，可以传递 <code>NULL</code>。</li></ul></li></ul><h2 id="正式做题" tabindex="-1"><a class="header-anchor" href="#正式做题" aria-hidden="true">#</a> 正式做题</h2><ul><li><p>先大概把类型改改 把变量名字改改</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-40h]</span>
  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-3Ch]</span>
  <span class="token class-name">pthread_t</span> newthread<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h] BYREF</span>
  <span class="token class-name">pthread_t</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-28h] BYREF</span>
  <span class="token class-name">pthread_t</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-20h] BYREF</span>
  <span class="token class-name">pthread_t</span> v9<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h] BYREF</span>

  v9<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">get_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">__sigsetjmp</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__sighandler_t<span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>value <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token number">0x11u</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_557BBE9C2280<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_557BBE9C22A0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_557BBE9C22C0<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newthread<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dest0<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v7<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> dest1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v8<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> dest2<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> dest3<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newthread <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_557BBE9BF803</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h3><ul><li><p>先是get我们的输入 然后在我们输入最后的位置加入249数据</p></li><li><p>对<code>value</code>变量xor 我们点入value变量 查看相关引用 发现主要用在加密input上面 并且发现下面这个函数 说明初始值是feifei</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sub_557BBE9BF2E9</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> <span class="token string">&quot;feifei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后分别开启四个函数 并发开启</p><ul><li>几乎每个函数都是长这个样子的 我们猜测是每个函数要等待上一个函数执行完毕再执行</li><li>真实情况我们以动调为标准</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> __fastcall __noreturn <span class="token function">dest0</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> n <span class="token operator">&gt;</span> <span class="token number">31</span> <span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    input<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>value <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> input<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>n<span class="token punctuation">;</span>
    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_557BBE9C2280<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_557BBE9C2280<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后就是检查input是否为flag了</p></li></ul><h2 id="动调" tabindex="-1"><a class="header-anchor" href="#动调" aria-hidden="true">#</a> 动调</h2><ul><li><p>由于这题涉及多线程 所以我们就在每个加密函数里面打idapython的脚本 来看看对应函数运行的时候n的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> idc
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;dest 0 n:&quot;</span><span class="token punctuation">,</span>idc<span class="token punctuation">.</span>get_reg_value<span class="token punctuation">(</span><span class="token string">&quot;eax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>类似于这样 也就是在dest函数下面写入对应的脚本 来看看运行的顺序</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">0</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">1</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">2</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">3</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">4</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">5</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">6</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">7</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">8</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">9</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">10</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">11</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">12</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">13</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">14</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">15</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">16</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">17</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">18</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">19</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">20</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">21</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">22</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">23</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">24</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">25</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">26</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">27</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">28</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">29</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">30</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">31</span>
dest <span class="token number">0</span> n<span class="token operator">:</span> <span class="token number">32</span>
dest <span class="token number">1</span> n<span class="token operator">:</span> <span class="token number">32</span>
dest <span class="token number">2</span> n<span class="token operator">:</span> <span class="token number">32</span>
dest <span class="token number">3</span> n<span class="token operator">:</span> <span class="token number">32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>以及value的部分</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">get_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">__sigsetjmp</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__sighandler_t<span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>value <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token number">0x11u</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这里我们动调发现value的值在xor第三次的时候就终止了 所以参与下面加密函数的value值为:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x69</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h2><ul><li>流程知道了 反调试知道了 现在提取flag数据进行解密</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0x00002F14</span><span class="token punctuation">,</span> <span class="token number">0x0000004E</span><span class="token punctuation">,</span> <span class="token number">0x00004FF3</span><span class="token punctuation">,</span> <span class="token number">0x0000006D</span><span class="token punctuation">,</span> <span class="token number">0x000032D8</span><span class="token punctuation">,</span> <span class="token number">0x0000006D</span><span class="token punctuation">,</span> <span class="token number">0x00006B4B</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF92</span><span class="token punctuation">,</span>
    <span class="token number">0x0000264F</span><span class="token punctuation">,</span> <span class="token number">0x0000005B</span><span class="token punctuation">,</span> <span class="token number">0x000052FB</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF9C</span><span class="token punctuation">,</span> <span class="token number">0x00002B71</span><span class="token punctuation">,</span> <span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x00002A6F</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF95</span><span class="token punctuation">,</span>
    <span class="token number">0x000028FA</span><span class="token punctuation">,</span> <span class="token number">0x0000001D</span><span class="token punctuation">,</span> <span class="token number">0x00002989</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF9B</span><span class="token punctuation">,</span> <span class="token number">0x000028B4</span><span class="token punctuation">,</span> <span class="token number">0x0000004E</span><span class="token punctuation">,</span> <span class="token number">0x00004506</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFDA</span><span class="token punctuation">,</span>
    <span class="token number">0x0000177B</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFFC</span><span class="token punctuation">,</span> <span class="token number">0x000040CE</span><span class="token punctuation">,</span> <span class="token number">0x0000007D</span><span class="token punctuation">,</span> <span class="token number">0x000029E3</span><span class="token punctuation">,</span> <span class="token number">0x0000000F</span><span class="token punctuation">,</span> <span class="token number">0x00001F11</span><span class="token punctuation">,</span> <span class="token number">0x000000FF</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dest3</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dest3 n:%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">^=</span> flag<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> value<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dest2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dest2 n:%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">/=</span> flag<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dest1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dest1 n:%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+=</span> value<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> flag<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dest0</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dest0 n:%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-=</span> value<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> flag<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>

            <span class="token function">dest3</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token function">dest2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token function">dest1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token function">dest0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* code */</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nOutput:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* code */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","babyre.html.vue"]]);export{k as default};
