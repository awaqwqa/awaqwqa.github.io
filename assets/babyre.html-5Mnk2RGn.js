const e=JSON.parse('{"key":"v-596613ec","path":"/posts/re/hgameWeek2/babyre.html","title":"HgameWeek2Babyre","lang":"en-US","frontmatter":{"tag":["re","ctf"],"description":"HgameWeek2Babyre 看上去应该是简单的hh 解释部分函数 pthread_create 函数 看名字就应该差不多能推断出来是一个线程创建函数 int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); thread: 指向 pthread_t 变量的指针，函数成功完成时，这个变量将被填充为新创建线程的线程ID。 attr: 指向 pthread_attr_t 结构体的指针，该结构体指定了新线程的属性。如果此值为 NULL，则使用默认属性创建线程。 start_routine: 指向将由新线程执行的函数的函数指针。这个函数必须返回一个 void * 并且接受一个 void * 参数。 arg: 指向将被传递给 start_routine 函数的参数的指针。 函数在成功时返回 0，在失败时返回非零错误编号。 pthread_join 函数是 POSIX 线程库（pthreads）中的一个函数，用于等待指定的线程结束。 当一个线程结束时，它的资源不会立即被操作系统回收，直到其他线程对其进行了回收操作。pthread_join 函数允许一个线程等待另一个线程结束，并回收其资源，类似于进程中的 wait 系统调用。 #include &lt;pthread.h&gt; int pthread_join(pthread_t thread, void **retval); thread: 要等待的线程标识符，是调用 pthread_create 时创建线程的返回值。 retval: 指向一个指针的指针，用于接收被等待线程的退出状态。如果不关心退出状态，可以传递 NULL。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/re/hgameWeek2/babyre.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"HgameWeek2Babyre"}],["meta",{"property":"og:description","content":"HgameWeek2Babyre 看上去应该是简单的hh 解释部分函数 pthread_create 函数 看名字就应该差不多能推断出来是一个线程创建函数 int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); thread: 指向 pthread_t 变量的指针，函数成功完成时，这个变量将被填充为新创建线程的线程ID。 attr: 指向 pthread_attr_t 结构体的指针，该结构体指定了新线程的属性。如果此值为 NULL，则使用默认属性创建线程。 start_routine: 指向将由新线程执行的函数的函数指针。这个函数必须返回一个 void * 并且接受一个 void * 参数。 arg: 指向将被传递给 start_routine 函数的参数的指针。 函数在成功时返回 0，在失败时返回非零错误编号。 pthread_join 函数是 POSIX 线程库（pthreads）中的一个函数，用于等待指定的线程结束。 当一个线程结束时，它的资源不会立即被操作系统回收，直到其他线程对其进行了回收操作。pthread_join 函数允许一个线程等待另一个线程结束，并回收其资源，类似于进程中的 wait 系统调用。 #include &lt;pthread.h&gt; int pthread_join(pthread_t thread, void **retval); thread: 要等待的线程标识符，是调用 pthread_create 时创建线程的返回值。 retval: 指向一个指针的指针，用于接收被等待线程的退出状态。如果不关心退出状态，可以传递 NULL。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T06:52:20.000Z"}],["meta",{"property":"article:author","content":"Elegy"}],["meta",{"property":"article:tag","content":"re"}],["meta",{"property":"article:tag","content":"ctf"}],["meta",{"property":"article:modified_time","content":"2024-03-03T06:52:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HgameWeek2Babyre\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T06:52:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Elegy\\"}]}"]]},"headers":[{"level":2,"title":"解释部分函数","slug":"解释部分函数","link":"#解释部分函数","children":[]},{"level":2,"title":"正式做题","slug":"正式做题","link":"#正式做题","children":[{"level":3,"title":"流程","slug":"流程","link":"#流程","children":[]}]},{"level":2,"title":"动调","slug":"动调","link":"#动调","children":[]},{"level":2,"title":"脚本","slug":"脚本","link":"#脚本","children":[]}],"git":{"createdTime":1707991051000,"updatedTime":1709448740000,"contributors":[{"name":"awaqwqa","email":"88972629+awaqwqa@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":4.09,"words":1228},"filePathRelative":"posts/re/hgameWeek2/babyre.md","localizedDate":"February 15, 2024","excerpt":"<h1> HgameWeek2Babyre</h1>\\n<blockquote>\\n<p>看上去应该是简单的hh</p>\\n</blockquote>\\n<h2> 解释部分函数</h2>\\n<ul>\\n<li>\\n<p><code>pthread_create</code> 函数 看名字就应该差不多能推断出来是一个线程创建函数</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_create</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_t</span> <span class=\\"token operator\\">*</span>thread<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">pthread_attr_t</span> <span class=\\"token operator\\">*</span>attr<span class=\\"token punctuation\\">,</span>\\n                   <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>start_routine<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>arg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ul>\\n<li>\\n<p><strong>thread</strong>: 指向 <code>pthread_t</code> 变量的指针，函数成功完成时，这个变量将被填充为新创建线程的线程ID。</p>\\n</li>\\n<li>\\n<p><strong>attr</strong>: 指向 <code>pthread_attr_t</code> 结构体的指针，该结构体指定了新线程的属性。如果此值为 <code>NULL</code>，则使用默认属性创建线程。</p>\\n</li>\\n<li>\\n<p><strong>start_routine</strong>: 指向将由新线程执行的函数的函数指针。这个函数必须返回一个 <code>void *</code> 并且接受一个 <code>void *</code> 参数。</p>\\n</li>\\n<li>\\n<p><strong>arg</strong>: 指向将被传递给 <code>start_routine</code> 函数的参数的指针。</p>\\n</li>\\n<li>\\n<p>函数在成功时返回 <code>0</code>，在失败时返回非零错误编号。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>pthread_join</code> 函数是 POSIX 线程库（pthreads）中的一个函数，用于等待指定的线程结束。</p>\\n<blockquote>\\n<p>当一个线程结束时，它的资源不会立即被操作系统回收，直到其他线程对其进行了回收操作。<code>pthread_join</code> 函数允许一个线程等待另一个线程结束，并回收其资源，类似于进程中的 <code>wait</code> 系统调用。</p>\\n</blockquote>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;pthread.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pthread_join</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">pthread_t</span> thread<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span>retval<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ul>\\n<li><strong>thread</strong>: 要等待的线程标识符，是调用 <code>pthread_create</code> 时创建线程的返回值。</li>\\n<li><strong>retval</strong>: 指向一个指针的指针，用于接收被等待线程的退出状态。如果不关心退出状态，可以传递 <code>NULL</code>。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
