import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e as t}from"./app-lch0_zHc.js";const p={},o=t(`<h1 id="house-of-lore学习" tabindex="-1"><a class="header-anchor" href="#house-of-lore学习" aria-hidden="true">#</a> House of lore学习</h1><blockquote><p>主要是看着wiki 理解理解 然后自己看的glibc2.27的源码 抛开tcache部分</p></blockquote><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2><blockquote><p>这里是去除了不重要的<code>tcache bin</code>判断部分</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      idx <span class="token operator">=</span> <span class="token function">smallbin_index</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
      bin <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          bck <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): smallbin double linked list corrupted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
          bin<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
          bck<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> bin<span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>
	           <span class="token function">set_non_main_arena</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> p<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="漏洞利用图" tabindex="-1"><a class="header-anchor" href="#漏洞利用图" aria-hidden="true">#</a> 漏洞利用图</h2><figure><img src="https://awaqwqa.github.io/img/house_of_lore/image-20240319205119155.png" alt="image-20240319205119155" tabindex="0" loading="lazy"><figcaption>image-20240319205119155</figcaption></figure><ul><li><p>这里我们可以直观看见bck victim bin的相对位置 这里我简化了部分链</p><ul><li><p>由于定位bck是通过victim来确定的</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bck <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>所以一但我们劫持了victim的bk后 指向我们我们stack里面的空间 或者任何一个我们我们想控制的空间</p><blockquote><p>这样修改victim 中bk值 然后构造目标地址+0x18位置的地址为victim的地址 即可完成劫持 我们就可以malloc一个</p></blockquote><figure><img src="https://awaqwqa.github.io/img/house_of_lore/img.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ul></li></ul>`,8),e=[o];function c(i,l){return a(),s("div",null,e)}const k=n(p,[["render",c],["__file","house_of_lore.html.vue"]]);export{k as default};
