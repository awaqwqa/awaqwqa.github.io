import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-XSbhAI8_.js";const p={},e=t(`<h1 id="one-byte-rop" tabindex="-1"><a class="header-anchor" href="#one-byte-rop" aria-hidden="true">#</a> One_byte_ROP</h1><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> __noreturn <span class="token function">sub_11A9</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> v0<span class="token punctuation">;</span> <span class="token comment">// [rsp+Fh] [rbp-11h] BYREF</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h] BYREF</span>
  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>

  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr <span class="token punctuation">)</span>
    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40000uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  buf <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v0<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">+</span> <span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span>ptr<span class="token punctuation">)</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;HELLO WORLD&quot;</span><span class="token punctuation">,</span> <span class="token number">0xCuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">_Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="核心原理" tabindex="-1"><a class="header-anchor" href="#核心原理" aria-hidden="true">#</a> 核心原理</h2><blockquote><p>[Loora1N&#39;s Blog | 鹭雨 |](https://loora1n.github.io/2023/09/07/【trick】house of blindness/)参考文章</p></blockquote><ul><li><p>ld 和libc加载到内存中的相对偏移是固定的</p></li><li><p>malloc一个较大的chunk的时候 不是通过brk申请的而是通过mmap申请的</p><ul><li>所有的mmap地址是相邻近的</li></ul></li><li><p>主要是研究_dl_fini 函数 也就是<code>house of blindness</code></p></li><li><p>exit会调用dl_fini函数，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">__run_exit_handlers</span> <span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span>
				 <span class="token keyword">struct</span> <span class="token class-name">exit_function_list</span> <span class="token operator">*</span><span class="token operator">*</span>listp<span class="token punctuation">,</span>
				 bool run_list_atexit<span class="token punctuation">,</span> bool run_dtors<span class="token punctuation">)</span>
  attribute_hidden <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__noreturn__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="dl-fini函数" tabindex="-1"><a class="header-anchor" href="#dl-fini函数" aria-hidden="true">#</a> _dl_fini函数</h2><ul><li><p>核心利用</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">DL_CALL_DT_FINI</span><span class="token expression"><span class="token punctuation">(</span>map<span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">fini_t</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="token function">DL_CALL_DT_FINI</span>
        <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l<span class="token operator">-&gt;</span>l_addr <span class="token operator">+</span> l<span class="token operator">-&gt;</span>l_info<span class="token punctuation">[</span>DT_FINI<span class="token punctuation">]</span><span class="token operator">-&gt;</span>d_un<span class="token punctuation">.</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>l为在ld中存放的link_map结构</li><li>而<code>l_addr</code>和<code>l_info[DT_FINI]</code>正对应这我们前面谈到的codebase和.dynamic节上的偏移</li></ul></li></ul><h2 id="house-of-blindness" tabindex="-1"><a class="header-anchor" href="#house-of-blindness" aria-hidden="true">#</a> house of blindness</h2>`,9),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","one_byte_rop.html.vue"]]);export{d as default};
