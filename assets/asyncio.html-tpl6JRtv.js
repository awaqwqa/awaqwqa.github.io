import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c as l,a as n,b as s,d as e,e as c}from"./app-lch0_zHc.js";const i={},u=n("h1",{id:"python-asyncio学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-asyncio学习","aria-hidden":"true"},"#"),s(" python asyncio学习")],-1),r={href:"https://zhuanlan.zhihu.com/p/168275509",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/bluehawksky/article/details/106283636",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="基础对象" tabindex="-1"><a class="header-anchor" href="#基础对象" aria-hidden="true">#</a> 基础对象</h2><ul><li>Eventloop</li><li>Future</li><li>Promise</li><li>Generator</li></ul><h3 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop" aria-hidden="true">#</a> eventloop</h3><blockquote><p>注册事件 并对每个事件添加callback回调函数 会去循环以及准备好的堵塞事件 触发其回调函数</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">EventLoop</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>events_to_listen <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>events_to_listen<span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> callback
    <span class="token keyword">def</span> <span class="token function">unregister</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>events_to_listen<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>event<span class="token punctuation">)</span>
        <span class="token keyword">del</span> self<span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>event<span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">_process_events</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>events<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> event <span class="token keyword">in</span> events<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>events<span class="token punctuation">]</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">start_loop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            events_happend <span class="token operator">=</span> poll_events<span class="token punctuation">(</span>self<span class="token punctuation">.</span>events_to_listen<span class="token punctuation">,</span>timeout<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>_process_events<span class="token punctuation">(</span>events_happend<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>就相当于我们向里面注册会堵塞的事件 然后当这个事件完成的时候再自动触发其回调函数 这样就不会堵塞了</li></ul><h3 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h3><blockquote><p>和名字表达的意思一样 也就是当一个函数是异步状态的时候 返回值通常不会马上获取到 为了代码的可读性以及逻辑的连贯性 我们选择返回一个future对象</p><p>相当于为未来可能的值占位的作用 经历了<code>promise</code>过程后future将会塞入返回值 下面是其接口 简单来说就是设置删除检查三步走</p></blockquote><ul><li><p>future值相关</p><ul><li>result()获取future的值</li><li>set_result()设置future的值</li><li>cancel()取消一个future</li><li>cancancel()查看future是否已经被取消了</li><li>add_done_callback(callback,*,context=None)设置一个future完成时候要触发的回调函数</li><li>done()查看future是否有值</li></ul></li><li><p>异常相关</p><ul><li>exception()获取一个异常</li><li>set_exception()设置异常</li></ul></li></ul><h3 id="generator生成器" tabindex="-1"><a class="header-anchor" href="#generator生成器" aria-hidden="true">#</a> Generator生成器</h3><blockquote><p>这种就类似于lua中的协程了 主要通过yield关键字来实现切换控制权</p></blockquote><ul><li><p>当我们在函数使用了yield关键字后 函数调用的时候就变成了生成器 会返回一个生成器对象 此时函数并未真正在执行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> num
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数执行&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num<span class="token operator">+=</span> <span class="token keyword">yield</span> i
g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://awaqwqa.github.io/img/asyncio/image-20240406165914445.png" alt="image-20240406165914445" tabindex="0" loading="lazy"><figcaption>image-20240406165914445</figcaption></figure></li><li><p>生成器对象.send(arg)后args会变成yield的返回值 出现在函数内部 并且当我调用send的时候 函数才会真正执行 send的返回值是yield右侧的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> num
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;函数被调用&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num<span class="token operator">+=</span> <span class="token keyword">yield</span> i
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;num的值为:&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>
g <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://awaqwqa.github.io/img/asyncio/image-20240406170144040.png" alt="image-20240406170144040" tabindex="0" loading="lazy"><figcaption>image-20240406170144040</figcaption></figure></li></ul><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><ul><li><p>asyncio.gather() 并发 启动</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>testa<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>testb<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这里testa和testb就同步运行了 只需要把函数调用(async声明的)作为参数传入asyncio.gather中即可</li></ul></li><li><p>task启动</p></li></ul>`,14);function v(b,m){const a=p("ExternalLinkIcon");return o(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("文章:"),n("a",r,[s("技术揭秘 | 理解 asyncio 来构建高性能 Python 网络程序 - 知乎 (zhihu.com)"),e(a)])]),n("p",null,[n("a",d,[s("python中的asyncio使用详解_python asyncio-CSDN博客"),e(a)])])]),k])}const g=t(i,[["render",v],["__file","asyncio.html.vue"]]);export{g as default};
