import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o,c as h,a as e,b as l,d as t,e as n}from"./app-paC7NT50.js";const c={},p=e("h1",{id:"数据结构学习-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据结构学习-1","aria-hidden":"true"},"#"),l(" 数据结构学习(1)")],-1),s={href:"https://blog.csdn.net/leah126/article/details/131541692",target:"_blank",rel:"noopener noreferrer"},d={href:"https://algo.itcharge.cn/00.Introduction/01.Data-Structures-Algorithms/#_1-2-%E6%95%B0%E6%8D%AE%E7%9A%84%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"},u=n('<h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><ul><li><p>逻辑结构</p><ul><li>集合</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ul></li><li><p>存储结构</p><ul><li><p>顺序存储</p></li><li><p>链式存储</p></li><li><p>索引存储</p></li><li><p>hash存储</p></li></ul></li></ul><h2 id="算法复杂度" tabindex="-1"><a class="header-anchor" href="#算法复杂度" aria-hidden="true">#</a> 算法复杂度</h2>',3),m={href:"https://algo.itcharge.cn/00.Introduction/02.Algorithm-Complexity/#_2-3-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97",target:"_blank",rel:"noopener noreferrer"},_=n('<p>根据从小到大排序，常见的时间复杂度主要有：</p><p>O(1)<em>O</em>(1) &lt; O(log⁡n)<em>O</em>(log<em>n</em>) &lt; O(n)<em>O</em>(<em>n</em>) &lt; O(n×log⁡n)<em>O</em>(<em>n</em>×log<em>n</em>) &lt; O(n2)<em>O</em>(<em>n</em>2) &lt; O(n3)<em>O</em>(<em>n</em>3) &lt; O(2n)<em>O</em>(2<em>n</em>) &lt; O(n!)<em>O</em>(<em>n</em>!) &lt; O(nn)<em>O</em>(<em>n**n</em>)。</p><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2>',3),f={href:"https://blog.csdn.net/qq_41404557/article/details/115447169",target:"_blank",rel:"noopener noreferrer"},E=n('<h3 id="专业名词" tabindex="-1"><a class="header-anchor" href="#专业名词" aria-hidden="true">#</a> 专业名词</h3><ul><li><p>节点的度</p><ul><li>节点拥有的子树的树木</li></ul></li><li><p>叶子</p><ul><li>度为0的节点</li></ul></li><li><p>分支节点</p><ul><li>度不为0的节点</li></ul></li><li><p>树的度</p><ul><li>树中节点的最大度</li></ul></li><li><p>层次</p><ul><li>根节点的层次为1，其余节点的层次等于该节点的双亲节点加1</li></ul></li><li><p>树的高度</p><ul><li>树中节点最大层次</li></ul></li><li><p>无序数</p><ul><li>如果树中节点的各子树之间的次序是不重要的</li></ul></li><li><p>有序树</p><ul><li>如果树中结点的各子树的次序是重要的，不可以交换位置。</li></ul></li></ul><h3 id="二叉树的介绍" tabindex="-1"><a class="header-anchor" href="#二叉树的介绍" aria-hidden="true">#</a> 二叉树的介绍</h3><blockquote><p>二叉树是每个节点最多有两个子树的树结构。它有五种基本形态：二叉树可以是空集；根可以有空的左子树或右子树；活着左、右子树皆为空。</p></blockquote><ul><li><p>满二叉树:高度为h，有2的h次方-1个节点即可</p></li><li><p>完全二叉树:一颗二叉树中，只有最下面两层节点的度可以小于2，并且最下层的叶节点集中在靠左的若干位置上。</p></li><li><p>二叉查找树:</p></li></ul>',5);function g(b,O){const i=r("ExternalLinkIcon");return o(),h("div",null,[p,e("blockquote",null,[e("p",null,[l("参考文章:"),e("a",s,[l("数据结构与算法（非常详细）从零基础入门到精通，看完这一篇就够了-CSDN博客"),t(i)])]),e("p",null,[e("a",d,[l("01. 数据结构与算法 | 算法通关手册（LeetCode） (itcharge.cn)"),t(i)])])]),u,e("blockquote",null,[e("p",null,[l("这里直接看原文"),e("a",m,[l("02. 算法复杂度 | 算法通关手册（LeetCode） (itcharge.cn)"),t(i)]),l(" 解释得很清楚")])]),_,e("blockquote",null,[e("p",null,[e("a",f,[l("二叉树知识点最详细最全讲解-CSDN博客"),t(i)])])]),E])}const A=a(c,[["render",g],["__file","algorithm_1.html.vue"]]);export{A as default};
