import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,e}from"./app-n_BxNovs.js";const t={},i=e(`<h1 id="fsop细读" tabindex="-1"><a class="header-anchor" href="#fsop细读" aria-hidden="true">#</a> FSOP细读</h1><blockquote><p>io_file中经典利用 核心L_IO_flush_all_lockp函数的利用</p></blockquote><h2 id="利用条件" tabindex="-1"><a class="header-anchor" href="#利用条件" aria-hidden="true">#</a> 利用条件</h2><ul><li><p>知道libc基地址</p><blockquote><p>_IO_list_all 是作为全局变量储存在 libc.so 中的</p></blockquote></li></ul><h2 id="io-flush-all-lockp-libc-2-23" tabindex="-1"><a class="header-anchor" href="#io-flush-all-lockp-libc-2-23" aria-hidden="true">#</a> _IO_flush_all_lockp(libc 2.23)</h2><blockquote><p>三种情况下会被自动触发:</p><ol><li><p>当 libc 执行 abort 流程时</p></li><li><p>当执行 exit 函数时</p></li><li><p>当执行流从 main 函数返回时</p></li></ol></blockquote><h3 id="获取fp" tabindex="-1"><a class="header-anchor" href="#获取fp" aria-hidden="true">#</a> 获取fp</h3><figure><img src="https://awaqwqa.github.io/img/io_file_study2/image-20240328105659625.png" alt="image-20240328105659625" tabindex="0" loading="lazy"><figcaption>image-20240328105659625</figcaption></figure><h3 id="所有的文件流" tabindex="-1"><a class="header-anchor" href="#所有的文件流" aria-hidden="true">#</a> 所有的文件流</h3><blockquote><p>我们主要的利用都是这里 所以重点分析这里</p></blockquote><figure><img src="https://awaqwqa.github.io/img/io_file_study2/image-20240328105736546.png" alt="image-20240328105736546" tabindex="0" loading="lazy"><figcaption>image-20240328105736546</figcaption></figure><h4 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h4><blockquote><p>我们可以发现这里的条件主要是两部分</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">(</span>fp<span class="token operator">-&gt;</span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-&gt;</span>_IO_write_ptr <span class="token operator">&gt;</span> fp<span class="token operator">-&gt;</span>_IO_write_base<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token punctuation">(</span><span class="token function">_IO_vtable_offset</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-&gt;</span>_mode <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr <span class="token operator">&gt;</span> fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>第一部分</p><ul><li><p>fp-&gt;_mode &lt;= 0 表示文件不可写</p></li><li><p>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</p></li></ul><blockquote><p>当数据写入缓冲区的时候 <code>IO_write_ptr</code>会逐渐增加 指向下一个可用的位置</p><p><code>IO_write_base </code>是缓冲区起始位置</p></blockquote></li><li><p>第二部分</p><ul><li><p>_IO_vtable_offset(fp) == 0 虚表偏移量为0 也就是标准文件流</p></li><li><p>fp-&gt;_mode &gt; 0 文件可写</p></li><li><p>(fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base) 宽字符数据的写入缓冲区中有待写入的数据</p></li></ul></li></ul><h2 id="libc2-24-防御机制" tabindex="-1"><a class="header-anchor" href="#libc2-24-防御机制" aria-hidden="true">#</a> libc2.24 防御机制</h2><ul><li>2.24之下多了 <code>IO_validate_vtable</code>和<code>_IO_vtable_check</code>两大函数</li></ul><h3 id="io-validate-vtable" tabindex="-1"><a class="header-anchor" href="#io-validate-vtable" aria-hidden="true">#</a> IO_validate_vtable</h3><blockquote><p>这个函数主要是检测了你的vtable是否在合法区域范围之内（__libc_IO_vtables）</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 验证虚表指针 如果验证失败则中止进程</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>
<span class="token function">IO_validate_vtable</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>vtable<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables
     section.  */</span>
   <span class="token comment">// 虚函数表指针在__libc_IO_vtables部分内</span>
  <span class="token class-name">uintptr_t</span> section_length <span class="token operator">=</span> __stop___libc_IO_vtables <span class="token operator">-</span> __start___libc_IO_vtables<span class="token punctuation">;</span>
  <span class="token comment">// 获取vtable</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> vtable<span class="token punctuation">;</span>
  <span class="token comment">// 查看offset是否在这个区间范围之内</span>
  <span class="token class-name">uintptr_t</span> offset <span class="token operator">=</span> ptr <span class="token operator">-</span> __start___libc_IO_vtables<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;=</span> section_length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">/* The vtable pointer is not in the expected section.  Use the
       slow path, which will terminate the process if necessary.  */</span>
    <span class="token function">_IO_vtable_check</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="libc2-24-io-file利用" tabindex="-1"><a class="header-anchor" href="#libc2-24-io-file利用" aria-hidden="true">#</a> libc2.24 IO_file利用</h2><blockquote><p>由于已经对vtable进行了限制 我们可以另外再想办法 比如对scanf等函数进行操作</p></blockquote><h3 id="小知识点" tabindex="-1"><a class="header-anchor" href="#小知识点" aria-hidden="true">#</a> 小知识点</h3><ul><li>_IO_buf_base 表示操作的起始地址</li><li>_IO_buf_end 表示结束地址</li></ul><h3 id="对-io-buf-base进行劫持" tabindex="-1"><a class="header-anchor" href="#对-io-buf-base进行劫持" aria-hidden="true">#</a> 对_IO_buf_base进行劫持</h3><blockquote><p>这里用wiki中提供的代码进行调试理解</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>

<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 <span class="token keyword">char</span> stack_buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>stack_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>stack_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li><p>没调用scanf之前</p><figure><img src="https://awaqwqa.github.io/img/io_file_study2/image-20240421003231028.png" alt="image-20240421003231028" tabindex="0" loading="lazy"><figcaption>image-20240421003231028</figcaption></figure></li><li><p>调用scanf后</p><figure><img src="https://awaqwqa.github.io/img/io_file_study2/image-20240421154819197.png" alt="image-20240421154819197" tabindex="0" loading="lazy"><figcaption>image-20240421154819197</figcaption></figure><ul><li><p>这样可能不方便观察 我们带符号打印一下</p><figure><img src="https://awaqwqa.github.io/img/io_file_study2/image-20240421154901421.png" alt="image-20240421154901421" tabindex="0" loading="lazy"><figcaption>image-20240421154901421</figcaption></figure></li><li><p>可以发现<code>_IO_buf_base</code>和<code> _IO_buf_end</code>被赋值 分别是缓冲区chunk的开头和末尾 那么我们如果可以劫持这两个 修改这两个值就可以实现任意地址的修改</p></li></ul></li></ul>`,27),p=[i];function o(l,c){return n(),s("div",null,p)}const d=a(t,[["render",o],["__file","io_file_study2.html.vue"]]);export{d as default};
