import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as o,a as n,b as a,d as p,e as s}from"./app-AKPdf7O-.js";const c={},u=s(`<h1 id="ezchunk-unlink-offbynull" tabindex="-1"><a class="header-anchor" href="#ezchunk-unlink-offbynull" aria-hidden="true">#</a> ezChunk(unlink+offbynull)</h1><h2 id="分析一下题" tabindex="-1"><a class="header-anchor" href="#分析一下题" aria-hidden="true">#</a> 分析一下题</h2><ul><li><p>进入 addemo函数内部 查找关键结构体</p><ul><li><p>st数据看起来是关键</p></li><li><p><code>(_DWORD *)&amp;st_next12 + 10 * i</code> 这个是存size的</p></li><li><p><code>(_QWORD *)&amp;st + 5 * i</code>这个是emo content的内容</p></li><li><p><code>(char *)&amp;st + 40 * i + 20</code>是存name的</p></li><li><p><code>*((_DWORD *)&amp;st_next8 + 10 * i)</code>存使用情况</p></li></ul></li><li><p>我们这里开始简单运算一下 这个数组到底是怎么存放数据的 指针为char类型</p><ul><li><p>存size: point + 40 *i +12 存 int类型</p></li><li><p>存content :point + 40 *i 存一个结构体指针</p></li><li><p>存name: point + 40*i +20</p></li><li><p>存使用情况:point +40*i +8 存一个int</p></li><li><p>所以每个元素:</p><div class="language-golang line-numbers-mode" data-ext="golang"><pre class="language-golang"><code>type emo struct {
   	Content *string  // 0-8
    IsUsed 	int	// 8-12
    Size    int	// 12-16
    index   int // 16-20
    Name 	string[16] //20-36
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="chunk分析" tabindex="-1"><a class="header-anchor" href="#chunk分析" aria-hidden="true">#</a> chunk分析</h2><ul><li><p>在addemo的时候name malloc(0x10) 马上free了 但是没有清空</p><ul><li>emo content的时候malloc(size)</li></ul></li><li><p>在delemo的时候是根据emo.isused来判断是否存在的</p><ul><li>emo.content被清空 并且被清空</li><li>emo.isused被设置为0</li></ul></li><li><p>editemo的时候是根据判断emo.content是否为空去编辑的</p><ul><li>直接向emo.content中写入内容</li></ul></li><li><p>printemo是根据emo.content是否为空去判断的</p><ul><li>然后直接打印出来</li></ul></li></ul><h2 id="漏洞学习" tabindex="-1"><a class="header-anchor" href="#漏洞学习" aria-hidden="true">#</a> 漏洞学习</h2><blockquote><p>这题存在off_by_null漏洞</p></blockquote><p>构造heap overlap 触发unlink漏洞</p><h3 id="先学习unlink漏洞" tabindex="-1"><a class="header-anchor" href="#先学习unlink漏洞" aria-hidden="true">#</a> 先学习unlink漏洞</h3>`,9),r={href:"https://cloud.tencent.com/developer/article/1557872",target:"_blank",rel:"noopener noreferrer"},d=s(`<ul><li>明确一下对象<code>双向链表</code></li></ul><p><strong>宏定义</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">unlink</span><span class="token expression"><span class="token punctuation">(</span>AV<span class="token punctuation">,</span> P<span class="token punctuation">,</span> BK<span class="token punctuation">,</span> FD<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>P： 待脱链的空闲chunk的指针</li><li>BK：后一个chunk的指针</li><li>FD：前一个chunk的指针</li></ul></blockquote><h4 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h4><ul><li><p><strong>大小检查</strong></p><ul><li><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span><span class="token function">next_chunk</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   
      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted size vs. prev_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>检查下一个chunk的prev_size是否与p的大小相同</p></li></ul></li><li><p><strong>获取fd与bk</strong></p><ul><li>通过p的fd/bk去获取前面一个chunk的<code>fd</code>和后面一个chunk的<code>bk</code><img src="https://awaqwqa.github.io/img/寻找.png" alt="直观图" loading="lazy"></li></ul></li><li><p><strong>检查</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-&gt;</span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            
      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted double-linked list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这里很关键因为会检查前后chunk中 fd或者bk 指向的是否是p chunk</p></li><li><p>这里等效为:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>P<span class="token operator">-&gt;</span>fd<span class="token operator">-&gt;</span>bk <span class="token operator">==</span> P <span class="token operator">&lt;=</span><span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>P<span class="token operator">-&gt;</span>fd <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">==</span> P 
p<span class="token operator">-&gt;</span>bk<span class="token operator">-&gt;</span>fd <span class="token operator">==</span> P <span class="token operator">&lt;=</span><span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>bk <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">==</span> P
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>那么就很明确了</p><ul><li>将<code>p-&gt;fd</code>置为 <strong>(&amp;p-0x18)</strong></li><li>将<code>p-&gt;bk</code>设置为 <strong>(&amp;p-0x10)</strong></li></ul></li></ul></li><li><p>脱链</p><ul><li><p><code>FD-&gt;bk = BK</code> 与<code>BK-&gt;fd = FD</code></p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>FD-&gt;bk = BK &lt;=&gt; P-&gt;fd-&gt;bk = p-&gt;bk &lt;=&gt; *(P-&gt;fd + 0x18) = P-&gt;bk //Ⅰ
BK-&gt;fd = FD &lt;=&gt; P-&gt;bk-&gt;fd = p-&gt;fd &lt;=&gt; *(P-&gt;bk + 0x10) = P-&gt;fd //Ⅱ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>等效为:<code> P-&gt;fd-&gt;bk = p-&gt;bk</code>与<code> P-&gt;bk-&gt;fd = p-&gt;fd</code></li></ul><blockquote><p>这里相当于让前后的chunk连接起来了 把中间的chunk忽略掉<img src="https://awaqwqa.github.io/img/脱链.jpeg" alt="脱链" loading="lazy"></p></blockquote></li></ul></li></ul><h3 id="调试技巧" tabindex="-1"><a class="header-anchor" href="#调试技巧" aria-hidden="true">#</a> 调试技巧</h3><ul><li>heap可以查看当前的chunk</li></ul><h2 id="学习路线" tabindex="-1"><a class="header-anchor" href="#学习路线" aria-hidden="true">#</a> 学习路线:</h2><figure><img src="https://awaqwqa.github.io/img/学习路线图.png" alt="学习路线" tabindex="0" loading="lazy"><figcaption>学习路线</figcaption></figure><p>​</p>`,11);function k(g,h){const e=l("ExternalLinkIcon");return i(),o("div",null,[u,n("blockquote",null,[n("p",null,[a("学习文章:"),n("a",r,[a("一道题彻底理解 Pwn Heap Unlink-腾讯云开发者社区-腾讯云 (tencent.com)"),p(e)])])]),d])}const v=t(c,[["render",k],["__file","ez_chunk.html.vue"]]);export{v as default};
