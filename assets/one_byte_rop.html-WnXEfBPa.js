const n=JSON.parse('{"key":"v-40f93b80","path":"/posts/pwn/stack/one_byte_rop.html","title":"One_byte_ROP","lang":"en-US","frontmatter":{"description":"One_byte_ROP 题目 void __noreturn sub_11A9() { char v0; // [rsp+Fh] [rbp-11h] BYREF void *buf; // [rsp+10h] [rbp-10h] BYREF unsigned __int64 v2; // [rsp+18h] [rbp-8h] v2 = __readfsqword(0x28u); if ( !ptr ) ptr = malloc(0x40000uLL); v0 = 0; buf = 0LL; read(0, &amp;buf, 8uLL); read(0, &amp;v0, 1uLL); *((_BYTE *)buf + (_QWORD)ptr) = v0; write(1, \\"HELLO WORLD\\", 0xCuLL); _Exit(0); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/pwn/stack/one_byte_rop.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"One_byte_ROP"}],["meta",{"property":"og:description","content":"One_byte_ROP 题目 void __noreturn sub_11A9() { char v0; // [rsp+Fh] [rbp-11h] BYREF void *buf; // [rsp+10h] [rbp-10h] BYREF unsigned __int64 v2; // [rsp+18h] [rbp-8h] v2 = __readfsqword(0x28u); if ( !ptr ) ptr = malloc(0x40000uLL); v0 = 0; buf = 0LL; read(0, &amp;buf, 8uLL); read(0, &amp;v0, 1uLL); *((_BYTE *)buf + (_QWORD)ptr) = v0; write(1, \\"HELLO WORLD\\", 0xCuLL); _Exit(0); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-12T12:22:31.000Z"}],["meta",{"property":"article:author","content":"Elegy"}],["meta",{"property":"article:modified_time","content":"2024-10-12T12:22:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"One_byte_ROP\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-12T12:22:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Elegy\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"核心原理","slug":"核心原理","link":"#核心原理","children":[]},{"level":2,"title":"_dl_fini函数","slug":"dl-fini函数","link":"#dl-fini函数","children":[]},{"level":2,"title":"house of blindness","slug":"house-of-blindness","link":"#house-of-blindness","children":[]}],"git":{"createdTime":1728735751000,"updatedTime":1728735751000,"contributors":[{"name":"Elegy","email":"88972629+awaqwqa@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.78,"words":234},"filePathRelative":"posts/pwn/stack/one_byte_rop.md","localizedDate":"October 12, 2024","excerpt":"<h1> One_byte_ROP</h1>\\n<h2> 题目</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">void</span> __noreturn <span class=\\"token function\\">sub_11A9</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">char</span> v0<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// [rsp+Fh] [rbp-11h] BYREF</span>\\n  <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>buf<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// [rsp+10h] [rbp-10h] BYREF</span>\\n  <span class=\\"token keyword\\">unsigned</span> __int64 v2<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// [rsp+18h] [rbp-8h]</span>\\n\\n  v2 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">__readfsqword</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0x28u</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span> <span class=\\"token operator\\">!</span>ptr <span class=\\"token punctuation\\">)</span>\\n    ptr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0x40000uLL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  v0 <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  buf <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0LL</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>buf<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8uLL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>v0<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1uLL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>_BYTE <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>buf <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>_QWORD<span class=\\"token punctuation\\">)</span>ptr<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> v0<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HELLO WORLD\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0xCuLL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">_Exit</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
