const n=JSON.parse('{"key":"v-40b47381","path":"/posts/ez_chunk.html","title":"ezChunk(unlink+offbynull)","lang":"en-US","frontmatter":{"date":"2024-01-01T00:00:00.000Z","tag":["pwn"],"description":"ezChunk(unlink+offbynull) 分析一下题 进入 addemo函数内部 查找关键结构体 st数据看起来是关键 (_DWORD *)&amp;st_next12 + 10 * i 这个是存size的 (_QWORD *)&amp;st + 5 * i这个是emo content的内容 (char *)&amp;st + 40 * i + 20是存name的 *((_DWORD *)&amp;st_next8 + 10 * i)存使用情况 我们这里开始简单运算一下 这个数组到底是怎么存放数据的 指针为char类型 存size:\\t\\tpoint + 40 *i +12 存 int类型 存content :point + 40 *i 存一个结构体指针 存name: point + 40*i +20 存使用情况:point +40*i +8 存一个int 所以每个元素: type emo struct { \\tContent *string // 0-8 IsUsed \\tint\\t// 8-12 Size int\\t// 12-16 index int // 16-20 Name \\tstring[16] //20-36 }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/ez_chunk.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"ezChunk(unlink+offbynull)"}],["meta",{"property":"og:description","content":"ezChunk(unlink+offbynull) 分析一下题 进入 addemo函数内部 查找关键结构体 st数据看起来是关键 (_DWORD *)&amp;st_next12 + 10 * i 这个是存size的 (_QWORD *)&amp;st + 5 * i这个是emo content的内容 (char *)&amp;st + 40 * i + 20是存name的 *((_DWORD *)&amp;st_next8 + 10 * i)存使用情况 我们这里开始简单运算一下 这个数组到底是怎么存放数据的 指针为char类型 存size:\\t\\tpoint + 40 *i +12 存 int类型 存content :point + 40 *i 存一个结构体指针 存name: point + 40*i +20 存使用情况:point +40*i +8 存一个int 所以每个元素: type emo struct { \\tContent *string // 0-8 IsUsed \\tint\\t// 8-12 Size int\\t// 12-16 index int // 16-20 Name \\tstring[16] //20-36 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-01T14:07:35.000Z"}],["meta",{"property":"article:author","content":"Elegy"}],["meta",{"property":"article:tag","content":"pwn"}],["meta",{"property":"article:published_time","content":"2024-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-01T14:07:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ezChunk(unlink+offbynull)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-01T14:07:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Elegy\\"}]}"]]},"headers":[{"level":2,"title":"分析一下题","slug":"分析一下题","link":"#分析一下题","children":[]},{"level":2,"title":"chunk分析","slug":"chunk分析","link":"#chunk分析","children":[]},{"level":2,"title":"漏洞学习","slug":"漏洞学习","link":"#漏洞学习","children":[{"level":3,"title":"先学习unlink漏洞","slug":"先学习unlink漏洞","link":"#先学习unlink漏洞","children":[]},{"level":3,"title":"调试技巧","slug":"调试技巧","link":"#调试技巧","children":[]}]},{"level":2,"title":"学习路线:","slug":"学习路线","link":"#学习路线","children":[]}],"git":{"createdTime":1704117684000,"updatedTime":1704118055000,"contributors":[{"name":"awaqwqa","email":"614286773@qq.com","commits":2}]},"readingTime":{"minutes":2.22,"words":666},"filePathRelative":"posts/ez_chunk.md","localizedDate":"January 1, 2024","excerpt":"<h1> ezChunk(unlink+offbynull)</h1>\\n<h2> 分析一下题</h2>\\n<ul>\\n<li>\\n<p>进入 addemo函数内部 查找关键结构体</p>\\n<ul>\\n<li>\\n<p>st数据看起来是关键</p>\\n</li>\\n<li>\\n<p><code>(_DWORD *)&amp;st_next12 + 10 * i</code> 这个是存size的</p>\\n</li>\\n<li>\\n<p><code>(_QWORD *)&amp;st + 5 * i</code>这个是emo content的内容</p>\\n</li>\\n<li>\\n<p><code>(char *)&amp;st + 40 * i + 20</code>是存name的</p>\\n</li>\\n<li>\\n<p><code>*((_DWORD *)&amp;st_next8 + 10 * i)</code>存使用情况</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>我们这里开始简单运算一下 这个数组到底是怎么存放数据的 指针为char类型</p>\\n<ul>\\n<li>\\n<p>存size:\\t\\tpoint + 40 *i +12 存 int类型</p>\\n</li>\\n<li>\\n<p>存content :point + 40 *i 存一个结构体指针</p>\\n</li>\\n<li>\\n<p>存name:    point + 40*i +20</p>\\n</li>\\n<li>\\n<p>存使用情况:point +40*i +8 存一个int</p>\\n</li>\\n<li>\\n<p>所以每个元素:</p>\\n<div class=\\"language-golang line-numbers-mode\\" data-ext=\\"golang\\"><pre class=\\"language-golang\\"><code>type emo struct {\\n   \\tContent *string  // 0-8\\n    IsUsed \\tint\\t// 8-12\\n    Size    int\\t// 12-16\\n    index   int // 16-20\\n    Name \\tstring[16] //20-36\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
