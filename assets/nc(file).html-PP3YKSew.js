import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-yGaGogkD.js";const i={},l=e(`<h1 id="nc签到题-常用指令绕过" tabindex="-1"><a class="header-anchor" href="#nc签到题-常用指令绕过" aria-hidden="true">#</a> nc签到题(常用指令绕过)</h1><blockquote><p>第一次拿到这个附件 丢进ida里面没用 后缀改为.zip 也没有看见什么东西 一筹莫展 拿这玩意丢进虚拟机里面跑了一下 发现了import无效指令 所以才改后缀为py 才看见代码</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

art <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;

   ((  &quot;####@@!!$$    ))
       \`#####@@!$$\`  ))
    ((  &#39;####@!!$:
   ((  ,####@!!$:   ))
       .###@!!$:
       \`##@@!$:
        \`#@!!$
  !@#    \`#@!$:       @#$
   #$     \`#@!$:       !@!
            &#39;@!$:
        &#39;\`\\   &quot;!$: /\`&#39;
           &#39;\\  &#39;!: /&#39;
             &quot;\\ : /&quot;
  -.&quot;-/\\\\\\-.&quot;//.-&quot;/:\`\\.&quot;-.JrS&quot;.&quot;-=_\\\\
&quot; -.&quot;-.\\\\&quot;-.&quot;//.-&quot;.\`-.&quot;_\\\\-.&quot;.-\\&quot;.-//&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>art<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;My_shell_ProVersion&quot;</span><span class="token punctuation">)</span>

blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cd&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;echo&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;\${IFS}&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    command <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token keyword">in</span> command<span class="token punctuation">:</span>
            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>




</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux中常用的指令" tabindex="-1"><a class="header-anchor" href="#linux中常用的指令" aria-hidden="true">#</a> linux中常用的指令</h2><p>1、cat命令—用于将文件内容输出到终端上，经常使用于查看文本文件的内容。</p><p>2、less命令—用于分页查看文件内容，可以向上翻页、向下翻页、搜索关键字等，合适查看大文件。</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">less</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> file_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>options: <ul><li><strong>-N 或 --LINE-NUMBERS</strong>：显示每行的行号。</li><li><strong>-S 或 --chop-long-lines</strong>：不折行长行。默认情况下，<code>less</code> 会折行显示超出屏幕宽度的长行。使用此选项后，长行将不会被折行，而是横向滚动显示。</li><li><strong>-M 或 --LONG-PROMPT</strong>：显示更详细的提示信息，包括文件的百分比位置等。</li><li><strong>-i 或 --ignore-case</strong>：在搜索时忽略大小写。默认情况下，<code>less</code> 的搜索是区分大小写的。</li><li><strong>-g 或 --hilite-search</strong>：仅高亮显示最后一次搜索匹配的字符串。</li><li><strong>-E 或 --QUIT-AT-EOF</strong>：在到达文件末尾时自动退出。</li><li><strong>-m 或 --LONG-PROMPT</strong>：显示百分比表示的文件位置。</li><li><strong>-R 或 --RAW-CONTROL-CHARS</strong>：显示控制字符（如颜色代码）。</li><li><strong>-X 或 --no-init</strong>：不清空屏幕。在退出 <code>less</code> 时，屏幕上显示的文本不会被清除。</li><li><strong>-F 或 --quit-if-one-screen</strong>：如果文件内容能够在一屏内显示完毕，则自动退出 <code>less</code>。</li><li><strong>-? 或 --help</strong>：显示帮助信息。</li></ul></li></ul></li><li><p>键盘操作:</p><ul><li><code>Space</code> 或 <code>f</code>：向下滚动一页。</li><li><code>b</code>：向上滚动一页。</li><li><code>Arrow keys</code>：逐行滚动。</li><li><code>/</code>：向下搜索字符串。</li><li><code>?</code>：向上搜索字符串。</li><li><code>n</code>：重复上一次搜索（向下）。</li><li><code>N</code>：重复上一次搜索（向上）。</li><li><code>q</code>：退出 <code>less</code>。</li></ul></li></ul><p>3、more命令—与less类似，也是用于分页查看文件内容，但是功能较少，只能向下翻页。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">more</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> file_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、head命令—用于查看文件的前几行内容，默许情况下显示前10行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">head</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>其中，<code>[file...]</code> 是一个或多个文件名。如果没有指定文件，或者文件名为 <code>-</code>，<code>head</code> 会从标准输入读取数据。</p></blockquote><ul><li><strong>-n [数值]</strong> 或 <strong>--lines=[数值]</strong>：显示文件开始的指定行数。例如，<code>head -n 5 file.txt</code> 会显示 <code>file.txt</code> 的前 5 行。</li><li><strong>-c [数值]</strong> 或 <strong>--bytes=[数值]</strong>：显示文件开始的指定字节数。例如，<code>head -c 100 file.txt</code> 会显示 <code>file.txt</code> 的前 100 个字节。</li><li><strong>-q</strong> 或 <strong>--quiet</strong>：在处理多个文件时不打印每个文件的名称作为头部。</li><li><strong>-v</strong> 或 <strong>--verbose</strong>：总是打印每个文件的名称作为头部。</li></ul><p>5、tail命令—用于查看文件的后几行内容，默许情况下显示文件的最后10行。 6、nl命令—用于在文件中加上行号，便于查看和编辑文件。 7、vi/vim命令—是一种文本编辑器，可以用于查看和编辑文件内容，适用于高级用户。</p><h2 id="ifs变量" tabindex="-1"><a class="header-anchor" href="#ifs变量" aria-hidden="true">#</a> IFS变量</h2><blockquote><p>这里提到IFS作为Shell的内置变量，是一个用于分割字段的字符列表</p></blockquote><h3 id="ifs-的工作原理" tabindex="-1"><a class="header-anchor" href="#ifs-的工作原理" aria-hidden="true">#</a> IFS 的工作原理</h3><p><code>IFS</code> 是一个特殊的 shell 变量，用于定义字段边界。它告诉 shell 如何解释序列和字段分隔符。这对于文本解析、命令行参数处理以及读取和解析数据至关重要。</p><ul><li><strong>默认情况下</strong>，<code>IFS</code> 包含空格、制表符和换行符。这意味着 shell 在处理文本时会将这些字符视为字段之间的分隔符。</li><li><strong>更改 <code>IFS</code></strong> 的值可以改变 shell 解释数据的方式。这特别有用于处理非标准格式的数据。</li></ul><h3 id="这里举列子" tabindex="-1"><a class="header-anchor" href="#这里举列子" aria-hidden="true">#</a> 这里举列子:</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">&#39;,&#39;</span>
<span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token string">&quot;apple,banana,cherry&quot;</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">fruit</span> <span class="token keyword">in</span> <span class="token variable">$line</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token variable">$fruit</span>
<span class="token keyword">done</span>
<span class="token comment"># 输出：apple banana cherry</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="payload" tabindex="-1"><a class="header-anchor" href="#payload" aria-hidden="true">#</a> payload</h2><ul><li><code>head$IFS$1flag</code></li></ul>`,23),o=[l];function t(c,d){return s(),a("div",null,o)}const u=n(i,[["render",t],["__file","nc(file).html.vue"]]);export{u as default};
