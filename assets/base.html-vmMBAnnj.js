import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,a as n,b as s,d as t,e as i}from"./app-9FNIhG74.js";const l={},u=n("h1",{id:"frida的基本使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#frida的基本使用","aria-hidden":"true"},"#"),s(" frida的基本使用")],-1),d={href:"https://blog.csdn.net/qq_38474570/article/details/120876120",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),r={href:"https://www.book123.info/",target:"_blank",rel:"noopener noreferrer"},v=i(`<h2 id="映射端口" tabindex="-1"><a class="header-anchor" href="#映射端口" aria-hidden="true">#</a> 映射端口:</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb forward tcp:xxxx tcp:xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="pc查询手机的进程" tabindex="-1"><a class="header-anchor" href="#pc查询手机的进程" aria-hidden="true">#</a> pc查询手机的进程</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>frida-ps <span class="token parameter variable">-U</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="hook相关" tabindex="-1"><a class="header-anchor" href="#hook相关" aria-hidden="true">#</a> hook相关</h2><h3 id="hook-js脚本" tabindex="-1"><a class="header-anchor" href="#hook-js脚本" aria-hidden="true">#</a> hook js脚本</h3><h4 id="附着脚本" tabindex="-1"><a class="header-anchor" href="#附着脚本" aria-hidden="true">#</a> 附着脚本</h4><ul><li>启动并且附带脚本</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>frida <span class="token parameter variable">-U</span> <span class="token parameter variable">-f</span> xxxxxx.apk <span class="token parameter variable">-l</span> xxx.js --no-pause
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这里的--no-pause意思是在程序启动后不要停止程序的进程</p></blockquote><ul><li>这里也可以在启动后再 去hook脚本</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>frida <span class="token parameter variable">-U</span> <span class="token parameter variable">-f</span> xxxxx.apk --no-pause
%load xxxx.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js代码的书写" tabindex="-1"><a class="header-anchor" href="#js代码的书写" aria-hidden="true">#</a> js代码的书写</h3><h4 id="使用java的平台" tabindex="-1"><a class="header-anchor" href="#使用java的平台" aria-hidden="true">#</a> 使用java的平台</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>使用java平台—<span class="token operator">&gt;</span>Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>相当于向java层提供了一个callback函数 以便于交互</p></blockquote><h4 id="获取指定的java类" tabindex="-1"><a class="header-anchor" href="#获取指定的java类" aria-hidden="true">#</a> 获取指定的java类</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>这里引用一下参考文章的列子</p><ul><li><p>当我们获取到Java类之后，我们直接通过 <code>&lt;wrapper&gt;.&lt;method&gt;.implementations =function() {}</code>的方式来hook wrapper类的method方法，不管是实例方法还是静态方法都可以</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     <span class="token comment">//使用java平台</span>
     Java<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取java类</span>
            <span class="token keyword">var</span> student<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//hook Add方法(重写Add方法) </span>
            student<span class="token punctuation">.</span>Add<span class="token punctuation">.</span><span class="token function-variable function">implementation</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//修改参数</span>
                a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>
                b<span class="token operator">=</span><span class="token number">456</span><span class="token punctuation">;</span>
                <span class="token comment">//调用原来的函数</span>
                <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//输出结果</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

     <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setImmediate</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="调用原本的函数" tabindex="-1"><a class="header-anchor" href="#调用原本的函数" aria-hidden="true">#</a> 调用原本的函数</h4><blockquote><p>上面举的列子 中出现了调用原本的函数 所以我们其实可以在callback函数里面用this.FUNCTION_NAME来调用原本的函数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>wrapper<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>method<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function-variable function">implementations</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>method<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hook重载函数" tabindex="-1"><a class="header-anchor" href="#hook重载函数" aria-hidden="true">#</a> hook重载函数</h4><blockquote><p>这里重载函数是java里面的一个特性 就是同一个函数名字 不同的参数列表 可以构造多个同名字的函数 <br>在调用的时候只需要修改参数就可以实现调用不同的实现<br>由于函数名字是一样的所以我猜测frida就难以仅仅靠一个名字来实现hook了 所以我们需要overload标明参数</p></blockquote><ul><li><p>类似文章中举列子的一样</p><ul><li><p>要hook的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 要hook的函数</span>
	<span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;test2--&quot;</span><span class="token operator">+</span>num<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>js代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hook重载方法</span>
<span class="token keyword">function</span> <span class="token function">hookTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取java类</span>
    <span class="token keyword">var</span> student<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//hook test</span>
    student<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">overload</span><span class="token punctuation">(</span><span class="token string">&#39;int&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//修改参数</span>
        a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment">//调用原来的函数 </span>
        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
       
        <span class="token comment">//输出结果</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>获取某个重载函数的全部数量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token keyword">function</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>overloads<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>用提取数组的方式依次hook这些重载函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hook所有重载函数</span>
<span class="token keyword">function</span> <span class="token function">hookTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取java类</span>
    <span class="token keyword">var</span> student<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//重载方法的个数</span>
    <span class="token keyword">var</span> overlength<span class="token operator">=</span>student<span class="token punctuation">.</span>test<span class="token punctuation">.</span>overloads<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">//循环hook所有重载方法</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>overlength<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        student<span class="token punctuation">.</span>test<span class="token punctuation">.</span>overloads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">implementation</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//打印参数个数</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="hook构造方法" tabindex="-1"><a class="header-anchor" href="#hook构造方法" aria-hidden="true">#</a> hook构造方法</h4><blockquote><p>这里先解释一下什么是构造方法<br>java中类在定义的时候 程序员可以选择显性地去书写和类同名地一个public方法 也可以不写 java会自动给你补上(粗鄙理解)<br>这个方法有什么用呢 就是在这个类实列化的时候 触发 完成类似于初始化的操作<br>比如现在我有类<code>Student</code>那么我在Student a = new Student();的时候相当于会自动去调用函数:<code>a.Student();</code><br>由于这个是开发知识就不细讲了()</p></blockquote><ul><li>稍微举列子:</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">dick</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> dick <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Test</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 结果:test</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对应js的写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hook构造函数</span>
<span class="token keyword">function</span> <span class="token function">hookTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取java类</span>
    <span class="token keyword">var</span> student<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01.Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    student<span class="token punctuation">.</span>$init<span class="token punctuation">.</span><span class="token function-variable function">implementation</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>      
        <span class="token comment">//调用原函数</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$init</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//调用构造函数</span>
        <span class="token comment">//student.$new(&quot;guishou&quot;,888);</span>

    <span class="token punctuation">}</span>
      
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="修改类的字段" tabindex="-1"><a class="header-anchor" href="#修改类的字段" aria-hidden="true">#</a> 修改类的字段</h4><blockquote><p>这里的字段指的是类中定义的成员属性<br>然后这里修改非静态的字段用到的是java.choose函数 这个函数第一个<code>参数</code>就是我们要遍历的类<br>随后我们放入一个类似于回调函数的对象进去<br>这个对象包含:</p><ul><li><code>onMatch</code><ul><li>这个key对应的value是一个<code>callback</code>函数 这里会去找到程序中所有实现了指定类的对象 也就是找到所有类型为这个类的对象</li><li>相当于遍历 没找到一个对象就会触发这个callback 所以在callback函数中我们的操作对象是每一个对象</li></ul></li><li><code>onCompete</code><ul><li>这个key对应的value也是一个<code>callback</code>函数 在整个搜索流程完成的时候会调用</li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> nickname <span class="token operator">=</span> <span class="token string">&quot;Flags&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PrintStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&quot;nickName:&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickname<span class="token operator">+</span><span class="token string">&quot;number:&quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们这里选择修改<code>nickname</code>这个属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//修改类字段</span>
<span class="token keyword">function</span> <span class="token function">hookTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取java类</span>
    <span class="token keyword">var</span> student<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//修改静态字段</span>
    student<span class="token punctuation">.</span>nickname<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">&quot;GuiShouFlags&quot;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>nickname<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//修改非静态字段</span>
    Java<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01.Student&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
        <span class="token comment">//每遍历一个对象都会调用onMatch</span>
        <span class="token function-variable function">onMatch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//修改每个对象的字段</span>
            obj<span class="token punctuation">.</span>number<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>number<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">//字段名和函数名相同需要加下划线</span>
            <span class="token comment">//obj._number.value=999;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//遍历完成后调用onComplete</span>
        <span class="token function-variable function">onComplete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="枚举所有的类和方法" tabindex="-1"><a class="header-anchor" href="#枚举所有的类和方法" aria-hidden="true">#</a> 枚举所有的类和方法</h4><blockquote><p>这里很多前提知识</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hookTest6</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//枚举已经加载的类 异步方式</span>
    Java<span class="token punctuation">.</span><span class="token function">enumerateLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">//每枚举一个类调用一次</span>
        <span class="token function-variable function">onMatch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>handler</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//对类名进行过滤 </span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01&quot;</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//输出类名</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//根据类名获取java类</span>
                <span class="token keyword">var</span> clz<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//获取类的所有方法</span>
                <span class="token keyword">var</span> methods<span class="token operator">=</span>clz<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">//循环输出所有方法</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>methods<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//枚举完成以后调用</span>
        <span class="token function-variable function">onComplete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    
    <span class="token comment">//枚举已经加载的类 同步方式</span>
    <span class="token keyword">var</span> classes<span class="token operator">=</span>Java<span class="token punctuation">.</span><span class="token function">enumerateClassLoadersSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>methods<span class="token punctuation">.</span><span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.hookdemo01&quot;</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//枚举方法同上...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

  
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hook-so中的函数" tabindex="-1"><a class="header-anchor" href="#hook-so中的函数" aria-hidden="true">#</a> hook so中的函数</h4><blockquote><p>这里如果这个函数不是<code>导出函数</code>则我们通过偏移来获取这个函数<br>这个步骤 就是算偏移嘛(应该 错了别打我) libcBaseAddr + offset</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//hook无导出函数</span>
<span class="token keyword">function</span> <span class="token function">hookTest9</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//so名称</span>
    <span class="token keyword">var</span> so_name<span class="token operator">=</span><span class="token string">&quot;libnative-lib.so&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//要Hook的函数偏移</span>
    <span class="token keyword">var</span> fun_off<span class="token operator">=</span><span class="token number">0x7078</span><span class="token punctuation">;</span>

   <span class="token comment">//加载到内存后，函数地址=so地址+函数偏移</span>
   <span class="token keyword">var</span> so_base_addr<span class="token operator">=</span>Module<span class="token punctuation">.</span><span class="token function">findBaseAddress</span><span class="token punctuation">(</span>so_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">var</span> add_func<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>so_base_addr<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span>fun_off<span class="token punctuation">;</span>
   <span class="token keyword">var</span> ptr_fun<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NativePointer</span><span class="token punctuation">(</span>add_func<span class="token punctuation">)</span><span class="token punctuation">;</span>

 
    Interceptor<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>ptr_fun<span class="token punctuation">,</span><span class="token punctuation">{</span>
        <span class="token comment">//在hook函数之前执行</span>
        <span class="token function-variable function">onEnter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hook enter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//在hook函数之后执行</span>
        <span class="token function-variable function">onLeave</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">retval</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hook leaver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41);function m(b,h){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("参考文章"),n("a",d,[s("Android之Frida框架完全使用指南_android frida-CSDN博客"),t(a)]),k,s("推荐下载书的网站:"),n("a",r,[s("无名图书 | 一个好看的电子书网站 (book123.info)"),t(a)])])]),v])}const w=e(l,[["render",m],["__file","base.html.vue"]]);export{w as default};
