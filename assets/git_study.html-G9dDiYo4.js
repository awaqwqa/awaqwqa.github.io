import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as l,c as o,a as e,b as i,d as a,e as s}from"./app-AKPdf7O-.js";const c={},m=e("h1",{id:"记一次删除commit操作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#记一次删除commit操作","aria-hidden":"true"},"#"),i(" 记一次删除commit操作")],-1),d=e("h2",{id:"目的",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目的","aria-hidden":"true"},"#"),i(" 目的")],-1),u=e("p",null,"项目上传一个commit 但是这个commit带了bug 为了安全的 优雅的去除这个bug 而且我觉得自己手动查看上次的commit内容并且删除对应文件有点麻烦 不能以后每次都这样操作 于是学习一下如何用git安全地去除(本来不足以写成一篇博文的 但是我感觉以后我可能忘记 于是还是写上)",-1),h={href:"https://zhuanlan.zhihu.com/p/439212074",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/allanGold/article/details/111372750",target:"_blank",rel:"noopener noreferrer"},p=s(`<h2 id="使用git-revert原因" tabindex="-1"><a class="header-anchor" href="#使用git-revert原因" aria-hidden="true">#</a> 使用git revert原因</h2><ul><li><p>因为从git中删除一个commit这通常是一个坏主意(文章说的)</p><p>&quot;从 Git 的历史记录中删除提交通常是一个坏主意。Git 旨在跟踪文件的每个版本&quot;</p></li><li><p>以及git revert和git reset的区别</p><ul><li><p>revert是用一个新的commit（逆向commit）中合要去除的commit</p><blockquote><p>也就是说我们的commit链长这个样子</p></blockquote><p>![img](file:///C:\\Users\\NewOm\\Documents\\Tencent Files\\614286773\\nt_qq\\nt_data\\Pic\\2024-03\\Ori\\403fa820f3bc49c2fdf37a4f0419fac2.png)</p></li><li><p>reset通常是直接删除</p></li></ul></li></ul><h2 id="git-revert的类型" tabindex="-1"><a class="header-anchor" href="#git-revert的类型" aria-hidden="true">#</a> git revert的类型</h2><ul><li><p>一种是直接revert common commit 也就是正常git commit产生的commit 我们直接输入指令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert commit_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>还有一种是revert merge commit 也就是通过merge合并分支产生的commit</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert <span class="token parameter variable">-m</span> num commit_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>这里的num 也就是我们要选择的主线</p></li><li><p>num我们可以通过git show commit_id来查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> show bd86846
commit bd868465569400a6b9408050643e5949e8f2b8f5
Merge: ba25a9d 1c7036f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里num为1就是让ba25a9d 为主线 2则是1c7036f</li></ul></li></ul></li></ul><h3 id="使用git-revert的注意事项" tabindex="-1"><a class="header-anchor" href="#使用git-revert的注意事项" aria-hidden="true">#</a> 使用git revert的注意事项</h3><blockquote><p>这里最好直接去看原文 因为这次我的问题其实不属于这种情况但是还是写下来 方便以后查看</p></blockquote><ul><li>简单总结就是如果我fork了一个分支 然后进行了修改 并且merge进入了master分支</li><li>但是写太多bug了被revert了 我继续基于我的分支进行了fix bug 然后我想重新合并回去</li><li>就不能直接git merge 而是先revert 掉revert我merge commit分支的那个commit（这里称为g commit）（这里很绕建议直接看原文章的图 写得很好）</li><li>而是我们先revert掉g commit然后再merge进入master分支 不然会出问题（仅新的commit会被合并）</li></ul><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><ul><li>由于我们是common commit 也就是正常的commit 所以我们直接进行git revert HEAD即可（因为是最新的commit）</li></ul><figure><img src="https://awaqwqa.github.io/img/git_study/image-20240317160934372.png" alt="image-20240317160934372" tabindex="0" loading="lazy"><figcaption>image-20240317160934372</figcaption></figure>`,10);function v(b,f){const t=n("ExternalLinkIcon");return l(),o("div",null,[m,d,e("blockquote",null,[u,e("p",null,[i("学习文章:"),e("a",h,[i("如何从 Github 中删除提交 - 知乎 (zhihu.com)"),a(t)])]),e("p",null,[e("a",g,[i("【git revert】使用以及理解（详解）_git revert用法-CSDN博客"),a(t)])])]),p])}const k=r(c,[["render",v],["__file","git_study.html.vue"]]);export{k as default};
