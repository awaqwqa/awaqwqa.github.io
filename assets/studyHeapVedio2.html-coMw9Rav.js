import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-AKPdf7O-.js";const t={},p=e(`<h1 id="ntustisc-pwn3阅读笔记-1" tabindex="-1"><a class="header-anchor" href="#ntustisc-pwn3阅读笔记-1" aria-hidden="true">#</a> NTUSTISC-PWN3阅读笔记（1）</h1><blockquote><p>主要是看NTUSTISC</p></blockquote><h2 id="tcache-dup" tabindex="-1"><a class="header-anchor" href="#tcache-dup" aria-hidden="true">#</a> tcache dup</h2><blockquote><p>tcache在libc2.31里面引用了key检查 然后在malloc的时候没有检查<code>size</code> 其次tcache的fd指向的是<code>chunk data</code></p></blockquote><ul><li>会在free进入tcache后在bk位置写入随机数 用于检查</li><li>当检查一样时候 会for循环迭代tcache查看是否有指针和这个即将free的chunk的指针一样</li><li>如果一样提示<code>double free</code></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">size_t</span> tc_idx <span class="token operator">=</span> <span class="token function">csize2tidx</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>tcache <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> tc_idx <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_bins<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Check to see if it&#39;s already in the tcache.  */</span>
    tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* This test succeeds on double free.  However, we don&#39;t 100%
	   trust it (it also matches random payload data at a 1 in
	   2^&lt;size_t&gt; chance), so verify it&#39;s not an unlikely
	   coincidence before aborting.  */</span>
    <span class="token comment">// 这里就是检查bk是否等于tcache</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>key <span class="token operator">==</span> tcache<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tcache_entry <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
        <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>memory_tcache_double_free<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> tcache<span class="token operator">-&gt;</span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
             tmp<span class="token punctuation">;</span>
             tmp <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> e<span class="token punctuation">)</span>
                <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;free(): double free detected in tcache 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* If we get here, it was a coincidence.  We&#39;ve wasted a
	       few cycles, but don&#39;t abort.  */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcache<span class="token operator">-&gt;</span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">tcache_put</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unsortedbin" tabindex="-1"><a class="header-anchor" href="#unsortedbin" aria-hidden="true">#</a> UnsortedBin</h2><ul><li><p>被free的chunk的上一块chunk是<code>free chunk</code>就合并</p></li><li><p>如果下一块chunk是<code>top chunk</code>则合并到<code>top chunk</code>里面</p></li><li><p>首个是main_arena然后双向链表</p></li></ul><h2 id="consolidate" tabindex="-1"><a class="header-anchor" href="#consolidate" aria-hidden="true">#</a> Consolidate</h2><blockquote><p>unsortedBin在合并的时候 会使用<code>unlink_chunk</code>进行一个拖链操作</p></blockquote><ul><li><p>首先获取p的<code>size</code>然后去找到下一个chunk 看下一个chunk的prev_size是否等于这个<code>size</code></p></li><li><p>通过p的fd获取上一个chunk bk获取下一个chunk</p><ul><li>FD = p-&gt;fd</li><li>BK = p-&gt;bk</li></ul></li><li><p>然后<code>FD-&gt;bk</code>和<code>BK-&gt;fd</code>是否等于p</p></li><li><p>然后<code>BK-&gt;bk</code>等于<code>FD</code> and<code>Fd-&gt;fd</code>等于<code>BK</code></p></li><li><p>这样就完成了脱链操作</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">unlink_chunk</span> <span class="token punctuation">(</span>mstate av<span class="token punctuation">,</span> mchunkptr p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span><span class="token function">next_chunk</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted size vs. prev_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  mchunkptr fd <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
  mchunkptr bk <span class="token operator">=</span> p<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>fd<span class="token operator">-&gt;</span>bk <span class="token operator">!=</span> p <span class="token operator">||</span> bk<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted double-linked list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  fd<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bk<span class="token punctuation">;</span>
  bk<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span><span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>fd_nextsize<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">!=</span> p
	  <span class="token operator">||</span> p<span class="token operator">-&gt;</span>bk_nextsize<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">!=</span> p<span class="token punctuation">)</span>
	<span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted double-linked list (not small)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">==</span> p<span class="token punctuation">)</span>
	    fd<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> fd<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> fd<span class="token punctuation">;</span>
	  <span class="token keyword">else</span>
	    <span class="token punctuation">{</span>
	      fd<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fd_nextsize<span class="token punctuation">;</span>
	      fd<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> p<span class="token operator">-&gt;</span>bk_nextsize<span class="token punctuation">;</span>
	      p<span class="token operator">-&gt;</span>fd_nextsize<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> fd<span class="token punctuation">;</span>
	      p<span class="token operator">-&gt;</span>bk_nextsize<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> fd<span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
      <span class="token keyword">else</span>
	<span class="token punctuation">{</span>
	  p<span class="token operator">-&gt;</span>fd_nextsize<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> p<span class="token operator">-&gt;</span>bk_nextsize<span class="token punctuation">;</span>
	  p<span class="token operator">-&gt;</span>bk_nextsize<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fd_nextsize<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unsafeunlink-off-by-one" tabindex="-1"><a class="header-anchor" href="#unsafeunlink-off-by-one" aria-hidden="true">#</a> UnsafeUnlink + off_by_one</h2><blockquote><p>这里主要是绕过unlink 来实现一个fake chunk的利用 主要运用在</p></blockquote><figure><img src="https://awaqwqa.github.io/img/studyHeapVedio/fakeUnlink.png" alt="fakeUnlink" tabindex="0" loading="lazy"><figcaption>fakeUnlink</figcaption></figure><ul><li><p>当我们可以多写一个字节的时候我们可以构造一个<code>fake chunk</code></p><ul><li><p><code>prev_size</code> 0即可</p></li><li><p><code>size</code> payload的长度+1</p></li><li><p><code>fd</code>和<code>bk</code></p><blockquote><p>这两个就比较重要了 因为要绕过<code>unlink</code>的安全检查 也就是检查<code>FD-&gt;bk == p == BK-&gt;fd</code> and <code>p-&gt;size = nextchunk(p)-&gt;prev_size</code></p></blockquote><ul><li>所以我们可以构造fd为<code>ptr-0x18</code> 那么<code>FD-&gt;bk</code>也就是FD+0X18的位置为p 绕过检查</li><li>bk 同理设计为<code>ptr-0x10</code></li></ul></li><li><p><code>next_chunk_prev_size</code> 也就是下一个chunk的prev_size 这个构造等于payload的长度</p></li><li><p>然后多的一个字节为0的话 我们就相当于chunk的p为0也就是我们构造的<code>fake chunk</code>会被当做<code>free chunk</code>而且这个<code>free chunk</code>的起始位置是根据<code>prev_size</code>来定的</p></li></ul></li><li><p>然后那么根据源码最终ptr会指向fd也就是<code>ptr-0x18</code>的位置</p><ul><li>这里的fd-&gt;bk和bk-&gt;fd都是p</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span><span class="token function">next_chunk</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted size vs. prev_size&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  mchunkptr fd <span class="token operator">=</span> p<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
  mchunkptr bk <span class="token operator">=</span> p<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>fd<span class="token operator">-&gt;</span>bk <span class="token operator">!=</span> p <span class="token operator">||</span> bk<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;corrupted double-linked list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  fd<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bk<span class="token punctuation">;</span>
  bk<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,16),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","studyHeapVedio2.html.vue"]]);export{d as default};
