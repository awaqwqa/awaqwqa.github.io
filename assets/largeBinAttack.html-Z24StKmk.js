import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as o,a as n,b as s,d as t,e as i}from"./app-FIjVznMJ.js";const l={},u=n("h1",{id:"large-bin-attack学习-int-malloc源码细读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#large-bin-attack学习-int-malloc源码细读","aria-hidden":"true"},"#"),s(" large Bin Attack学习（_int_malloc源码细读 ）")],-1),r=n("br",null,null,-1),k={href:"https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/large-bin-attack/",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),b={href:"https://blog.csdn.net/astrotycoon/article/details/52662685",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),v={href:"https://www.cnblogs.com/luoleqi/p/15520621.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cnblogs.com/luoleqi/p/12731875.html#_int_malloc",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="源码分析-largebin-malloc" tabindex="-1"><a class="header-anchor" href="#源码分析-largebin-malloc" aria-hidden="true">#</a> 源码分析(largebin malloc)</h2><blockquote><p>每次去看别人文章分析总结的 总感觉比较难记住 每个libc版本的区别 然后也没彻底理解一些操作 所以进行阅读源码<br>然后重点是检查机制部分 如果只想看重点就直接跳转到<a href="#largebin">largebin入链操作</a></p></blockquote><h3 id="unsortedbin的合并-入链-分配操作" tabindex="-1"><a class="header-anchor" href="#unsortedbin的合并-入链-分配操作" aria-hidden="true">#</a> Unsortedbin的合并/入链/分配操作</h3><h4 id="遍历的开始-梦的开始" tabindex="-1"><a class="header-anchor" href="#遍历的开始-梦的开始" aria-hidden="true">#</a> 遍历的开始（梦的开始）</h4><blockquote><p>后面的操作中最重要的就是Victim变量 这个变量是当前循环到的unsortedbin chunk<br>bck变量 也就是bck &lt;-------&gt; victim 这个关系</p></blockquote><ul><li><p>从unsorted_chunk最后一位开始遍历 直到碰到unsorted_bin的头部 我在这里 没很确定是否unsortedbin可不可以指向自己 我们可以调试看看</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-&gt;</span>bk<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    bck <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>
    size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 计算 size */</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>unsortedbin
all: 0x555555559680 —▸ 0x7ffff7fb9be0 <span class="token punctuation">(</span>main_arena+96<span class="token punctuation">)</span> ◂— 0x555555559680
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>然后查看chunk结构</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Free chunk <span class="token punctuation">(</span>unsortedbin<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSE
Addr: 0x555555559680
Size: 0x90 <span class="token punctuation">(</span>with flag bits: 0x91<span class="token punctuation">)</span>
fd: 0x7ffff7fb9be0
bk: 0x7ffff7fb9be0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看unsortedbin的大小</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwndbg<span class="token operator">&gt;</span> tel  0x7ffff7fb9be0
00:0000│ rdx r10 r11 0x7ffff7fb9be0 <span class="token punctuation">(</span>main_arena+96<span class="token punctuation">)</span> —▸ 0x5555555597a0 ◂— 0x0
01:0008│             0x7ffff7fb9be8 <span class="token punctuation">(</span>main_arena+104<span class="token punctuation">)</span> ◂— 0x0
02:0010│             0x7ffff7fb9bf0 <span class="token punctuation">(</span>main_arena+112<span class="token punctuation">)</span> —▸ 0x555555559680 ◂— 0x0
03:0018│             0x7ffff7fb9bf8 <span class="token punctuation">(</span>main_arena+120<span class="token punctuation">)</span> —▸ 0x555555559680 ◂— 0x0
04:0020│             0x7ffff7fb9c00 <span class="token punctuation">(</span>main_arena+128<span class="token punctuation">)</span> —▸ 0x7ffff7fb9bf0 <span class="token punctuation">(</span>main_arena+112<span class="token punctuation">)</span> —▸ 0x555555559680 ◂— 0x0
05:0028│             0x7ffff7fb9c08 <span class="token punctuation">(</span>main_arena+136<span class="token punctuation">)</span> —▸ 0x7ffff7fb9bf0 <span class="token punctuation">(</span>main_arena+112<span class="token punctuation">)</span> —▸ 0x555555559680 ◂— 0x0
06:0030│             0x7ffff7fb9c10 <span class="token punctuation">(</span>main_arena+144<span class="token punctuation">)</span> —▸ 0x7ffff7fb9c00 <span class="token punctuation">(</span>main_arena+128<span class="token punctuation">)</span> —▸ 0x7ffff7fb9bf0 <span class="token punctuation">(</span>main_arena+112<span class="token punctuation">)</span> —▸ 0x555555559680 ◂— 0x0
07:0038│             0x7ffff7fb9c18 <span class="token punctuation">(</span>main_arena+152<span class="token punctuation">)</span> —▸ 0x7ffff7fb9c00 <span class="token punctuation">(</span>main_arena+128<span class="token punctuation">)</span> —▸ 0x7ffff7fb9bf0 <span class="token punctuation">(</span>main_arena+112<span class="token punctuation">)</span> —▸ 0x555555559680 ◂— 0x0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以发现fd bk都是指向的unsortedbin中第一个chunk 我们清空unsortedbin看看</p><div class="language-shelll line-numbers-mode" data-ext="shelll"><pre class="language-shelll"><code>pwndbg&gt; tel 0x7ffff7fb9be0
00:0000│ rsi r11 0x7ffff7fb9be0 (main_arena+96) —▸ 0x555555559830 ◂— 0x0
01:0008│         0x7ffff7fb9be8 (main_arena+104) —▸ 0x555555559710 ◂— 0x90
02:0010│         0x7ffff7fb9bf0 (main_arena+112) —▸ 0x7ffff7fb9be0 (main_arena+96) —▸ 0x555555559830 ◂— 0x0
03:0018│         0x7ffff7fb9bf8 (main_arena+120) —▸ 0x7ffff7fb9be0 (main_arena+96) —▸ 0x555555559830 ◂— 0x0
04:0020│         0x7ffff7fb9c00 (main_arena+128) —▸ 0x7ffff7fb9bf0 (main_arena+112) —▸ 0x7ffff7fb9be0 (main_arena+96) —▸ 0x555555559830 ◂— 0x0
05:0028│         0x7ffff7fb9c08 (main_arena+136) —▸ 0x7ffff7fb9bf0 (main_arena+112) —▸ 0x7ffff7fb9be0 (main_arena+96) —▸ 0x555555559830 ◂— 0x0
06:0030│         0x7ffff7fb9c10 (main_arena+144) —▸ 0x7ffff7fb9c00 (main_arena+128) —▸ 0x7ffff7fb9bf0 (main_arena+112) —▸ 0x7ffff7fb9be0 (main_arena+96) —▸ 0x555555559830 ◂— ...
07:0038│         0x7ffff7fb9c18 (main_arena+152) —▸ 0x7ffff7fb9c00 (main_arena+128) —▸ 0x7ffff7fb9bf0 (main_arena+112) —▸ 0x7ffff7fb9be0 (main_arena+96) —▸ 0x55555555983
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们会发现fd和bk都是指向了自己本身也就是main_arena+96这个位置</li></ul></li></ul><h4 id="安全检查机制" tabindex="-1"><a class="header-anchor" href="#安全检查机制" aria-hidden="true">#</a> 安全检查机制</h4><blockquote><p>这里的安全机制全是对unsortedbin中的chunk进行的检查</p></blockquote><ul><li><p>不能小于2*SIZE_SZ不能大于av-&gt;system_men也就是该分配去的内存分配总量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">)</span>
              <span class="token operator">||</span> <span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> av<span class="token operator">-&gt;</span>system_mem<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): invalid size (unsorted)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对next chunk(物理意义上的紧挨着)也进行一样的操作</p><blockquote><p>mchunkptr next = chunk_at_offset (victim, size); /* 获得指向内存空间中当前 chunk 的下一个chunk 的指针 */</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ<span class="token punctuation">)</span><span class="token operator">||</span> <span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">&gt;</span> av<span class="token operator">-&gt;</span>system_mem<span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): invalid next size (unsorted)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>检查next chunk的prev_size 是否等于当前的chunk size</p><blockquote><p>size = chunksize (victim); /* 计算 size */</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 如果 next chunk 中记录前一个 chunk 大小的 prev_size 与 size 不符，则报错 */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">prev_size</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>SIZE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>检查bck的fd是否为当前chunk 或者当前chunk的fd是否是bin的头结点</p><blockquote><p>bck = victim-&gt;bk;<br>victim = unsorted_chunks (av)-&gt;bk)<br>应该就是检查下一个chunk是否是合法的</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span>
              <span class="token operator">||</span> <span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): unsorted double linked list corrupted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>检查当前chunk是否是free的 通过next chunk的p值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token comment">/* 如果 next chunk 中的显示前一个 chunk 是否正在使用的标志位为1，*/</span>
 <span class="token comment">/* 即前一个 chunk 正在使用，则报错 */</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">prev_inuse</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 	<span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="直接返回smallbin-chunk情况" tabindex="-1"><a class="header-anchor" href="#直接返回smallbin-chunk情况" aria-hidden="true">#</a> 直接返回smallbin_chunk情况</h4><blockquote><p>然后就是从unsortedbin割small chunk 如果符合条件</p><ul><li><p>所需chunk大小在smallbin的范围之内</p></li><li><p>bck为unsortedbin的头 也就是unsortedbin中仅有一个chunk</p></li><li><p>victim为last remainder chunk 也就是分割过一次</p></li><li><p>大小刚好大于所需nb大小+Minsize(这里猜测就是一个最小chunk 这样才能切割)</p></li></ul><p>满足以上条件 就直接分割 然后将victim返回给用户</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    bck <span class="token operator">==</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    victim <span class="token operator">==</span> av<span class="token operator">-&gt;</span>last_remainder <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb <span class="token operator">+</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>
    remainder <span class="token operator">=</span> <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-&gt;</span>bk <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-&gt;</span>fd <span class="token operator">=</span> remainder<span class="token punctuation">;</span>
    av<span class="token operator">-&gt;</span>last_remainder <span class="token operator">=</span> remainder<span class="token punctuation">;</span>
    remainder<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> remainder<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>remainder_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        remainder<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        remainder<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">set_head</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_head</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_foot</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从unsortedbin中移除" tabindex="-1"><a class="header-anchor" href="#从unsortedbin中移除" aria-hidden="true">#</a> 从unsortedbin中移除</h4><blockquote><p>在这里已经将chunk从unsortdbin中移除</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
 bck<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="大小刚好相等情况" tabindex="-1"><a class="header-anchor" href="#大小刚好相等情况" aria-hidden="true">#</a> 大小刚好相等情况</h4><ul><li><p>如果chunk和当前需要的chunk大小一致 则直接返回chunk 并且设置物理意义上紧挨着的下一个chunk的size中p为0也就是free状态</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果开启了tcache机制 且tcache未满则将chunk放入tcache中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>tcache_nb <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-&gt;</span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">tcache_put</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    return_cached <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后直接返回</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token comment">/* 返回内存指针 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="归类入链操作" tabindex="-1"><a class="header-anchor" href="#归类入链操作" aria-hidden="true">#</a> 归类入链操作<span id="largebin"></span></h4><blockquote><p>这里主要是将unsortedbin合并后的 入small链表或者large链表的操作<br>这里的fwd和bck记好了 我们从unsortedbin抠出来的chunk就要合并进入fwd和bck的中间<br>这后面的操作往往是先让fwd到指定的位置 然后bck通过fwd-&gt;bk来进行的定位</p></blockquote><h5 id="small-和-large最终入bin操作" tabindex="-1"><a class="header-anchor" href="#small-和-large最终入bin操作" aria-hidden="true">#</a> small 和 large最终入bin操作</h5><blockquote><p>这里把最后的部分 直接提前 拿出来 因为smallbin和largebin的入链操作都含这个代码<br>largebin还有chunk size的入链操作 以及其他的复杂检查</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">mark_bin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
victim<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
victim<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>
fwd<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> victim<span class="token punctuation">;</span>
bck<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> victim<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="smallbin的fwd-bck赋值" tabindex="-1"><a class="header-anchor" href="#smallbin的fwd-bck赋值" aria-hidden="true">#</a> smallbin的fwd bck赋值</h5><ul><li><p>如果属于small bin则进行fwd和bck的赋值</p><blockquote><p>small bin 的链表表头赋值给 bck:bck = bin_at (av, victim_index);<br>首个chunk赋值给fwd :fwd = bck-&gt;fd;</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    victim_index <span class="token operator">=</span> <span class="token function">smallbin_index</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bck <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fwd <span class="token operator">=</span> bck<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="largebin-入bin链和chunk-size链" tabindex="-1"><a class="header-anchor" href="#largebin-入bin链和chunk-size链" aria-hidden="true">#</a> largebin 入bin链和chunk size链</h5><ul><li><p>如果属于large_bins同理进行赋值 然后判断该插入什么合适的位置</p><blockquote><p>因为largebin是按照大小进行的排序 由大到小 所以最小的在链表最后</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>victim_index <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
bck <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
fwd <span class="token operator">=</span> bck<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>判断large是否有空闲chunk:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fwd <span class="token operator">!=</span> bck<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>如果当前chunk比最后一位chunk还小则直接加入链表末尾</strong></p><blockquote><p>bck是头 bck-&gt;bk应该就是最后一位<br>然后要加入fwd和bck之间 我们应该先调整fwd和bck 所以bck改为链表最后一位 fwd改为链表头<br>bck&lt;-----&gt;chunk&lt;-----&gt;fwd</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>bck<span class="token operator">-&gt;</span>bk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fwd <span class="token operator">=</span> bck<span class="token punctuation">;</span>
    bck <span class="token operator">=</span> bck<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>
    victim<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> fwd<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
    victim<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-&gt;</span>fd<span class="token operator">-&gt;</span>bk_nextsize<span class="token punctuation">;</span>
    fwd<span class="token operator">-&gt;</span>fd<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>bk_nextsize<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>否则进行遍历判断 匹配第一个小于等于 当前chunk的</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size <span class="token operator">&lt;</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fwd <span class="token operator">=</span> fwd<span class="token operator">-&gt;</span>fd_nextsize<span class="token punctuation">;</span>
    <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果该chunk与当前chunk相同则让chunk插入fwd之后 所以</p><blockquote><p>因为large bin是按照大小进行的排序 所以我们为了不额外修改chunk size链表 直接将chunk链接到fwd后面</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size<span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fwd <span class="token operator">=</span> fwd<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>否则就执行largebin的入chunk_size链操作:</p><blockquote><p>这里我理解的是largebin存在两条链 也就是chunk size的链 和fd bk构成的bins链 这里先是入的chunk size的链</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>victim<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> fwd<span class="token punctuation">;</span>
victim<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-&gt;</span>bk_nextsize<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-&gt;</span>bk_nextsize<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">!=</span> fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fwd<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>
victim<span class="token operator">-&gt;</span>bk_nextsize<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>这里就是重点了 也就是large bin的入链操作</p></li><li><p>首先这是初始状态</p></li></ul></li></ul><p><img src="https://awaqwqa.github.io/img/large_bin_attack/start.png" alt="status01" loading="lazy"> <img src="https://awaqwqa.github.io/img/large_bin_attack/status02.png" alt="status1" loading="lazy"><img src="https://awaqwqa.github.io/img/large_bin_attack/status03.png" alt="status1" loading="lazy"><img src="https://awaqwqa.github.io/img/large_bin_attack/status04.png" alt="status1" loading="lazy"></p><ul><li><p>让bck等于fwd-&gt;bk 也就是把bck提到fwd前方 并且进行安全检查</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bck <span class="token operator">=</span> fwd<span class="token operator">-&gt;</span>bk<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bck<span class="token operator">-&gt;</span>fd <span class="token operator">!=</span> fwd<span class="token punctuation">)</span>
    <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后就是执行入链操作了</p><blockquote><p>在一开始的时候提过</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">mark_bin</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
victim<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
victim<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>
fwd<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> victim<span class="token punctuation">;</span>
bck<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> victim<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="从largebin中获取chunk" tabindex="-1"><a class="header-anchor" href="#从largebin中获取chunk" aria-hidden="true">#</a> 从largebin中获取chunk</h4><ul><li><p>largebin情况</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h5 id="chunk脱链-remainder-chunk入链" tabindex="-1"><a class="header-anchor" href="#chunk脱链-remainder-chunk入链" aria-hidden="true">#</a> chunk脱链 remainder chunk入链</h5><blockquote><p>首先是判断情况 我们只处理这一种情况:largebin中有chunk 然后largebin中最大的chunk大于我们的需求<br>接下来的代码都是从largebin中获取chunk</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>victim <span class="token operator">=</span> <span class="token function">first</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bin <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>取最小的chunk 反方向循环 找到刚好大于等于我们所需chunk size的 chunk</p><blockquote><p>如果一个大小的chunk链表中有多个chunk 优先取第二个 不轻易改变chunk size链表的值</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 取largebin的最后一个chunk 也就是最小的那个chunk </span>
victim <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>bk_nextsize<span class="token punctuation">;</span>
<span class="token comment">// 取首个大于所需的chunk size的large chunk</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    victim <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>bk_nextsize<span class="token punctuation">;</span>

<span class="token comment">/* Avoid removing the first entry for a size so that the skip
                 list does not have to be rerouted.  */</span>
<span class="token comment">//  这里避免删除chunk size链中的首个chunk 避免我们修改chunk size链表 所以我们取第二个</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>victim <span class="token operator">!=</span> <span class="token function">last</span> <span class="token punctuation">(</span>bin<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>victim<span class="token operator">-&gt;</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span>
    victim <span class="token operator">=</span> victim<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>chunk 通过unlink脱链 remainder chunk入unsortedbin链</p><blockquote><p>安全检查 是否切割后的chunk大于minsize 与安全检查 largebin第一个chunk和头的互锁状态</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token comment">// 算剩余的remainder_size</span>
 remainder_size <span class="token operator">=</span> size <span class="token operator">-</span> nb<span class="token punctuation">;</span>
 <span class="token comment">// 对 我们large bin中的chunk 进行unlink操作</span>
 <span class="token function">unlink_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Exhaust */</span>
<span class="token comment">// 安全检查 如果切割的chunk 小于Minsize 则 设置下一个chunk p为0</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>remainder_size <span class="token operator">&lt;</span> MINSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">set_inuse_bit_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span>
		<span class="token function">set_non_main_arena</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
     remainder <span class="token operator">=</span> <span class="token function">chunk_at_offset</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* We cannot assume the unsorted list is empty and therefore
                     have to perform a complete insert here.  */</span>
    <span class="token comment">// 根据注释大概知道是进行完整的插入操作</span>
    <span class="token comment">// 取得unsorted_chunk bin链表的的头</span>
    bck <span class="token operator">=</span> <span class="token function">unsorted_chunks</span><span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 取 第一个chunk</span>
    fwd <span class="token operator">=</span> bck<span class="token operator">-&gt;</span>fd<span class="token punctuation">;</span>
    <span class="token comment">// 安全检查:检查第一个chunk的bk是否为unsorted bin的头</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-&gt;</span>bk <span class="token operator">!=</span> bck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">&quot;malloc(): corrupted unsorted chunks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// remainder 入unsortedbin</span>
    remainder<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
    remainder<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>
    bck<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> remainder<span class="token punctuation">;</span>
    fwd<span class="token operator">-&gt;</span>bk <span class="token operator">=</span> remainder<span class="token punctuation">;</span>
    <span class="token comment">// 如果是remiander 则将fd_nextsize bk_nextsize 设置为null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>remainder_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        remainder<span class="token operator">-&gt;</span>fd_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        remainder<span class="token operator">-&gt;</span>bk_nextsize <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 这里应该是设置head的一系列操作</span>
    <span class="token function">set_head</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> nb <span class="token operator">|</span> PREV_INUSE <span class="token operator">|</span>
              <span class="token punctuation">(</span>av <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena <span class="token operator">?</span> NON_MAIN_ARENA <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_head</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size <span class="token operator">|</span> PREV_INUSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// foot就是下一个chunk的prev_size部分 </span>
    <span class="token function">set_foot</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">,</span> remainder_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h5 id="返回被切割后的chunk" tabindex="-1"><a class="header-anchor" href="#返回被切割后的chunk" aria-hidden="true">#</a> 返回被切割后的chunk</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从topchunk中获取chunk" tabindex="-1"><a class="header-anchor" href="#从topchunk中获取chunk" aria-hidden="true">#</a> 从topchunk中获取chunk</h4><blockquote><p>我是大概浏览的 大概意思是去剩下的chunk中寻找 如果没找到就去topchunk分配 如果topchunk不够就去系统申请</p></blockquote><h2 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用" aria-hidden="true">#</a> 漏洞利用</h2>`,40);function g(_,x){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("blockquote",null,[n("p",null,[s("参考文章:"),r,s("wiki:"),n("a",k,[s("Large Bin Attack - CTF Wiki (ctf-wiki.org)"),t(a)]),d,s("源码级调试glibc:"),n("a",b,[s("源码级调试glibc_glibc cannot be compiled without optimization-CSDN博客"),t(a)]),m,s("源码分析:"),n("a",v,[s("glibc 2.31 malloc与free 源码分析（持续更新） - PwnKi - 博客园 (cnblogs.com)"),t(a)]),s("+"),n("a",f,[s("glibc malloc源码分析 - PwnKi - 博客园 (cnblogs.com)"),t(a)])])]),h])}const y=e(l,[["render",g],["__file","largeBinAttack.html.vue"]]);export{y as default};
