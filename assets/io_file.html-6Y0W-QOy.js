import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c,a as n,b as s,d as e,e as i}from"./app-9CYERY7T.js";const l={},u=n("h1",{id:"浅学习io-file",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#浅学习io-file","aria-hidden":"true"},"#"),s(" 浅学习Io_file")],-1),r=n("p",null,"io_file相关学习有点蛋疼 感觉较为复杂 找到了大佬的blog感觉摸到了皮毛 为了深入",-1),d={href:"https://la13x.github.io/2021/07/27/IO-FILE/#IO-FILE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86",target:"_blank",rel:"noopener noreferrer"},k={href:"https://bambooiii.github.io/2024/03/03/IO%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/",target:"_blank",rel:"noopener noreferrer"},_=i(`<h2 id="核心结构体" tabindex="-1"><a class="header-anchor" href="#核心结构体" aria-hidden="true">#</a> 核心结构体</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span>
<span class="token punctuation">{</span>
  FILE file<span class="token punctuation">;</span>
  <span class="token comment">// 这里是常量指针 请记住和指针常量的区别</span>
  <span class="token comment">// 指针常量本质是常量 存储的是指针 也就是说其记录的指针不能被修改 但是指针指向的内容是可以修改的</span>
  <span class="token comment">// 常量指针是指针 只不过指针所指向的地址得是个常量 所以指针本身值可以被修改 但是其内容不可被修改</span>
  <span class="token comment">// 所以在开发者最初设想中 这里的vtable的值可以改变 但是它指向的内容是不可变的</span>
  <span class="token comment">// vtable指向的是类型为_IO_jump_t的常量数据</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> file</h3><ul><li><p>一般开发的时候 我们喜欢把write 和open等函数操作的文件 叫做文件流 (file) 在以前我的理解就是这是存储的文件数据的一个结构</p></li><li><p>fread 和fwrite函数需要文件流指针调用虚表函数</p></li><li><p>fopen函数会自动通过malloc 创建 file(文件流) 所以这里<code>_IO_FILE_plus</code>结构体的第一个属性<code>file</code>就是存储这个文件流的（倒不如说它就是文件流）</p></li><li><p>代码过于复杂 暂时不搬出来了 这里我们理解即可(大概)</p></li></ul><h3 id="vtable" tabindex="-1"><a class="header-anchor" href="#vtable" aria-hidden="true">#</a> vtable</h3><blockquote><p>这里我是这样理解的当我们自己设计一个文件读取管理器 我们如何设计一个结构体？方便我们进行处理</p><p>我可能会选择这样 先创建一个FILE结构体 然后一个属性为data也就是数据本身 然后各种回调函数属性</p><p>这样我们只需要调用FILE.xxxxxx()函数就可以轻易完成对文件地操作 所以这里的设计了一个vtable 指针</p><p>用于指向各种处理函数 方便我们进行调用</p></blockquote><ul><li>指向的是一个类型为<code>_IO_jump_t</code>的常量数据 这个数据主要存着各种函数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span>
<span class="token punctuation">{</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> __dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> __dummy2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_finish_t<span class="token punctuation">,</span> __finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_overflow_t<span class="token punctuation">,</span> __overflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __underflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_underflow_t<span class="token punctuation">,</span> __uflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_pbackfail_t<span class="token punctuation">,</span> __pbackfail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* showmany */</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsputn_t<span class="token punctuation">,</span> __xsputn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_xsgetn_t<span class="token punctuation">,</span> __xsgetn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekoff_t<span class="token punctuation">,</span> __seekoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seekpos_t<span class="token punctuation">,</span> __seekpos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_setbuf_t<span class="token punctuation">,</span> __setbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_sync_t<span class="token punctuation">,</span> __sync<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_doallocate_t<span class="token punctuation">,</span> __doallocate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_read_t<span class="token punctuation">,</span> __read<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_write_t<span class="token punctuation">,</span> __write<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_seek_t<span class="token punctuation">,</span> __seek<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_close_t<span class="token punctuation">,</span> __close<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_stat_t<span class="token punctuation">,</span> __stat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_showmanyc_t<span class="token punctuation">,</span> __showmanyc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JUMP_FIELD</span><span class="token punctuation">(</span>_IO_imbue_t<span class="token punctuation">,</span> __imbue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io函数函数的原理" tabindex="-1"><a class="header-anchor" href="#io函数函数的原理" aria-hidden="true">#</a> IO函数函数的原理</h2><blockquote><p>这里阅读一下IO函数的源码 方便我们直观看见 <code>_IO_FILE_plus</code>结构体与这些相关函数的联系 如果只是想要懂个流程就是浏览一下这部分就行 如果要详细了解一下就看文章后面调试深入理解部分的内容 这里推荐自己用有符号的libc自己调试几下 一会儿思维就通了</p></blockquote><h3 id="fopen函数" tabindex="-1"><a class="header-anchor" href="#fopen函数" aria-hidden="true">#</a> fopen函数</h3><ul><li><p>分配对应大小的空间</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span> fp<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_IO_MTSAFE_IO   </span><span class="token comment">//没执行</span></span>
    _IO_lock_t lock<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> wd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">*</span>new_f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//first:分配空间</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>初始化<code>_IO_FILE_plus</code>结构体数据 by <code>_IO_no_init</code></p><blockquote><p>这里的初始值几乎全部都是赋值的null</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>new_f <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_IO_MTSAFE_IO   </span><span class="token comment">//没执行</span></span>
  new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">.</span>file<span class="token punctuation">.</span>_lock <span class="token operator">=</span> <span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>lock<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token function">_IO_no_init</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>wd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_IO_wfile_jumps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second：初始化</span>
  <span class="token function">_IO_JUMPS</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>_IO_file_jumps<span class="token punctuation">;</span>                    <span class="token comment">//说明所有的_io_file_jump都是同一个vtable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将<code>_IO_FILE_plus</code>结构体链接到<code>_IO_list_all</code> by <code>_io_file_init_internal</code></p><blockquote><p>相当于让<code>_io_file_plus</code>入链 假如之前<code>_IO_list_all</code>指向的<code>stderr</code>则链接后</p><p>_io_list_all -&gt;fp-&gt;stderr (fp._chain-&gt;stderr) 这里上大佬的图</p></blockquote><figure><img src="https://awaqwqa.github.io/img/io_file/fpmKdFRYo6VeTh5.png" alt="fpmKdFRYo6VeTh5" tabindex="0" loading="lazy"><figcaption>fpmKdFRYo6VeTh5</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token function">_IO_new_file_init_internal</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//third：将file链接到_IO_list_all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>打开文件 by <code>_IO_file_fopen</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_file_fopen</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span> new_f<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> is32<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token comment">//forth：打开文件</span>
    <span class="token keyword">return</span> <span class="token function">__fopen_maybe_mmap</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数尾部</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">_IO_un_link</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span> <span class="token punctuation">(</span>new_f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="调试源码-深入理解" tabindex="-1"><a class="header-anchor" href="#调试源码-深入理解" aria-hidden="true">#</a> 调试源码 深入理解</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">system_ptr</span> <span class="token expression"><span class="token number">0x7ffff7a52390</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>vtable_ptr<span class="token punctuation">;</span>
    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;flag.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vtable_ptr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>fp<span class="token operator">+</span><span class="token number">0xd8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//get vtable</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">&quot;sh&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    vtable_ptr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>system_ptr <span class="token comment">//xsputn</span>


    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进入open64" tabindex="-1"><a class="header-anchor" href="#进入open64" aria-hidden="true">#</a> 进入open64</h3><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327010609541.png" alt="image-20240327010609541" tabindex="0" loading="lazy"><figcaption>image-20240327010609541</figcaption></figure><h3 id="malloc-部分" tabindex="-1"><a class="header-anchor" href="#malloc-部分" aria-hidden="true">#</a> malloc 部分</h3><h4 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span> fp<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_IO_MTSAFE_IO   </span><span class="token comment">//没执行</span></span>
    _IO_lock_t lock<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> wd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">*</span>new_f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">locked_FILE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h4><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327011453742.png" alt="image-20240327011453742" tabindex="0" loading="lazy"><figcaption>image-20240327011453742</figcaption></figure><ul><li><p>malloc 后new_f的值</p><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327011540293.png" alt="image-20240327011540293" tabindex="0" loading="lazy"><figcaption>image-20240327011540293</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>$<span class="token number">2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  fp <span class="token operator">=</span> <span class="token punctuation">{</span>
    file <span class="token operator">=</span> <span class="token punctuation">{</span>
      _flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _IO_read_ptr <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_read_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_read_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_write_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_write_ptr <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_write_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_buf_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_buf_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_save_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_backup_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _IO_save_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _markers <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _chain <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _fileno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _flags2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _old_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _cur_column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _vtable_offset <span class="token operator">=</span> <span class="token number">0</span> <span class="token char">&#39;\\000&#39;</span><span class="token punctuation">,</span>
      _shortbuf <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      _lock <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _codecvt <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _wide_data <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _freeres_list <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      _freeres_buf <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
      __pad5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      _unused2 <span class="token operator">=</span> <span class="token char">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">19</span> times<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    vtable <span class="token operator">=</span> <span class="token number">0x0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  lock <span class="token operator">=</span> <span class="token punctuation">{</span>
    lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    owner <span class="token operator">=</span> <span class="token number">0x0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  wd <span class="token operator">=</span> <span class="token punctuation">{</span>
    _IO_read_ptr <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_read_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_read_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_write_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_write_ptr <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_write_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_buf_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_buf_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_save_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_backup_base <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_save_end <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    _IO_state <span class="token operator">=</span> <span class="token punctuation">{</span>
      __count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      __value <span class="token operator">=</span> <span class="token punctuation">{</span>
        __wch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        __wchb <span class="token operator">=</span> <span class="token string">&quot;\\000\\000\\000&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    _IO_last_state <span class="token operator">=</span> <span class="token punctuation">{</span>
      __count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
      __value <span class="token operator">=</span> <span class="token punctuation">{</span>
        __wch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        __wchb <span class="token operator">=</span> <span class="token string">&quot;\\000\\000\\000&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    _codecvt <span class="token operator">=</span> <span class="token punctuation">{</span>
      __cd_in <span class="token operator">=</span> <span class="token punctuation">{</span>
        step <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
        step_data <span class="token operator">=</span> <span class="token punctuation">{</span>
          __outbuf <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
          __outbufend <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
          __flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          __invocation_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          __internal_use <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          __statep <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
          __state <span class="token operator">=</span> <span class="token punctuation">{</span>
            __count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
            __value <span class="token operator">=</span> <span class="token punctuation">{</span>
              __wch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
              __wchb <span class="token operator">=</span> <span class="token string">&quot;\\000\\000\\000&quot;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      __cd_out <span class="token operator">=</span> <span class="token punctuation">{</span>
        step <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
        step_data <span class="token operator">=</span> <span class="token punctuation">{</span>
          __outbuf <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
          __outbufend <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
          __flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          __invocation_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          __internal_use <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
          __statep <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
          __state <span class="token operator">=</span> <span class="token punctuation">{</span>
            __count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
            __value <span class="token operator">=</span> <span class="token punctuation">{</span>
              __wch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
              __wchb <span class="token operator">=</span> <span class="token string">&quot;\\000\\000\\000&quot;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    _shortbuf <span class="token operator">=</span> L<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    _wide_vtable <span class="token operator">=</span> <span class="token number">0x0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>扩展: wd结构体</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span>
<span class="token punctuation">{</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_read_ptr<span class="token punctuation">;</span>	<span class="token comment">/* Current read pointer */</span>  <span class="token comment">//unsigned short</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_read_end<span class="token punctuation">;</span>	<span class="token comment">/* End of get area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_read_base<span class="token punctuation">;</span>	<span class="token comment">/* Start of putback+get area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_write_base<span class="token punctuation">;</span>	<span class="token comment">/* Start of put area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_write_ptr<span class="token punctuation">;</span>	<span class="token comment">/* Current put pointer. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_write_end<span class="token punctuation">;</span>	<span class="token comment">/* End of put area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_buf_base<span class="token punctuation">;</span>	<span class="token comment">/* Start of reserve area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_buf_end<span class="token punctuation">;</span>		<span class="token comment">/* End of reserve area. */</span>
  <span class="token comment">/* The following fields are used to support backing up and undo. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_save_base<span class="token punctuation">;</span>	<span class="token comment">/* Pointer to start of non-current get area. */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_backup_base<span class="token punctuation">;</span>	<span class="token comment">/* Pointer to first valid character of
				   backup area */</span>
  <span class="token class-name">wchar_t</span> <span class="token operator">*</span>_IO_save_end<span class="token punctuation">;</span>	<span class="token comment">/* Pointer to end of non-current get area. */</span>

  __mbstate_t _IO_state<span class="token punctuation">;</span>
  __mbstate_t _IO_last_state<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">_IO_codecvt</span> _codecvt<span class="token punctuation">;</span>

  <span class="token class-name">wchar_t</span> _shortbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>_wide_vtable<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化-io-no-init" tabindex="-1"><a class="header-anchor" href="#初始化-io-no-init" aria-hidden="true">#</a> 初始化 _IO_no_init</h3><h4 id="源码-1" tabindex="-1"><a class="header-anchor" href="#源码-1" aria-hidden="true">#</a> 源码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">_IO_no_init</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>wd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_IO_wfile_jumps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//second：初始化</span>
<span class="token comment">// _IO_no_init源码</span>

<span class="token keyword">void</span>
<span class="token function">_IO_no_init</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> orientation<span class="token punctuation">,</span>
	     <span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> <span class="token operator">*</span>wd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">_IO_jump_t</span> <span class="token operator">*</span>jmp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">_IO_old_init</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  fp<span class="token operator">-&gt;</span>_mode <span class="token operator">=</span> orientation<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>orientation <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      fp<span class="token operator">-&gt;</span>_wide_data <span class="token operator">=</span> wd<span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_buf_end <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_read_end <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_write_end <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_save_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_backup_base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_IO_save_end <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

      fp<span class="token operator">-&gt;</span>_wide_data<span class="token operator">-&gt;</span>_wide_vtable <span class="token operator">=</span> jmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
    <span class="token comment">/* Cause predictable crash when a wide function is called on a byte
       stream.  */</span>
    fp<span class="token operator">-&gt;</span>_wide_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_IO_wide_data</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>
  fp<span class="token operator">-&gt;</span>_freeres_list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调试-1" tabindex="-1"><a class="header-anchor" href="#调试-1" aria-hidden="true">#</a> 调试</h4><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327011904072.png" alt="image-20240327011904072" tabindex="0" loading="lazy"><figcaption>image-20240327011904072</figcaption></figure><ul><li><p>执行后new_f变化</p><ul><li><p>(*new_f).file._flags变化</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> _flags <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">72548352</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>(*new_f).wd._wide_vtable 变化</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>_wide_vtable <span class="token operator">=</span> <span class="token number">0x7ffff7fb5f60</span> <span class="token operator">&lt;</span>_IO_wfile_jumps<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="vtable表赋值" tabindex="-1"><a class="header-anchor" href="#vtable表赋值" aria-hidden="true">#</a> vtable表赋值</h3><h4 id="源码-2" tabindex="-1"><a class="header-anchor" href="#源码-2" aria-hidden="true">#</a> 源码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">_IO_JUMPS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>_IO_file_jumps<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="调试-2" tabindex="-1"><a class="header-anchor" href="#调试-2" aria-hidden="true">#</a> 调试</h4><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327013258111.png" alt="image-20240327013258111" tabindex="0" loading="lazy"><figcaption>image-20240327013258111</figcaption></figure><ul><li><p>我们对_io_file_jumps数据进行查看一下 满足好奇心</p><blockquote><p>可以发现就是塞满了各种函数</p></blockquote><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327013517671.png" alt="image-20240327013517671" tabindex="0" loading="lazy"><figcaption>image-20240327013517671</figcaption></figure><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327013607798.png" alt="image-20240327013607798" tabindex="0" loading="lazy"><figcaption>image-20240327013607798</figcaption></figure></li></ul><h3 id="链接部分" tabindex="-1"><a class="header-anchor" href="#链接部分" aria-hidden="true">#</a> 链接部分</h3><h4 id="源码-3" tabindex="-1"><a class="header-anchor" href="#源码-3" aria-hidden="true">#</a> 源码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">_IO_new_file_init_internal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="调试-3" tabindex="-1"><a class="header-anchor" href="#调试-3" aria-hidden="true">#</a> 调试</h4><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327013056474.png" alt="image-20240327013056474" tabindex="0" loading="lazy"><figcaption>image-20240327013056474</figcaption></figure><ul><li><p>_io_new_file_init_internal函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">_IO_new_file_init_internal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span> <span class="token operator">*</span>fp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* POSIX.1 allows another file handle to be used to change the position
       of our file descriptor.  Hence we actually don&#39;t know the actual
       position before we do the first fseek (and until a following fflush). */</span>
    fp<span class="token operator">-&gt;</span>file<span class="token punctuation">.</span>_offset <span class="token operator">=</span> _IO_pos_BAD<span class="token punctuation">;</span>
    fp<span class="token operator">-&gt;</span>file<span class="token punctuation">.</span>_flags <span class="token operator">|=</span> CLOSED_FILEBUF_FLAGS<span class="token punctuation">;</span>

    <span class="token function">_IO_link_in</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fp<span class="token operator">-&gt;</span>file<span class="token punctuation">.</span>_fileno <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 设置_fileno -1</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327014215956.png" alt="image-20240327014215956" tabindex="0" loading="lazy"><figcaption>image-20240327014215956</figcaption></figure></li><li><p>_IO_link_in</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">_IO_link_in</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">_IO_FILE_plus</span> <span class="token operator">*</span>fp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">-&gt;</span>file<span class="token punctuation">.</span>_flags <span class="token operator">&amp;</span> _IO_LINKED<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fp<span class="token operator">-&gt;</span>file<span class="token punctuation">.</span>_flags <span class="token operator">|=</span> _IO_LINKED<span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
        fp<span class="token operator">-&gt;</span>file<span class="token punctuation">.</span>_chain <span class="token operator">=</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span>_IO_list_all<span class="token punctuation">;</span>
        _IO_list_all <span class="token operator">=</span> fp<span class="token punctuation">;</span>
		<span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>变化</p><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327014539222.png" alt="image-20240327014539222" tabindex="0" loading="lazy"><figcaption>image-20240327014539222</figcaption></figure><ul><li><p>_chain链接<code>_IO_2_1_stderr</code></p></li><li><p>_lock 修改值</p></li><li><p>_wide_data修改值</p></li></ul></li><li><p>查看list_all链</p><blockquote><p>可以发现和我们的fp一模一样 所以我们的<code>_IO_list_all</code>此时是指向的我们fp</p></blockquote><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327015022273.png" alt="image-20240327015022273" tabindex="0" loading="lazy"><figcaption>image-20240327015022273</figcaption></figure></li><li><p>查看<code>_IO_2_1_stderr_</code></p><blockquote><p>可以发现_chain是指向的其他file 所以此时整条链是 _IO_list_all-&gt;fp 然后后面的通过_chain链接起来</p></blockquote><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327015201921.png" alt="image-20240327015201921" tabindex="0" loading="lazy"><figcaption>image-20240327015201921</figcaption></figure></li></ul><h3 id="打开文件" tabindex="-1"><a class="header-anchor" href="#打开文件" aria-hidden="true">#</a> 打开文件</h3><h4 id="源码-4" tabindex="-1"><a class="header-anchor" href="#源码-4" aria-hidden="true">#</a> 源码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IO_file_fopen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span>new_f<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> is32<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">__fopen_maybe_mmap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_f<span class="token operator">-&gt;</span>fp<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调试-4" tabindex="-1"><a class="header-anchor" href="#调试-4" aria-hidden="true">#</a> 调试</h4><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327015402527.png" alt="image-20240327015402527" tabindex="0" loading="lazy"><figcaption>image-20240327015402527</figcaption></figure><ul><li><p>_io_file_fopen函数 太长了 主要就是判断打开模式 然后调用 <code>io_file_open</code>函数来打开</p><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327020322439.png" alt="image-20240327020322439" tabindex="0" loading="lazy"><figcaption>image-20240327020322439</figcaption></figure></li><li><p>_io_file_open函数 最终调用open 去打开文件</p><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327020501416.png" alt="image-20240327020501416" tabindex="0" loading="lazy"><figcaption>image-20240327020501416</figcaption></figure></li><li><p>fp 变化</p><ul><li><p>_fileno 变成对应的文件描述符了</p></li><li><p>_offset变为了-1</p><figure><img src="https://awaqwqa.github.io/img/io_file/image-20240327020644254.png" alt="image-20240327020644254" tabindex="0" loading="lazy"><figcaption>image-20240327020644254</figcaption></figure></li></ul></li></ul>`,48);function m(v,b){const a=t("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[r,n("p",null,[s("整体脉络:"),n("a",d,[s("IO_FILE相关利用 | Alex's blog~ (la13x.github.io)"),e(a)])]),n("p",null,[s("源码阅读:"),n("a",k,[s("IO函数源码阅读 (bambooiii.github.io)"),e(a)])])]),_])}const h=p(l,[["render",m],["__file","io_file.html.vue"]]);export{h as default};
